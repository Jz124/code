.版本 2
.支持库 iext
.支持库 dp1
.支持库 spec
.支持库 eCalc

.程序集 程序集_AXP
.程序集变量 集_累计数, 整数型
.程序集变量 集_资源文件清单, 文本型
.程序集变量 集_m_lpAxpHashTable, 整数型, , "98304"
.程序集变量 集_AXPHeader, 整数型, , "10"
.程序集变量 集_AXPFileInfo复制, 整数型, , "0"
.程序集变量 集_AXPFileInfo, 整数型, , "0"
.程序集变量 集_m_CryptTable, 长整数型, , "0"
.程序集变量 Axp文件ID, 整数型
.程序集变量 AxpBrushes, 整数型
.程序集变量 AxpConfig, 整数型
.程序集变量 AxpEffect, 整数型
.程序集变量 AxpInterface, 整数型
.程序集变量 AxpMaterial, 整数型
.程序集变量 AxpModel, 整数型
.程序集变量 AxpScene, 整数型
.程序集变量 AxpSound, 整数型
.程序集变量 zise_程序集变量_1, 整数型, , "1024"
.程序集变量 zise_程序集变量_2, axp文件头
.程序集变量 zise_程序集变量_3, axp文件头
.程序集变量 zise_程序集变量_4, 字节集
.程序集变量 zise_程序集变量_5, 字节集
.程序集变量 zise_程序集变量_6, 逻辑型
.程序集变量 zise_程序集变量_7, 逻辑型
.程序集变量 zise_程序集变量_8, 透明标签
.程序集变量 zise_程序集变量_9, 进度条
.程序集变量 zise_程序集变量_10, 进度条
.程序集变量 zise_程序集变量_11, 透明标签
.程序集变量 zise_程序集变量_12, 逻辑型
.程序集变量 zise_程序集变量_13, 逻辑型
.程序集变量 zise_程序集变量_14, 文本型
.程序集变量 zise_程序集变量_15, 文本型
.程序集变量 zise_程序集变量_16, 文本型
.程序集变量 zise_程序集变量_17, 文本型
.程序集变量 zise_程序集变量_18, 逻辑型
.程序集变量 zise_程序集变量_19, 逻辑型
.程序集变量 zise_程序集变量_20, 透明标签
.程序集变量 zise_程序集变量_21, 进度条
.程序集变量 zise_程序集变量_22, 进度条
.程序集变量 zise_程序集变量_23, 文本型
.程序集变量 zise_程序集变量_24, 文本型
.程序集变量 zise_程序集变量_25, 文本型
.程序集变量 资源文件文件索引, 整数型

.子程序 axp更新补丁开始, 逻辑型, 公开, 开始更新补丁 用于AXP补丁文件更新
.参数 目标文件, 文本型, , 补丁文件axp
.参数 配置文件, 文本型, , 配置文件用于记录补丁是否更新过
.参数 标签, 透明标签
.参数 进度条1, 进度条
.参数 进度条2, 进度条
.参数 是否强制更新, 逻辑型, , 是否强制更新补丁
.局部变量 zise_局部变量_1, 文本型

.如果真 (zise_程序集变量_18)
    返回 (假)
.如果真结束
zise_程序集变量_21 ＝ 进度条1
zise_程序集变量_22 ＝ 进度条2
zise_程序集变量_24 ＝ 目标文件
zise_程序集变量_25 ＝ 配置文件
zise_程序集变量_20 ＝ 标签

.如果 (是否强制更新)

.否则
    zise_局部变量_1 ＝ 读配置项 (zise_程序集变量_25, “Variable”, “updatesize”, “0”)
    .如果 (zise_局部变量_1 ＝ 到文本 (取文件尺寸 (目标文件)))
        zise_程序集变量_20.标题 ＝ “所有文件更新完成,你现在可以进入游戏了！”
        zise_程序集变量_21.位置 ＝ zise_程序集变量_21.最大位置
        zise_程序集变量_22.位置 ＝ zise_程序集变量_22.最大位置
        返回 (真)
    .否则

    .如果结束

.如果结束

zise_程序集变量_18 ＝ 真
zise_程序集变量_19 ＝ 真
zise_子程序_78 ()
返回 (真)


.子程序 zise_子程序_78, , , _-@S<axp更新补丁>
.局部变量 zise_局部变量_1, 文本型
.局部变量 zise_局部变量_2, 文本型
.局部变量 zise_局部变量_3, 文本型

zise_局部变量_1 ＝ zise_程序集变量_24
zise_局部变量_2 ＝ zise_程序集变量_25
zise_程序集变量_22.位置 ＝ 1
zise_程序集变量_21.位置 ＝ 1
zise_程序集变量_20.标题 ＝ “正在更新文件：config.axp”
zise_子程序_74 (zise_局部变量_1, “config”, 真)

zise_程序集变量_21.位置 ＝ 1
zise_程序集变量_20.标题 ＝ “正在更新文件：effect.axp”
zise_子程序_74 (zise_局部变量_1, “effect”, 真)
zise_程序集变量_21.位置 ＝ 1
zise_程序集变量_20.标题 ＝ “正在更新文件：brushes.axp”
zise_子程序_74 (zise_局部变量_1, “brushes”, 真)
zise_程序集变量_21.位置 ＝ 1
zise_程序集变量_20.标题 ＝ “正在更新文件：Interface.axp”
zise_子程序_74 (zise_局部变量_1, “Interface”, 真)
zise_程序集变量_21.位置 ＝ 1
zise_程序集变量_20.标题 ＝ “正在更新文件：launchskin.axp”
zise_子程序_74 (zise_局部变量_1, “launchskin”, 真)
zise_程序集变量_21.位置 ＝ 1
zise_程序集变量_20.标题 ＝ “正在更新文件：material.axp”
zise_子程序_74 (zise_局部变量_1, “material”, 真)
zise_程序集变量_21.位置 ＝ 1
zise_程序集变量_20.标题 ＝ “正在更新文件：model.axp”
zise_子程序_74 (zise_局部变量_1, “model”, 真)
zise_程序集变量_21.位置 ＝ 1
zise_程序集变量_20.标题 ＝ “正在更新文件：scene.axp”
zise_子程序_74 (zise_局部变量_1, “scene”, 真)
zise_程序集变量_21.位置 ＝ 1
zise_程序集变量_20.标题 ＝ “正在更新文件：sound.axp”
zise_子程序_74 (zise_局部变量_1, “sound”, 真)
写配置项 (zise_程序集变量_25, “Variable”, “updatesize”, 到文本 (取文件尺寸 (zise_局部变量_1)))
zise_程序集变量_18 ＝ 假
zise_程序集变量_19 ＝ 假
zise_程序集变量_20.标题 ＝ “所有文件更新完成,你现在可以进入游戏了！”
zise_程序集变量_21.最大位置 ＝ 100
zise_程序集变量_21.位置 ＝ zise_程序集变量_21.最大位置
zise_程序集变量_22.位置 ＝ zise_程序集变量_22.最大位置
返回 ()


.子程序 zise_子程序_74, 逻辑型, , _-@S<addaxpFilepack>
.参数 zise_参数_1, 文本型
.参数 zise_参数_2, 文本型
.参数 zise_参数_3, 逻辑型
.局部变量 zise_局部变量_1, 整数型
.局部变量 zise_局部变量_2, 整数型
.局部变量 zise_局部变量_3, 文本型
.局部变量 zise_局部变量_4, 文本型
.局部变量 zise_局部变量_5, 文本型
.局部变量 zise_局部变量_6, 文本型
.局部变量 zise_局部变量_7, 文本型, , "0"
.局部变量 zise_局部变量_8, 文本型, , "0"
.局部变量 zise_局部变量_9, 文本型, , "0"
.局部变量 zise_局部变量_10, axp子文件信息
.局部变量 zise_局部变量_11, axp子文件信息
.局部变量 zise_局部变量_12, axp子文件信息
.局部变量 zise_局部变量_13, axp子文件信息
.局部变量 zise_局部变量_14, 整数型
.局部变量 zise_局部变量_15, 整数型
.局部变量 zise_局部变量_16, 文本型
.局部变量 zise_局部变量_17, 逻辑型
.局部变量 zise_局部变量_18, 文本型, , "0"
.局部变量 zise_局部变量_19, 整数型
.局部变量 zise_局部变量_20, 文本型, , "0"
.局部变量 zise_局部变量_21, 文本型
.局部变量 zise_局部变量_22, 字节集
.局部变量 zise_局部变量_23, 逻辑型
.局部变量 zise_局部变量_24, 逻辑型
.局部变量 zise_局部变量_25, 文本型
.局部变量 zise_局部变量_26, 整数型
.局部变量 zise_局部变量_27, 整数型

zise_局部变量_23 ＝ 真
处理事件 ()
zise_局部变量_3 ＝ 取文本左边 (zise_参数_1, 倒找文本 (zise_参数_1, “\”, , 假))
zise_局部变量_4 ＝ zise_局部变量_3 ＋ zise_参数_2 ＋ “.axp”
.如果真 (文件是否存在 (zise_参数_1) ＝ 假)
    返回 (假)
.如果真结束
createsucks ()  ' 
zise_参数_2 ＝ 到小写 (zise_参数_2)
zise_局部变量_16 ＝ zise_参数_2 ＋ “/”
zise_局部变量_1 ＝ 打开文件 (zise_参数_1, #读入, )
.如果真 (zise_局部变量_1 ＝ 0)
    返回 (假)
.如果真结束
axp读入文件头 (zise_局部变量_1, zise_程序集变量_2)
axp取子文件信息 (“(list)”, zise_程序集变量_2, zise_局部变量_10)
zise_局部变量_5 ＝ axp取子文件目录文本 (zise_局部变量_1, zise_程序集变量_2)
zise_局部变量_7 ＝ 分割文本 (zise_局部变量_5, 字符 (10), )

.如果真 (文件是否存在 (zise_局部变量_4) ＝ 假)
    写到文件 (zise_局部变量_4, {  })
.如果真结束
zise_局部变量_2 ＝ 打开文件 (zise_局部变量_4, #读写, )
.如果真 (zise_局部变量_2 ＝ 0)
    返回 (假)
.如果真结束
zise_局部变量_26 ＝ 取文件长度 (zise_局部变量_2)
.如果 (zise_局部变量_26 ＜ 1441832)  ' 
    axp初始化文件头 (zise_程序集变量_3)
    axp取子文件信息 (“(list)”, zise_程序集变量_3, zise_局部变量_11)
    zise_局部变量_6 ＝ axp取子文件目录文本 (zise_局部变量_2, zise_程序集变量_3)
    zise_局部变量_9 ＝ 分割文本 (zise_局部变量_6, 字符 (10), )
    zise_局部变量_26 ＝ 1441832
.否则
    axp读入文件头 (zise_局部变量_2, zise_程序集变量_3)
    axp取子文件信息 (“(list)”, zise_程序集变量_3, zise_局部变量_11)
    zise_局部变量_6 ＝ axp取子文件目录文本 (zise_局部变量_2, zise_程序集变量_3)
    zise_局部变量_9 ＝ 分割文本 (zise_局部变量_6, 字符 (10), )

.如果结束


' 
.计次循环首 (取数组成员数 (zise_局部变量_7), zise_局部变量_14)
    .如果真 (到小写 (取文本左边 (zise_局部变量_7 [zise_局部变量_14], 取文本长度 (zise_局部变量_16))) ＝ zise_局部变量_16)
        加入成员 (zise_局部变量_8, zise_局部变量_7 [zise_局部变量_14])
    .如果真结束

.计次循环尾 ()
.如果真 (zise_参数_3)
    zise_程序集变量_21.位置 ＝ 1
    zise_程序集变量_21.最大位置 ＝ 取数组成员数 (zise_局部变量_8) ＋ 1
    zise_程序集变量_22.最大位置 ＝ 取数组成员数 (zise_局部变量_7)
    处理事件 ()
.如果真结束
' 

.计次循环首 (取数组成员数 (zise_局部变量_8), zise_局部变量_14)
    .如果真 (zise_参数_3)
        .如果真 (zise_程序集变量_19 ＝ 假)
            zise_局部变量_23 ＝ 假
            跳出循环 ()
        .如果真结束
        ' 
    .如果真结束

    .如果真 (到小写 (取文本左边 (zise_局部变量_8 [zise_局部变量_14], 取文本长度 (zise_局部变量_16))) ＝ zise_局部变量_16)

        zise_局部变量_17 ＝ 真
        zise_局部变量_18 ＝ 分割文本 (zise_局部变量_8 [zise_局部变量_14], “|”, )
        axp取子文件信息 (zise_局部变量_18 [1], zise_程序集变量_2, zise_局部变量_12)
        zise_局部变量_21 ＝ 取文本右边 (zise_局部变量_18 [1], 取文本长度 (zise_局部变量_18 [1]) － 取文本长度 (zise_局部变量_16))

        .计次循环首 (取数组成员数 (zise_局部变量_9), zise_局部变量_15)
            zise_局部变量_20 ＝ 分割文本 (zise_局部变量_9 [zise_局部变量_15], “|”, )
            .如果真 (取数组成员数 (zise_局部变量_20) ≠ 3)
                到循环尾 ()
            .如果真结束
            .如果真 (到小写 (zise_局部变量_21) ＝ 到小写 (zise_局部变量_20 [1]))
                zise_局部变量_20 [2] ＝ zise_局部变量_18 [2]
                zise_局部变量_20 [3] ＝ zise_局部变量_18 [3]
                zise_局部变量_9 [zise_局部变量_15] ＝ zise_局部变量_20 [1] ＋ “|” ＋ zise_局部变量_20 [2] ＋ “|” ＋ zise_局部变量_20 [3]
                axp取子文件信息 (zise_局部变量_20 [1], zise_程序集变量_3, zise_局部变量_13)
                zise_局部变量_17 ＝ 假
                跳出循环 ()
            .如果真结束

        .计次循环尾 ()
        .如果 (zise_局部变量_17)
            重定义数组 (zise_局部变量_20, 假, 3)
            zise_局部变量_20 [1] ＝ zise_局部变量_21
            zise_局部变量_20 [2] ＝ zise_局部变量_18 [2]
            zise_局部变量_20 [3] ＝ zise_局部变量_18 [3]

            zise_局部变量_6 ＝ zise_局部变量_6 ＋ 字符 (10) ＋ zise_局部变量_20 [1] ＋ “|” ＋ zise_局部变量_20 [2] ＋ “|” ＋ zise_局部变量_20 [3]
            axp新建子文件信息 (zise_局部变量_20 [1], zise_程序集变量_3, zise_局部变量_13, zise_局部变量_26, zise_局部变量_12.数据大小)
            .如果真 (zise_局部变量_13.是否有效 ＝ 假)
                zise_子程序_80 (取运行目录 () ＋ “\1wuxiao.txt”, zise_局部变量_4 ＋ “ ” ＋ zise_局部变量_21 ＋ #换行符)
                到循环尾 ()
            .如果真结束



        .否则

            .如果真 (zise_局部变量_13.是否有效 ＝ 假)
                zise_子程序_80 (取运行目录 () ＋ “\2wuxiao.txt”, zise_局部变量_21 ＋ #换行符)
                到循环尾 ()
            .如果真结束
            .如果 (zise_局部变量_12.数据大小 ＞ zise_局部变量_13.数据大小)  ' 
                zise_局部变量_13.数据大小 ＝ zise_局部变量_12.数据大小
                zise_局部变量_13.数据地址 ＝ zise_局部变量_26
            .否则


            .如果结束

        .如果结束

        移动读写位置 (zise_局部变量_1, #文件首, zise_局部变量_12.数据地址)
        zise_局部变量_22 ＝ 读入字节集 (zise_局部变量_1, zise_局部变量_12.数据大小)
        移动读写位置 (zise_局部变量_2, #文件首, zise_局部变量_13.数据地址)
        写出字节集 (zise_局部变量_2, zise_局部变量_22)
        zise_局部变量_13.数据大小 ＝ zise_局部变量_12.数据大小
        zise_局部变量_24 ＝ 真
        .如果真 (zise_局部变量_26 ＝ zise_局部变量_13.数据地址)
            zise_局部变量_26 ＝ zise_局部变量_26 ＋ zise_局部变量_13.数据大小 ＋ 10  ' 
        .如果真结束
        zise_程序集变量_3.列表数据 [zise_局部变量_13.列表编号 × 3 ＋ 1] ＝ zise_局部变量_13.数据地址
        zise_程序集变量_3.列表数据 [zise_局部变量_13.列表编号 × 3 ＋ 2] ＝ zise_局部变量_13.数据大小
        zise_程序集变量_3.列表数据 [zise_局部变量_13.列表编号 × 3 ＋ 3] ＝ zise_局部变量_13.数据类型
        .如果真 (zise_参数_3)
            zise_程序集变量_21.位置 ＝ zise_程序集变量_21.位置 ＋ 1
            zise_程序集变量_22.位置 ＝ zise_程序集变量_22.位置 ＋ 1
            处理事件 ()
            ' 
        .如果真结束

    .如果真结束

.计次循环尾 ()
.如果真 (zise_局部变量_24 或 真)  ' 
    .如果真 (zise_局部变量_11.数据大小 ＜ 取文本长度 (zise_局部变量_6))
        zise_局部变量_11.数据地址 ＝ zise_局部变量_26
    .如果真结束
    zise_局部变量_11.数据大小 ＝ 取文本长度 (zise_局部变量_6)
    zise_程序集变量_3.头部数据 [zise_局部变量_11.头部编号 × 3 ＋ 3 ＋ 10] ＝ zise_局部变量_11.列表编号 ＋ #_0x80000000
    zise_程序集变量_3.列表数据 [zise_局部变量_11.列表编号 × 3 ＋ 1] ＝ zise_局部变量_11.数据地址
    zise_程序集变量_3.列表数据 [zise_局部变量_11.列表编号 × 3 ＋ 2] ＝ zise_局部变量_11.数据大小
    zise_程序集变量_3.列表数据 [zise_局部变量_11.列表编号 × 3 ＋ 3] ＝ zise_局部变量_11.数据类型
    移动读写位置 (zise_局部变量_2, #文件首, zise_局部变量_11.数据地址)
    写出文本 (zise_局部变量_2, zise_局部变量_6)

    移动读写位置 (zise_局部变量_2, #文件首, 0)
    写出数据 (zise_局部变量_2, zise_程序集变量_3.头部数据, zise_程序集变量_3.列表数据)


.如果真结束
关闭文件 (zise_局部变量_1)
关闭文件 (zise_局部变量_2)
zise_程序集变量_21.位置 ＝ zise_程序集变量_21.最大位置
处理事件 ()
返回 (zise_局部变量_23)


.子程序 axp新建子文件信息, , 公开
.参数 子文件名, 文本型
.参数 axp文件头, axp文件头
.参数 子文件信息, axp子文件信息, 参考
.参数 数据地址, 整数型
.参数 数据大小, 整数型

子文件信息.a1 ＝ GetDisp (子文件名, 1)
子文件信息.a2 ＝ GetDisp (子文件名, 2)
子文件信息.a3 ＝ GetDisp (子文件名, 3)
.如果真 (子文件名 ＝ “DressPaint_Fitting/DressPaint_Fitting.layout.xml”)
    ' 调试输出 (zise_子程序_73 (子文件信息.a1))
    ' 调试输出 (zise_子程序_73 (子文件信息.a2))
.如果真结束
子文件信息.头部编号 ＝ 位与 (子文件信息.a3, 32767)  ' 
.判断循环首 (子文件信息.头部编号 ≤ 32767)
    .如果 (位与 (axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 3 ＋ 10], #_0x80000000) ＝ #_0x80000000)
        .如果真 (axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 1 ＋ 10] ＝ 子文件信息.a1 且 axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 2 ＋ 10] ＝ 子文件信息.a2)
            子文件信息.是否有效 ＝ 假
            返回 ()
        .如果真结束

    .否则

    .如果结束
    ' 
    ' 
    ' 
    .如果真 (axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 1 ＋ 10] ＝ 0 且 axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 3 ＋ 10] ＝ 0)
        axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 1 ＋ 10] ＝ 子文件信息.a1
        axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 2 ＋ 10] ＝ 子文件信息.a2
        axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 3 ＋ 10] ＝ axp文件头.头部数据 [6] ＋ #_0x80000000  ' 
        子文件信息.列表编号 ＝ axp文件头.头部数据 [6]
        axp文件头.头部数据 [6] ＝ axp文件头.头部数据 [6] ＋ 1  ' 
        axp文件头.列表数据 [子文件信息.列表编号 × 3 ＋ 1] ＝ 数据地址  ' 
        axp文件头.列表数据 [子文件信息.列表编号 × 3 ＋ 2] ＝ 数据大小
        axp文件头.列表数据 [子文件信息.列表编号 × 3 ＋ 3] ＝ #_0x80000000
        子文件信息.数据地址 ＝ axp文件头.列表数据 [子文件信息.列表编号 × 3 ＋ 1]
        子文件信息.数据大小 ＝ axp文件头.列表数据 [子文件信息.列表编号 × 3 ＋ 2]
        子文件信息.数据类型 ＝ axp文件头.列表数据 [子文件信息.列表编号 × 3 ＋ 3]
        子文件信息.是否有效 ＝ 真
        返回 ()
    .如果真结束
    子文件信息.头部编号 ＝ 位与 (子文件信息.头部编号 ＋ 1, 32767)
.判断循环尾 ()
子文件信息.是否有效 ＝ 假


.子程序 zise_子程序_80, , , _-@S<追加写到文件>
.参数 zise_参数_1, 文本型
.参数 zise_参数_2, 文本型
.局部变量 zise_局部变量_1, 整数型

.如果 (文件是否存在 (zise_参数_1))
    zise_局部变量_1 ＝ 打开文件 (zise_参数_1, #读写, )
    .如果真 (zise_局部变量_1 ≠ 0)
        移到文件尾 (zise_局部变量_1)
        写出文本 (zise_局部变量_1, zise_参数_2)
        关闭文件 (zise_局部变量_1)
    .如果真结束

.否则
    写到文件 (zise_参数_1, 到字节集 (zise_参数_2))
.如果结束


.子程序 axp初始化文件头, 逻辑型
.参数 axp文件头, axp文件头
.局部变量 zise_局部变量_1, 整数型
.局部变量 zise_局部变量_2, 整数型
.局部变量 zise_局部变量_3, 整数型
.局部变量 zise_局部变量_4, 整数型

axp文件头.头部数据 [1] ＝ 1263556673
axp文件头.头部数据 [2] ＝ 65537
axp文件头.头部数据 [3] ＝ 0
axp文件头.头部数据 [4] ＝ 40
axp文件头.头部数据 [5] ＝ 393256
axp文件头.头部数据 [6] ＝ 0
axp文件头.头部数据 [7] ＝ 1048576
axp文件头.头部数据 [8] ＝ 1441832
axp文件头.头部数据 [9] ＝ 0
axp文件头.头部数据 [10] ＝ 0
zise_局部变量_1 ＝ GetDisp (“(list)”, 1)
zise_局部变量_2 ＝ GetDisp (“(list)”, 2)
zise_局部变量_3 ＝ GetDisp (“(list)”, 3)
zise_局部变量_4 ＝ 位与 (zise_局部变量_3, 32767)  ' 
axp文件头.头部数据 [zise_局部变量_4 × 3 ＋ 1 ＋ 10] ＝ zise_局部变量_1
axp文件头.头部数据 [zise_局部变量_4 × 3 ＋ 2 ＋ 10] ＝ zise_局部变量_2
axp文件头.头部数据 [zise_局部变量_4 × 3 ＋ 3 ＋ 10] ＝ -2147483648  ' 
axp文件头.列表数据 [1] ＝ #_0x160028
axp文件头.列表数据 [2] ＝ 0
axp文件头.列表数据 [3] ＝ #_0x80000000

返回 (真)

.子程序 文本_取右边Ex, 文本型, 公开, 从文本的右边按 欲寻找的文本 开始寻找, 取行右边 (“1234567890”, “5”, 1, 真)
.参数 被查找的文本, 文本型, , 被查找的文本
.参数 欲寻找的文本, 文本型, , 欲寻找的文本
.参数 起始寻找位置, 整数型, 可空, 欲寻找的文本的起始寻找位置,一般情况都留空
.参数 是否区分大小写, 逻辑型, 可空, 默认为假,区分大小写
.局部变量 找到的位置, 整数型
.局部变量 结果文本, 文本型

.如果真 (起始寻找位置 ≤ 0 或 是否为空 (起始寻找位置) ＝ 真)
    起始寻找位置 ＝ 1
.如果真结束
找到的位置 ＝ 寻找文本 (被查找的文本, 欲寻找的文本, 起始寻找位置, 是否区分大小写)
.如果真 (找到的位置 ＝ -1)
    返回 (“”)
.如果真结束
结果文本 ＝ 取文本右边 (被查找的文本, 取文本长度 (被查找的文本) － 取文本长度 (欲寻找的文本) － 找到的位置 ＋ 1)
返回 (结果文本)

.子程序 函数_获取更新文件名, 文本型
.参数 文件全路径, 文本型
.参数 补丁路径, 文本型
.局部变量 补丁路径长度, 整数型
.局部变量 全路径长度, 整数型
.局部变量 局_文件名, 文本型

.判断开始 (取文本右边 (补丁路径, 1) ＝ “\”)
    补丁路径长度 ＝ 取文本长度 (补丁路径) － 1
.默认
    补丁路径长度 ＝ 取文本长度 (补丁路径)
.判断结束
全路径长度 ＝ 取文本长度 (文件全路径)
局_文件名 ＝ 取文本右边 (文件全路径, 全路径长度 － 补丁路径长度)
返回 (局_文件名)

.子程序 AXP补丁更新, , 公开, 用于明文目录式更新，打包
.参数 补丁路径, 文本型
.参数 AXP文件名, 文本型, , 不需要后缀
.参数 更新模式, 整数型, 可空, 更新模式2为保存
.参数 透明标签, 透明标签
.参数 进度条, 进度条
.局部变量 目录列表, 文本型, , "0"
.局部变量 目录列表定位, 整数型
.局部变量 当前路径, 文本型
.局部变量 目录名称, 文本型
.局部变量 i, 整数型
.局部变量 文件路径, 文本型
.局部变量 文件路径数组, 文本型, , "0"
.局部变量 x, 整数型
.局部变量 更新文件名称, 文本型
.局部变量 AXP_更新文件名, 文本型
.局部变量 临时数组, 文本型, , "0"
.局部变量 更新AXP文件名, 文本型
.局部变量 A文件名, 文本型

数组清零 (目录列表)
数组清零 (文件路径数组)
.如果真 (取文本右边 (补丁路径, 1) ＝ “\”)
    补丁路径 ＝ 取文本左边 (补丁路径, 取文本长度 (补丁路径) － 1)
.如果真结束

.如果真 (更新模式 ≠ 2)
    补丁路径 ＝ 补丁路径 ＋ “\” ＋ AXP文件名
.如果真结束

A文件名 ＝ 函数_获取AXP文件名 (AXP文件名)
雪宝遍历文件 (补丁路径, 文件路径数组)
.如果真 (取数组成员数 (文件路径数组) ≤ 0)
    返回 ()
.如果真结束
进度条.最大位置 ＝ 取数组成员数 (文件路径数组)
.如果 (更新模式 ≠ 2)
    AXP_更新文件名 ＝ 取运行目录 () ＋ “\Data\” ＋ AXP文件名 ＋ “.axp”
.否则
    AXP_更新文件名 ＝ AXP文件名
.如果结束
.如果真 (文件是否存在 (AXP_更新文件名) ＝ 假)
    写到文件 (AXP_更新文件名, 解压数据 (#AXP_空))
    延时 (200)
.如果真结束
打开axp文件 (AXP_更新文件名)
' 调试输出 (补丁路径)
.计次循环首 (取数组成员数 (文件路径数组), x)
    .如果 (更新模式 ≠ 2)
        更新文件名称 ＝ AXP文件名 ＋ 文本_取右边Ex (文件路径数组 [x], AXP文件名, , )
    .否则
        更新AXP文件名 ＝ 函数_获取更新文件名 (文件路径数组 [x], 补丁路径)
        更新文件名称 ＝ A文件名 ＋ 更新AXP文件名
    .如果结束
    更新文件 (Axp文件ID, 读入文件 (文件路径数组 [x]), Xzip文件名称 (更新文件名称))
    透明标签.标题 ＝ 文件路径数组 [x]
    进度条.位置 ＝ x
    处理事件 ()
.计次循环尾 ()
关闭axp文件 ()

.子程序 校验文件MD5, 文本型, 公开
.参数 RunPatch, 文本型
.参数 PatchName, 文本型
.局部变量 Config2, 整数型
.局部变量 Interface2, 整数型
.局部变量 Patch, 整数型
.局部变量 Gameexe, 整数型
.局部变量 Render, 整数型
.局部变量 RSSParser, 整数型
.局部变量 OK, 整数型

Config2 ＝ 取文件尺寸 (RunPatch ＋ “\Data\Config.axp”)
Interface2 ＝ 取文件尺寸 (RunPatch ＋ “\Data\Interface.axp”)
Patch ＝ 取文件尺寸 (RunPatch ＋ “\” ＋ PatchName)
Gameexe ＝ 取文件尺寸 (RunPatch ＋ “\Bin\Game.exe”)
OK ＝ Config2 ＋ Interface2 ＋ Gameexe ＋ Render ＋ RSSParser ＋ Patch
返回 (取数据摘要 (到字节集 (OK)))

.子程序 axp文件解包开始, 逻辑型
.参数 文件名, 文本型
.参数 目录, 文本型
.参数 标签, 透明标签
.参数 进度条, 进度条

.如果真 (zise_程序集变量_12)
    返回 (假)
.如果真结束
createsucks ()
zise_程序集变量_11 ＝ 标签
zise_程序集变量_15 ＝ 目录
zise_程序集变量_14 ＝ 文件名
zise_程序集变量_10 ＝ 进度条
zise_程序集变量_12 ＝ 真
zise_程序集变量_13 ＝ 真
zise_子程序_79 ()
返回 (真)

.子程序 zise_子程序_79, , , _-@S<axp文件解包>

zise_程序集变量_11.标题 ＝ “开始解包文件：” ＋ zise_程序集变量_14
zise_子程序_75 (zise_程序集变量_14, zise_程序集变量_15, 真)
zise_程序集变量_12 ＝ 假
zise_程序集变量_13 ＝ 假
zise_程序集变量_11.标题 ＝ “解包完成！！！！”


.子程序 createsucks
.局部变量 zise_局部变量_1, 整数型
.局部变量 zise_局部变量_2, 整数型
.局部变量 zise_局部变量_3, 整数型
.局部变量 zise_局部变量_4, 整数型
.局部变量 zise_局部变量_5, 整数型
.局部变量 zise_局部变量_6, 整数型

zise_局部变量_3 ＝ 取变量地址 (zise_程序集变量_1)
zise_局部变量_1 ＝ 1048577

.计次循环首 (1024, zise_局部变量_2)
    zise_程序集变量_1 [zise_局部变量_2] ＝ 0
.计次循环尾 ()
zise_局部变量_5 ＝ zise_局部变量_1
.计次循环首 (1024 ÷ 4, zise_局部变量_2)
    zise_局部变量_4 ＝ (zise_局部变量_5 × 125 ＋ 3) ％ 2796203
    zise_局部变量_5 ＝ (zise_局部变量_4 × 125 ＋ 3) ％ 2796203
    ' 
    ' 
    zise_程序集变量_1 [zise_局部变量_2 ＋ 0] ＝ 左移 (zise_局部变量_4, 16) ＋ zise_局部变量_5 ％ 65536
    zise_局部变量_4 ＝ (zise_局部变量_5 × 125 ＋ 3) ％ 2796203
    zise_局部变量_5 ＝ (zise_局部变量_4 × 125 ＋ 3) ％ 2796203
    zise_程序集变量_1 [zise_局部变量_2 ＋ 256] ＝ 左移 (zise_局部变量_4, 16) ＋ zise_局部变量_5 ％ 65536
    zise_局部变量_4 ＝ (zise_局部变量_5 × 125 ＋ 3) ％ 2796203
    zise_局部变量_5 ＝ (zise_局部变量_4 × 125 ＋ 3) ％ 2796203
    zise_程序集变量_1 [zise_局部变量_2 ＋ 512] ＝ 左移 (zise_局部变量_4, 16) ＋ zise_局部变量_5 ％ 65536
    zise_局部变量_4 ＝ (zise_局部变量_5 × 125 ＋ 3) ％ 2796203
    zise_局部变量_5 ＝ (zise_局部变量_4 × 125 ＋ 3) ％ 2796203
    zise_程序集变量_1 [zise_局部变量_2 ＋ 768] ＝ 左移 (zise_局部变量_4, 16) ＋ zise_局部变量_5 ％ 65536
.计次循环尾 ()

.子程序 zise_子程序_75, 逻辑型, , _-@S<axpUnPack>
.参数 zise_参数_1, 文本型
.参数 zise_参数_2, 文本型
.参数 zise_参数_3, 逻辑型
.局部变量 zise_局部变量_1, 整数型
.局部变量 zise_局部变量_2, 文本型
.局部变量 zise_局部变量_3, 文本型, , "0"
.局部变量 zise_局部变量_4, axp子文件信息
.局部变量 zise_局部变量_5, axp子文件信息
.局部变量 zise_局部变量_6, 整数型
.局部变量 zise_局部变量_7, 文本型, , "0"
.局部变量 zise_局部变量_8, 文本型
.局部变量 zise_局部变量_9, 字节集
.局部变量 zise_局部变量_10, 逻辑型

zise_局部变量_10 ＝ 真
.如果真 (文件是否存在 (zise_参数_1) ＝ 假)
    返回 (假)
.如果真结束
createsucks ()  ' 
.如果真 (取文本右边 (zise_参数_2, 1) ≠ “\”)
    zise_参数_2 ＝ zise_参数_2 ＋ “\”
.如果真结束
zise_局部变量_1 ＝ 打开文件 (zise_参数_1, #读入, )
.如果真 (zise_局部变量_1 ＝ 0)
    返回 (假)
.如果真结束
axp读入文件头 (zise_局部变量_1, zise_程序集变量_2)  ' 
axp取子文件信息 (“(list)”, zise_程序集变量_2, zise_局部变量_4)  ' 
zise_局部变量_2 ＝ axp取子文件目录文本 (zise_局部变量_1, zise_程序集变量_2)
zise_局部变量_3 ＝ 分割文本 (zise_局部变量_2, 字符 (10), )

.如果真 (zise_参数_3)
    zise_程序集变量_10.位置 ＝ 1
    zise_程序集变量_10.最大位置 ＝ 取数组成员数 (zise_局部变量_3)
.如果真结束
' 

.计次循环首 (取数组成员数 (zise_局部变量_3), zise_局部变量_6)
    .如果真 (zise_参数_3)
        .如果真 (zise_程序集变量_13 ＝ 假)
            zise_局部变量_10 ＝ 假
            跳出循环 ()
        .如果真结束
        ' 
    .如果真结束


    zise_局部变量_7 ＝ 分割文本 (zise_局部变量_3 [zise_局部变量_6], “|”, )
    .如果真 (取数组成员数 (zise_局部变量_7) ≠ 3)
        到循环尾 ()
    .如果真结束
    axp取子文件信息 (zise_局部变量_7 [1], zise_程序集变量_2, zise_局部变量_5)  ' 
    zise_局部变量_8 ＝ 文本字符替换 (zise_参数_2 ＋ zise_局部变量_7 [1], “/”, “\”)

    移动读写位置 (zise_局部变量_1, #文件首, zise_局部变量_5.数据地址)
    zise_局部变量_9 ＝ 读入字节集 (zise_局部变量_1, zise_局部变量_5.数据大小)
    zise_程序集变量_11.标题 ＝ zise_局部变量_8
    创建任意目录 (取文本左边 (zise_局部变量_8, 倒找文本 (zise_局部变量_8, “\”, , 假)))
    写到文件 (zise_局部变量_8, zise_局部变量_9)
    .如果真 (zise_参数_3)
        zise_程序集变量_10.位置 ＝ zise_程序集变量_10.位置 ＋ 1
        ' 
    .如果真结束


.计次循环尾 ()
关闭文件 (zise_局部变量_1)
返回 (zise_局部变量_10)


.子程序 创建任意目录, 逻辑型, 公开, 创建单级或多级目录，创建成功返回真，否则返回假。
.参数 创建的目录名, 文本型, , 输入要创建的目录名
.局部变量 zise_局部变量_1, 文本型, , "0"
.局部变量 zise_局部变量_2, 文本型
.局部变量 zise_局部变量_3, 逻辑型
.局部变量 zise_局部变量_4, 整数型

创建的目录名 ＝ 文本字符替换 (创建的目录名, “/”, “\”)
zise_局部变量_1 ＝ 分割文本 (创建的目录名, “\”, )
zise_局部变量_2 ＝ zise_局部变量_1 [1]
.计次循环首 (取数组成员数 (zise_局部变量_1) － 1, zise_局部变量_4)
    zise_局部变量_2 ＝ zise_局部变量_2 ＋ “\” ＋ zise_局部变量_1 [zise_局部变量_4 ＋ 1]
    .如果真 (寻找文件 (zise_局部变量_2, #子目录) ＝ “”)
        .如果 (创建目录 (zise_局部变量_2) ＝ 真)
            zise_局部变量_3 ＝ 真
        .否则
            zise_局部变量_3 ＝ 假
            跳出循环 ()
        .如果结束



    .如果真结束

.计次循环尾 ()
返回 (zise_局部变量_3)

.子程序 axp取子文件信息
.参数 子文件名, 文本型
.参数 axp文件头, axp文件头
.参数 子文件信息, axp子文件信息, 参考
.局部变量 zise_局部变量_1, 整数型
.局部变量 zise_局部变量_2, 整数型

子文件信息.a1 ＝ GetDisp (子文件名, 1)
子文件信息.a2 ＝ GetDisp (子文件名, 2)
子文件信息.a3 ＝ GetDisp (子文件名, 3)
子文件信息.头部编号 ＝ 位与 (子文件信息.a3, 32767)  ' 
.判断循环首 (子文件信息.头部编号 ≤ 32767)
    zise_局部变量_1 ＝ zise_局部变量_1 ＋ 1
    .如果真 (zise_局部变量_1 ＞ 32767)
        跳出循环 ()
    .如果真结束
    zise_局部变量_2 ＝ axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 3 ＋ 10]
    .如果 (位与 (zise_局部变量_2, -2147483648) ＝ -2147483648)
        .如果真 (axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 1 ＋ 10] ＝ 子文件信息.a1 且 axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 2 ＋ 10] ＝ 子文件信息.a2)
            子文件信息.列表编号 ＝ 位与 (axp文件头.头部数据 [子文件信息.头部编号 × 3 ＋ 3 ＋ 10], 1073741823)  ' 
            子文件信息.数据地址 ＝ axp文件头.列表数据 [子文件信息.列表编号 × 3 ＋ 1]
            子文件信息.数据大小 ＝ axp文件头.列表数据 [子文件信息.列表编号 × 3 ＋ 2]
            子文件信息.数据类型 ＝ axp文件头.列表数据 [子文件信息.列表编号 × 3 ＋ 3]
            子文件信息.是否有效 ＝ 真
            返回 ()
        .如果真结束

    .否则

    .如果结束
    子文件信息.头部编号 ＝ 位与 (子文件信息.头部编号 ＋ 1, 32767)
.判断循环尾 ()
' 信息框 (“axp子文件信息: ” ＋ 子文件名, 0, )
子文件信息.是否有效 ＝ 假


.子程序 axp取子文件目录文本, 文本型
.参数 文件号, 整数型
.参数 axp文件头, axp文件头
.局部变量 zise_局部变量_1, axp子文件信息
.局部变量 zise_局部变量_2, 字节集

axp取子文件信息 (“(list)”, axp文件头, zise_局部变量_1)
移动读写位置 (文件号, #文件首, zise_局部变量_1.数据地址)
zise_局部变量_2 ＝ 读入字节集 (文件号, zise_局部变量_1.数据大小)
返回 (到文本 (zise_局部变量_2))

.子程序 GetDisp, 整数型
.参数 参数_文本, 文本型
.参数 v, 整数型
.局部变量 zise_局部变量_1, 整数型
.局部变量 zise_局部变量_2, 整数型
.局部变量 zise_局部变量_3, 整数型
.局部变量 zise_局部变量_4, 整数型
.局部变量 zise_局部变量_5, 整数型
.局部变量 zise_局部变量_6, 整数型
.局部变量 zise_局部变量_7, 字节集
.局部变量 zise_局部变量_8, 整数型


zise_局部变量_7 ＝ 到字节集 (到小写 (参数_文本))
zise_局部变量_2 ＝ 2146271213  ' 
zise_局部变量_3 ＝ -286331154  ' 
zise_局部变量_4 ＝ v × 256
zise_局部变量_6 ＝ 1
.如果真 (取字节集长度 (zise_局部变量_7) ＝ 0)
    返回 (zise_局部变量_2)
.如果真结束

.计次循环首 (取字节集长度 (zise_局部变量_7), zise_局部变量_6)
    zise_局部变量_2 ＝ zise_局部变量_2 ＋ zise_局部变量_3
    zise_局部变量_3 ＝ zise_局部变量_3 × 33
    zise_局部变量_8 ＝ zise_局部变量_7 [zise_局部变量_6]
    .如果真 (zise_局部变量_8 ＞ 127)
        zise_局部变量_8 ＝ zise_局部变量_8 － 256
    .如果真结束

    zise_局部变量_5 ＝ zise_局部变量_4 ＋ zise_局部变量_8 ＋ 1
    zise_局部变量_2 ＝ 位异或 (zise_局部变量_2, zise_程序集变量_1 [zise_局部变量_5])
    zise_局部变量_3 ＝ zise_局部变量_3 ＋ zise_局部变量_8
    zise_局部变量_6 ＝ zise_局部变量_6 ＋ 1
    zise_局部变量_3 ＝ zise_局部变量_2 ＋ zise_局部变量_3 ＋ 3

.计次循环尾 ()
返回 (zise_局部变量_2)


.子程序 axp读入文件头, , , 把文件的头部0x160028字节读入到文件头部中
.参数 文件号, 整数型
.参数 axp文件头, axp文件头, 参考

移动读写位置 (文件号, #文件首, 0)
读入数据 (文件号, axp文件头.头部数据)
移动读写位置 (文件号, #文件首, axp文件头.头部数据 [5])
读入数据 (文件号, axp文件头.列表数据)


.子程序 文本字符替换, 文本型
.参数 原文本, 文本型
.参数 待替换字符, 文本型
.参数 替换字符, 文本型
.局部变量 zise_局部变量_1, 整数型
.局部变量 zise_局部变量_2, 文本型

zise_局部变量_2 ＝ “”
zise_局部变量_1 ＝ 寻找文本 (原文本, 待替换字符, , 假)
.判断循环首 (zise_局部变量_1 ＞ 0)
    zise_局部变量_2 ＝ zise_局部变量_2 ＋ 取文本左边 (原文本, zise_局部变量_1 － 1) ＋ 替换字符
    原文本 ＝ 取文本右边 (原文本, 取文本长度 (原文本) － zise_局部变量_1 － 取文本长度 (待替换字符) ＋ 1)
    zise_局部变量_1 ＝ 寻找文本 (原文本, 待替换字符, , 假)
.判断循环尾 ()
zise_局部变量_2 ＝ zise_局部变量_2 ＋ 原文本
返回 (zise_局部变量_2)

.子程序 函数_获取AXP文件名, 文本型
.参数 文件名, 文本型
.局部变量 临时数组, 文本型, , "0"
.局部变量 局_文件名, 文本型

局_文件名 ＝ 文件名
临时数组 ＝ 分割文本 (文件名, “\”, )
.如果真 (取数组成员数 (临时数组) ＞ 1)
    局_文件名 ＝ 临时数组 [取数组成员数 (临时数组)]
    局_文件名 ＝ 取文本左边 (局_文件名, 取文本长度 (局_文件名) － 4)
.如果真结束


返回 (局_文件名)

.子程序 AXP解包, , 公开
.参数 axp文件名, 文本型
.参数 解包路径, 文本型
.参数 标签, 透明标签
.参数 进度条, 进度条
.局部变量 文件名集, 文本型, , "0"
.局部变量 临时文件名, 文本型
.局部变量 临时长度, 整数型
.局部变量 临时文件目录, 文本型

createsucks ()
文件名集 ＝ 分割文本 (axp文件名, “\”, )
临时文件名 ＝ 文件名集 [取数组成员数 (文件名集)]

.如果 (文件是否存在 (axp文件名))
    临时长度 ＝ 取文本长度 (临时文件名)
    临时文件目录 ＝ 取文本左边 (临时文件名, 临时长度 － 4)
    解包路径 ＝ 解包路径 ＋ “\” ＋ 临时文件目录
    .如果真 (写到文件 (解包路径 ＋ “\nu.txt”, 到字节集 (“”)) ＝ 假)
        创建目录 (解包路径)
    .如果真结束
    删除文件 (解包路径 ＋ “\nu.txt”)
.否则
    返回 ()
.如果结束

axp文件解包开始 (axp文件名, 解包路径, 标签, 进度条)


.子程序 读取AxpHashTable
.参数 参数_文件号, 整数型
.局部变量 局_HashTable开始位置, 整数型

局_HashTable开始位置 ＝ ASM_十六到十 (“28”)
初始化AxpHashTable ()
移动读写位置 (参数_文件号, #文件首, 局_HashTable开始位置)
读入数据 (参数_文件号, 集_m_lpAxpHashTable)

.子程序 读取AXPHeader
.参数 参数_文件号, 整数型

初始化AXPHeader ()
移到文件首 (参数_文件号)
读入数据 (参数_文件号, 集_AXPHeader)

.子程序 读取AXPFileInfo
.参数 参数_文件号, 整数型
.局部变量 局_AXPFileInfo开始位置, 整数型

初始化AXPFileInfo (集_AXPHeader [7] ÷ 4)
局_AXPFileInfo开始位置 ＝ 集_AXPHeader [5]
移动读写位置 (参数_文件号, #文件首, 局_AXPFileInfo开始位置)
读入数据 (参数_文件号, 集_AXPFileInfo)

.子程序 读取文件资源清单
.参数 参_文件号, 整数型
.参数 参_资源文件文件索引, 整数型
.局部变量 局_移动位置, 整数型
.局部变量 局_资源文件内容, 字节集

局_移动位置 ＝ 集_AXPFileInfo [参_资源文件文件索引 × 3 ＋ 1]
移动读写位置 (参_文件号, #文件首, 局_移动位置)
局_资源文件内容 ＝ 读入字节集 (参_文件号, 集_AXPFileInfo [参_资源文件文件索引 × 3 ＋ 2])
集_资源文件清单 ＝ 到文本 (局_资源文件内容)

.子程序 写入文件资源清单
.参数 参_资源文件文件索引, 整数型
.参数 参_文件号, 整数型

集_AXPFileInfo [参_资源文件文件索引 × 3 ＋ 1] ＝ 取文件长度 (参_文件号)
集_AXPFileInfo [参_资源文件文件索引 × 3 ＋ 2] ＝ ASM_取字节集长度 (到字节集 (集_资源文件清单))
移到文件尾 (参_文件号)
写出字节集 (参_文件号, 到字节集 (集_资源文件清单))

.子程序 获取文件位置GetHashTablePos, 整数型
.参数 参_文件名, 文本型
.局部变量 局_nHashPos, 整数型
.局部变量 局_nHashStart, 整数型
.局部变量 局_nHash, 整数型
.局部变量 局_nHashB, 整数型
.局部变量 局_nHashA, 整数型
.局部变量 局_HASH_OFFSET, 整数型
.局部变量 局_HASH_B, 整数型
.局部变量 局_HASH_A, 整数型
.局部变量 i, 整数型

局_HASH_A ＝ 1
局_HASH_B ＝ 2
局_HASH_OFFSET ＝ 3
局_nHashA ＝ 计算HashString值 (到小写 (参_文件名), 局_HASH_A)
局_nHashB ＝ 计算HashString值 (到小写 (参_文件名), 局_HASH_B)
局_nHash ＝ 计算HashString值 (到小写 (参_文件名), 局_HASH_OFFSET)
局_nHash ＝ 位与 (局_nHash, ASM_十六到十 (“7FFF”))
局_nHashStart ＝ 局_nHash
局_nHashPos ＝ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 3]

i ＝ 0
.判断循环首 (位与 (局_nHashPos, 到长整数 (十六进制到十进制 (“80000000”))) ＝ 0 或 局_nHashA ≠ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 1] 或 局_nHashB ≠ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 2])
    i ＝ i ＋ 1
    局_nHashStart ＝ 局_nHashStart ＋ 1
    局_nHashStart ＝ 位与 (局_nHashStart, ASM_十六到十 (“7FFF”))
    局_nHashPos ＝ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 3]
    ' 如果真 (局_nHashStart ＝ 局_nHash 或 i ＞ 1024)
    .如果真 (局_nHashStart ＝ 局_nHash)
        BlackListLog (“FileName:” ＋ 参_文件名 ＋ “ Hash:” ＋ 到文本 (局_nHash) ＋ “ Sign:” ＋ 到文本 (i))
        返回 (-1)
    .如果真结束

.判断循环尾 ()
局_nHashPos ＝ 位与 (局_nHashPos, ASM_十六到十 (“3FFFFFFF”))
返回 (局_nHashPos)

.子程序 计算新的HashTablePost, 逻辑型
.参数 参_文件位置, 整数型
.参数 参_文件名, 文本型
.局部变量 局_nHashPos, 整数型
.局部变量 局_nHashStart, 整数型
.局部变量 局_nHash, 整数型
.局部变量 局_nHashB, 整数型
.局部变量 局_nHashA, 整数型
.局部变量 局_HASH_OFFSET, 整数型
.局部变量 局_HASH_B, 整数型
.局部变量 局_HASH_A, 整数型

局_HASH_A ＝ 1
局_HASH_B ＝ 2
局_HASH_OFFSET ＝ 3
局_nHashA ＝ 计算HashString值 (到小写 (参_文件名), 局_HASH_A)
局_nHashB ＝ 计算HashString值 (到小写 (参_文件名), 局_HASH_B)
局_nHash ＝ 计算HashString值 (到小写 (参_文件名), 局_HASH_OFFSET)
局_nHash ＝ 位与 (局_nHash, ASM_十六到十 (“7FFF”))
局_nHashStart ＝ 局_nHash
局_nHashPos ＝ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 3]
.判断循环首 (局_nHashPos ≠ 0 或 0 ≠ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 1] 或 0 ≠ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 2])
    局_nHashStart ＝ 局_nHashStart ＋ 1
    局_nHashStart ＝ 位与 (局_nHashStart, ASM_十六到十 (“7FFF”))
    局_nHashPos ＝ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 3]
    .如果真 (局_nHashStart ＝ 局_nHash)
        返回 (假)
    .如果真结束

.判断循环尾 ()
集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 1] ＝ 局_nHashA
集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 2] ＝ 局_nHashB
集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 3] ＝ 参_文件位置 ＋ 到长整数 (十六进制到十进制 (“80000000”))
返回 (真)

.子程序 PrepareCryptTable
.局部变量 局_计数, 整数型
.局部变量 局_temp2, 长整数型
.局部变量 局_temp1, 长整数型
.局部变量 局_seed, 长整数型

局_seed ＝ ASM_十六到十 (“00100001”)
初始化PrepareCryptTable ()
.计次循环首 (ASM_十六到十 (“100”), 局_计数)
    局_seed ＝ (125 × 局_seed ＋ 3) ％ ASM_十六到十 (“2AAAAB”)
    局_temp1 ＝ 左移 (局_seed, ASM_十六到十 (“10”))
    局_seed ＝ (125 × 局_seed ＋ 3) ％ ASM_十六到十 (“2AAAAB”)
    局_temp2 ＝ 位与 (ASM_十六到十 (“FFFF”), 局_seed)
    集_m_CryptTable [局_计数] ＝ 位或 (局_temp1, 局_temp2)
    局_seed ＝ (125 × 局_seed ＋ 3) ％ ASM_十六到十 (“2AAAAB”)
    局_temp1 ＝ 左移 (局_seed, ASM_十六到十 (“10”))
    局_seed ＝ (125 × 局_seed ＋ 3) ％ ASM_十六到十 (“2AAAAB”)
    局_temp2 ＝ 位与 (ASM_十六到十 (“FFFF”), 局_seed)
    集_m_CryptTable [局_计数 ＋ ASM_十六到十 (“100”)] ＝ 位或 (局_temp1, 局_temp2)
    局_seed ＝ (125 × 局_seed ＋ 3) ％ ASM_十六到十 (“2AAAAB”)
    局_temp1 ＝ 左移 (局_seed, ASM_十六到十 (“10”))
    局_seed ＝ (125 × 局_seed ＋ 3) ％ ASM_十六到十 (“2AAAAB”)
    局_temp2 ＝ 位与 (ASM_十六到十 (“FFFF”), 局_seed)
    集_m_CryptTable [局_计数 ＋ ASM_十六到十 (“200”)] ＝ 位或 (局_temp1, 局_temp2)
    局_seed ＝ (125 × 局_seed ＋ 3) ％ ASM_十六到十 (“2AAAAB”)
    局_temp1 ＝ 左移 (局_seed, ASM_十六到十 (“10”))
    局_seed ＝ (125 × 局_seed ＋ 3) ％ ASM_十六到十 (“2AAAAB”)
    局_temp2 ＝ 位与 (ASM_十六到十 (“FFFF”), 局_seed)
    集_m_CryptTable [局_计数 ＋ ASM_十六到十 (“300”)] ＝ 位或 (局_temp1, 局_temp2)
.计次循环尾 ()

.子程序 初始化PrepareCryptTable
.局部变量 局_计数, 整数型

.计次循环首 (ASM_十六到十 (“500”), 局_计数)
    加入成员 (集_m_CryptTable, 0)
.计次循环尾 ()

.子程序 计算HashString值, 整数型
.参数 参_文件名, 文本型
.参数 参_dwCryptIndex, 整数型
.局部变量 局_变量目标, 逻辑型
.局部变量 局_临时值, 长整数型
.局部变量 局_计数, 整数型
.局部变量 局_字符, 整数型
.局部变量 局_seed2, 长整数型
.局部变量 局_seed1, 长整数型

局_seed1 ＝ ASM_十六到十 (“7FED7FED”)
局_seed2 ＝ 到长整数 (十六进制到十进制 (“EEEEEEEE”))
局_变量目标 ＝ 假
.计次循环首 (ASM_取文本长度_EX (参_文件名), 局_计数)
    .如果真 (局_变量目标)
        局_变量目标 ＝ 假
        到循环尾 ()
    .如果真结束
    局_字符 ＝ 取代码 (到半角 (取文本中间 (参_文件名, 局_计数, 2)), 1)
    .如果 (局_字符 ＜ 0)
        局_变量目标 ＝ 真
        局_临时值 ＝ 局_seed1 ＋ 局_seed2
        局_seed1 ＝ XOR长整数型 (集_m_CryptTable [左移 (参_dwCryptIndex, 8) ＋ 局_字符 ＋ 1], 局_临时值)
        局_seed2 ＝ 局_字符 ＋ 局_seed1 ＋ 局_seed2 ＋ 左移 (局_seed2, 5) ＋ 3
        局_字符 ＝ 取代码 (到半角 (取文本中间 (参_文件名, 局_计数, 2)), 2)
        局_临时值 ＝ 局_seed1 ＋ 局_seed2
        局_seed1 ＝ XOR长整数型 (集_m_CryptTable [左移 (参_dwCryptIndex, 8) ＋ 局_字符 ＋ 1], 局_临时值)
        局_seed2 ＝ 局_字符 ＋ 局_seed1 ＋ 局_seed2 ＋ 左移 (局_seed2, 5) ＋ 3
    .否则
        局_临时值 ＝ 局_seed1 ＋ 局_seed2
        局_seed1 ＝ XOR长整数型 (集_m_CryptTable [左移 (参_dwCryptIndex, 8) ＋ 局_字符 ＋ 1], 局_临时值)
        局_seed2 ＝ 局_字符 ＋ 局_seed1 ＋ 局_seed2 ＋ 左移 (局_seed2, 5) ＋ 3
        局_变量目标 ＝ 假
    .如果结束

.计次循环尾 ()
返回 (局_seed1)

.子程序 初始化AxpHashTable
.局部变量 局_计数, 整数型

.计次循环首 (ASM_取数组成员数 (集_m_lpAxpHashTable), 局_计数)
    集_m_lpAxpHashTable [局_计数] ＝ 0
.计次循环尾 ()

.子程序 初始化AXPHeader
.局部变量 局_计数, 整数型

.计次循环首 (ASM_取数组成员数 (集_AXPHeader), 局_计数)
    集_AXPHeader [局_计数] ＝ 0
.计次循环尾 ()

.子程序 初始化AXPFileInfo
.参数 参_AXPFileInfo大小, 整数型
.局部变量 局_计数, 整数型

清除数组 (集_AXPFileInfo复制)
清除数组 (集_AXPFileInfo)
.计次循环首 (参_AXPFileInfo大小, 局_计数)
    加入成员 (集_AXPFileInfo, 0)
    加入成员 (集_AXPFileInfo复制, 0)
.计次循环尾 ()

.子程序 更新文件原来数据
.参数 参_文件号, 整数型
.局部变量 局_临时变量, 整数型
.局部变量 局_计数, 整数型

移到文件首 (参_文件号)
写出数据 (参_文件号, 集_AXPHeader)
写出数据 (参_文件号, 集_m_lpAxpHashTable)
写出数据 (参_文件号, 集_AXPFileInfo)

.子程序 合并字节集, 文本型
.参数 参_字节集, 字节集, 数组
.局部变量 局_文本, 文本型
.局部变量 局_计数, 整数型

局_文本 ＝ “”
.计次循环首 (ASM_取数组成员数 (参_字节集), 局_计数)
    局_文本 ＝ 局_文本 ＋ 到文本 (参_字节集 [局_计数]) ＋ 到文本 (到字节集 (到字节 (ASM_十六到十 (“0A”))))
.计次循环尾 ()
返回 (局_文本)

.子程序 重置文件索引
.参数 参_文件序号, 整数型
.参数 参_文件名, 文本型
.局部变量 局_nHashPos, 整数型
.局部变量 局_nHashStart, 整数型
.局部变量 局_nHash, 整数型
.局部变量 局_nHashB, 整数型
.局部变量 局_nHashA, 整数型
.局部变量 局_HASH_OFFSET, 整数型
.局部变量 局_HASH_B, 整数型
.局部变量 局_HASH_A, 整数型

局_HASH_A ＝ 1
局_HASH_B ＝ 2
局_HASH_OFFSET ＝ 3
局_nHashA ＝ 计算HashString值 (到小写 (参_文件名), 局_HASH_A)
局_nHashB ＝ 计算HashString值 (到小写 (参_文件名), 局_HASH_B)
局_nHash ＝ 计算HashString值 (到小写 (参_文件名), 局_HASH_OFFSET)
局_nHash ＝ 位与 (局_nHash, ASM_十六到十 (“7FFF”))
局_nHashStart ＝ 局_nHash
局_nHashPos ＝ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 3]
.判断循环首 (位与 (局_nHashPos, ASM_十六到十 (“80000000”)) ＝ 0 或 局_nHashA ≠ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 1] 或 局_nHashB ≠ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 2])
    局_nHashStart ＝ 局_nHashStart ＋ 1
    局_nHashStart ＝ 位与 (局_nHashStart, ASM_十六到十 (“7FFF”))
    局_nHashPos ＝ 集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 3]
    .如果真 (局_nHashStart ＝ 局_nHash)
        返回 ()
    .如果真结束

.判断循环尾 ()
局_nHashPos ＝ 位与 (局_nHashPos, 到长整数 (十六进制到十进制 (“3FFFFFFF”)))
集_m_lpAxpHashTable [局_nHashStart × 3 ＋ 3] ＝ 参_文件序号 ＋ 到长整数 (十六进制到十进制 (“80000000”))
集_AXPFileInfo复制 [参_文件序号 × 3 ＋ 1] ＝ 集_AXPFileInfo [局_nHashPos × 3 ＋ 1]
集_AXPFileInfo复制 [参_文件序号 × 3 ＋ 2] ＝ 集_AXPFileInfo [局_nHashPos × 3 ＋ 2]
集_AXPFileInfo复制 [参_文件序号 × 3 ＋ 3] ＝ 集_AXPFileInfo [局_nHashPos × 3 ＋ 3]

.子程序 更新文件索引
.局部变量 局_累计, 整数型
.局部变量 局_计数, 整数型
.局部变量 局_文本集, 文本型, , "0"
.局部变量 局_文件名信息, 文本型
.局部变量 局_资源文件名字节集, 字节集, , "0"

局_资源文件名字节集 ＝ 分割字节集 (到字节集 (集_资源文件清单), 到字节集 (到字节 (ASM_十六到十 (“A”))), )
局_累计 ＝ 0
.计次循环首 (ASM_取数组成员数 (局_资源文件名字节集), 局_计数)
    局_文件名信息 ＝ 到文本 (局_资源文件名字节集 [局_计数])
    .如果真 (ASM_寻找文本_EX (局_文件名信息, “|”, ) ≠ -1)
        局_文本集 ＝ 分割文本 (局_文件名信息, “|”, )
        重置文件索引 (局_累计, 到小写 (局_文本集 [1]))
        局_累计 ＝ 局_累计 ＋ 1
    .如果真结束

.计次循环尾 ()
重置文件索引 (局_累计, 到小写 (“(list)”))

.子程序 更新文件
.参数 参_文件号, 整数型
.参数 参_文件数据集, 字节集
.参数 参_文件名, 文本型
.局部变量 局_新文件总数, 整数型
.局部变量 局_资源文件文本集, 字节集, , "0"
.局部变量 局_文件文件索引, 整数型

.如果 (判断是否是新文件 (参_文件名))
    .如果真 (取反 (计算新的HashTablePost (集_AXPHeader [6], 参_文件名)))
        返回 ()
    .如果真结束
    集_AXPFileInfo [集_AXPHeader [6] × 3 ＋ 1] ＝ 取文件长度 (参_文件号)
    集_AXPFileInfo [集_AXPHeader [6] × 3 ＋ 2] ＝ ASM_取字节集长度 (参_文件数据集)
    集_AXPFileInfo [集_AXPHeader [6] × 3 ＋ 3] ＝ 到整数 (到长整数 (十六进制到十进制 (“80000000”)))
    移到文件尾 (参_文件号)
    写出字节集 (参_文件号, 参_文件数据集)
    写出字节集 (参_文件号, 到字节集 (0))
    写出字节集 (参_文件号, 到字节集 (0))
    写出字节集 (参_文件号, 到字节集 (0))
    写出字节集 (参_文件号, 到字节集 (0))
    集_资源文件清单 ＝ 集_资源文件清单 ＋ 参_文件名 ＋ “|” ＋ ASM_十到十六 (ASM_取字节集长度 (参_文件数据集)) ＋ “|” ＋ “FFFFFFFF” ＋ 到文本 (到字节集 (到字节 (ASM_十六到十 (“0A”))))
    集_AXPHeader [6] ＝ 集_AXPHeader [6] ＋ 1
.否则
    局_文件文件索引 ＝ 获取文件位置GetHashTablePos (参_文件名)
    .如果真 (局_文件文件索引 ＝ -1)
        返回 ()
    .如果真结束
    .如果 (ASM_取字节集长度 (参_文件数据集) ＞ 集_AXPFileInfo [局_文件文件索引 × 3 ＋ 2])
        集_AXPFileInfo [局_文件文件索引 × 3 ＋ 1] ＝ 取文件长度 (参_文件号)
        集_AXPFileInfo [局_文件文件索引 × 3 ＋ 2] ＝ ASM_取字节集长度 (参_文件数据集)
        移到文件尾 (参_文件号)
        写出字节集 (参_文件号, 参_文件数据集)
        写出字节集 (参_文件号, 到字节集 (0))
        写出字节集 (参_文件号, 到字节集 (0))
        写出字节集 (参_文件号, 到字节集 (0))
        写出字节集 (参_文件号, 到字节集 (0))
    .否则
        集_AXPFileInfo [局_文件文件索引 × 3 ＋ 2] ＝ ASM_取字节集长度 (参_文件数据集)
        移动读写位置 (参_文件号, #文件首, 集_AXPFileInfo [局_文件文件索引 × 3 ＋ 1])
        写出字节集 (参_文件号, 参_文件数据集)
    .如果结束

.如果结束


.子程序 判断是否是新文件, 逻辑型
.参数 参_文件名, 文本型
.局部变量 局_文件名, 文本型

局_文件名 ＝ 到文本 (到字节集 (到字节 (ASM_十六到十 (“0A”)))) ＋ 参_文件名 ＋ “|”
.如果 (ASM_寻找文本_EX (到小写 (集_资源文件清单), 到小写 (局_文件名), ) ＝ -1)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 BlackListLog
.参数 Log, 文本型
.局部变量 文件号, 整数型

文件号 ＝ 打开文件 (取运行目录 () ＋ “\Bin\UpdataErro.log”, 5, 1)
移到文件尾 (文件号)
写出文本 (文件号, Log ＋ #换行符)
关闭文件 (文件号)

.子程序 Xzip目录名称, 文本型
.参数 全称, 文本型
.局部变量 局部, 文本型, , "0"

局部 ＝ 分割文本 (全称, “\”, )
.如果 (ASM_取数组成员数 (局部) ＞ 1)
    返回 (局部 [1])
.否则
    返回 (“”)
.如果结束


.子程序 Xzip文件名称, 文本型
.参数 全称, 文本型
.局部变量 局部, 文本型, , "0"
.局部变量 Q, 整数型
.局部变量 k, 整数型
.局部变量 局_返回, 文本型

局部 ＝ 分割文本 (全称, “\”, )
Q ＝ ASM_取数组成员数 (局部)
局_返回 ＝ “”
.如果真 (Q ＞ 1)
    .变量循环首 (2, Q, 1, k)
        局_返回 ＝ 局_返回 ＋ 局部 [k] ＋ “/”
    .变量循环尾 ()
    局_返回 ＝ 取文本左边 (局_返回, 取文本长度 (局_返回) － 1)
.如果真结束
返回 (局_返回)


.子程序 文件数量计算
.参数 文件名, 文本型

.如果真 (Xzip目录名称 (文件名) ＝ “Brushes”)
    AxpBrushes ＝ AxpBrushes ＋ 1
.如果真结束
.如果真 (Xzip目录名称 (文件名) ＝ “Config”)
    AxpConfig ＝ AxpConfig ＋ 1
.如果真结束
.如果真 (Xzip目录名称 (文件名) ＝ “Effect”)
    AxpEffect ＝ AxpEffect ＋ 1
.如果真结束
.如果真 (Xzip目录名称 (文件名) ＝ “Interface”)
    AxpInterface ＝ AxpInterface ＋ 1
.如果真结束
.如果真 (Xzip目录名称 (文件名) ＝ “Material”)
    AxpMaterial ＝ AxpMaterial ＋ 1
.如果真结束
.如果真 (Xzip目录名称 (文件名) ＝ “Model”)
    AxpModel ＝ AxpModel ＋ 1
.如果真结束
.如果真 (Xzip目录名称 (文件名) ＝ “Scene”)
    AxpScene ＝ AxpScene ＋ 1
.如果真结束
.如果真 (Xzip目录名称 (文件名) ＝ “Sound”)
    AxpSound ＝ AxpSound ＋ 1
.如果真结束


.子程序 打开axp文件
.参数 AxpPatch, 文本型

PrepareCryptTable ()
Axp文件ID ＝ 打开文件 (AxpPatch, #读写, )
读取AxpHashTable (Axp文件ID)
读取AXPHeader (Axp文件ID)
读取AXPFileInfo (Axp文件ID)
资源文件文件索引 ＝ 获取文件位置GetHashTablePos (“(list)”)
读取文件资源清单 (Axp文件ID, 资源文件文件索引)

.子程序 关闭axp文件

写入文件资源清单 (资源文件文件索引, Axp文件ID)
更新文件原来数据 (Axp文件ID)
关闭文件 (Axp文件ID)

.子程序 XOR长整数型, 长整数型
.参数 eax, 整数型
.参数 ecx, 整数型
.局部变量 变量_1, 长整数型
.局部变量 变量_2, 整数型

变量_2 ＝ 子程序 (eax, ecx)
RtlMoveMemory_AXP (变量_1, 变量_2, 4)
返回 (变量_1)

.子程序 到十六进制文本, 文本型
.参数 数值, 整数型

返回 (多项选择 (右移 (数值, 4) ＋ 1, “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F”) ＋ 多项选择 (位与 (数值, 15) ＋ 1, “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F”))

.子程序 十六进制到十进制, 文本型
.参数 十六进制文本, 文本型
.局部变量 循环次数, 整数型
.局部变量 代码, 整数型
.局部变量 临时1, 大数
.局部变量 临时2, 大数
.局部变量 结果, 大数
.局部变量 乘方, 大数
.局部变量 进制, 大数
.局部变量 文本, 文本型

进制.导入数字 (16)
文本 ＝ 到小写 (到半角 (十六进制文本))
.计次循环首 (ASM_取文本长度_EX (文本), 循环次数)
    代码 ＝ 取代码 (取文本中间 (到大写 (文本), ASM_取文本长度_EX (文本) － 循环次数 ＋ 1, 1), )
    临时1.导入数字 (代码 － 55)
    临时2.导入数字 (代码 － 48)
    乘方.导入数字 (1)
    .计次循环首 (循环次数 － 1, )
        乘方 ＝ 乘方.乘 (进制)
    .计次循环尾 ()
    结果 ＝ 选择 (代码 ≥ 65 且 代码 ≤ 70, 结果.加 (临时1.乘 (乘方)), 结果.加 (临时2.乘 (乘方)))
.计次循环尾 ()
返回 (结果.导出文本 ())




.子程序 子程序, 整数型
.参数 参数_1, 整数型
.参数 参数_2, 整数型

置入代码 ({ 139, 69, 8, 139, 77, 12, 51, 193, 201, 194, 4, 0 })
返回 (0)

.子程序 子程序_2, 文本型
.参数 参数, 文本型
.局部变量 变量, 整数型

.计次循环首 (ASM_取文本长度_EX (参数), 变量)
    .如果真 (取文本中间 (参数, 变量, 1) ≠ “0”)
        跳出循环 ()
    .如果真结束

.计次循环尾 ()
返回 (ASM_取文本右边 (参数, ASM_取文本长度_EX (参数) － 变量 ＋ 1, ))
' 替换说明:
' 取文本右边=ASM_取文本右边(, , )



.子程序 zise_子程序_76, 逻辑型, , _-@S<addaxpFilefile>
.参数 zise_参数_1, 文本型
.参数 zise_参数_2, 文本型, 数组
.参数 zise_参数_3, 逻辑型
.局部变量 zise_局部变量_1, 整数型
.局部变量 zise_局部变量_2, 文本型
.局部变量 zise_局部变量_3, 文本型, , "0"
.局部变量 zise_局部变量_4, axp子文件信息
.局部变量 zise_局部变量_5, axp子文件信息
.局部变量 zise_局部变量_6, 整数型
.局部变量 zise_局部变量_7, 整数型
.局部变量 zise_局部变量_8, 逻辑型
.局部变量 zise_局部变量_9, 文本型, , "0"
.局部变量 zise_局部变量_10, 文本型
.局部变量 zise_局部变量_11, 字节集
.局部变量 zise_局部变量_12, 文本型, , "0"
.局部变量 zise_局部变量_13, 逻辑型

zise_局部变量_13 ＝ 真
createsucks ()  ' 
.如果真 (zise_参数_3)
    zise_程序集变量_9.最小位置 ＝ 1
    zise_程序集变量_9.位置 ＝ 1
    zise_程序集变量_9.最大位置 ＝ 取数组成员数 (zise_参数_2)  ' 


.如果真结束
' 
.如果真 (文件是否存在 (zise_参数_1) ＝ 假)
    写到文件 (zise_参数_1, 解压数据 (#AXP_空))
    延时 (200)
.如果真结束
zise_局部变量_1 ＝ 打开文件 (zise_参数_1, #读写, )
.如果真 (zise_局部变量_1 ＝ 0)
    返回 (假)
.如果真结束

.如果 (取文件长度 (zise_局部变量_1) ＜ 1441832)  ' 
    axp初始化文件头 (zise_程序集变量_3)  ' 
    axp取子文件信息 (“(list)”, zise_程序集变量_3, zise_局部变量_4)  ' 
    zise_局部变量_2 ＝ axp取子文件目录文本 (zise_局部变量_1, zise_程序集变量_3)
    zise_局部变量_3 ＝ 分割文本 (zise_局部变量_2, 字符 (10), )

.否则
    axp读入文件头 (zise_局部变量_1, zise_程序集变量_3)  ' 
    axp取子文件信息 (“(list)”, zise_程序集变量_3, zise_局部变量_4)  ' 
    zise_局部变量_2 ＝ axp取子文件目录文本 (zise_局部变量_1, zise_程序集变量_3)
    zise_局部变量_3 ＝ 分割文本 (zise_局部变量_2, 字符 (10), )
.如果结束
.计次循环首 (取数组成员数 (zise_参数_2), zise_局部变量_6)
    .如果真 (zise_参数_3)
        zise_程序集变量_9.位置 ＝ zise_局部变量_6
        .如果真 (zise_程序集变量_7 ＝ 假)
            zise_局部变量_13 ＝ 假
            跳出循环 ()
        .如果真结束

    .如果真结束
    zise_局部变量_12 ＝ 分割文本 (zise_参数_2 [zise_局部变量_6], “|”, )
    .如果真 (取数组成员数 (zise_局部变量_12) ≠ 2)
        到循环尾 ()
    .如果真结束
    zise_局部变量_8 ＝ 真
    zise_局部变量_10 ＝ zise_局部变量_12 [2]
    zise_局部变量_10 ＝ 文本字符替换 (zise_局部变量_10, “\”, “/”)
    ' 
    .如果真 (文件是否存在 (zise_局部变量_12 [1]) ＝ 假)
        到循环尾 ()
    .如果真结束
    zise_局部变量_11 ＝ 读入文件 (zise_局部变量_12 [1])
    .计次循环首 (取数组成员数 (zise_局部变量_3), zise_局部变量_7)  ' 
        zise_局部变量_9 ＝ 分割文本 (zise_局部变量_3 [zise_局部变量_7], “|”, )
        .如果真 (取数组成员数 (zise_局部变量_9) ≠ 3)
            到循环尾 ()
        .如果真结束
        .如果真 (zise_局部变量_10 ＝ zise_局部变量_9 [1])
            zise_局部变量_9 [2] ＝ zise_子程序_73 (取字节集长度 (zise_局部变量_11))
            zise_局部变量_9 [3] ＝ “0”
            zise_局部变量_3 [zise_局部变量_7] ＝ zise_局部变量_9 [1] ＋ “|” ＋ zise_局部变量_9 [2] ＋ “|” ＋ zise_局部变量_9 [3]
            axp取子文件信息 (zise_局部变量_9 [1], zise_程序集变量_3, zise_局部变量_5)  ' 
            zise_局部变量_8 ＝ 假
            跳出循环 ()
        .如果真结束

    .计次循环尾 ()
    .如果 (zise_局部变量_8)
        重定义数组 (zise_局部变量_9, 假, 3)
        zise_局部变量_9 [1] ＝ zise_局部变量_10
        zise_局部变量_9 [2] ＝ zise_子程序_73 (取字节集长度 (zise_局部变量_11))
        zise_局部变量_9 [3] ＝ “FFFFFFFF”
        加入成员 (zise_局部变量_3, zise_局部变量_9 [1] ＋ “|” ＋ zise_局部变量_9 [2] ＋ “|” ＋ zise_局部变量_9 [3])
        axp新建子文件信息 (zise_局部变量_9 [1], zise_程序集变量_3, zise_局部变量_5, zise_局部变量_4.数据地址, 取字节集长度 (zise_局部变量_11))  ' 
    .否则

        .如果真 (取字节集长度 (zise_局部变量_11) ＞ zise_局部变量_5.数据大小)  ' 
            zise_局部变量_5.数据大小 ＝ 取字节集长度 (zise_局部变量_11)
            zise_局部变量_5.数据地址 ＝ zise_局部变量_4.数据地址
        .如果真结束

    .如果结束
    移动读写位置 (zise_局部变量_1, #文件首, zise_局部变量_5.数据地址)
    写出字节集 (zise_局部变量_1, zise_局部变量_11)
    .如果真 (zise_局部变量_4.数据地址 ＝ zise_局部变量_5.数据地址)
        zise_局部变量_4.数据地址 ＝ zise_局部变量_4.数据地址 ＋ zise_局部变量_5.数据大小 ＋ 10  ' 
    .如果真结束
    zise_程序集变量_3.列表数据 [zise_局部变量_5.列表编号 × 3 ＋ 1] ＝ zise_局部变量_5.数据地址
    zise_程序集变量_3.列表数据 [zise_局部变量_5.列表编号 × 3 ＋ 2] ＝ zise_局部变量_5.数据大小
    zise_程序集变量_3.列表数据 [zise_局部变量_5.列表编号 × 3 ＋ 3] ＝ zise_局部变量_5.数据类型

.计次循环尾 ()
zise_局部变量_2 ＝ “”
.计次循环首 (取数组成员数 (zise_局部变量_3), zise_局部变量_6)
    .如果真 (zise_局部变量_3 [zise_局部变量_6] ≠ “”)
        zise_局部变量_2 ＝ zise_局部变量_2 ＋ zise_局部变量_3 [zise_局部变量_6] ＋ 字符 (10)
    .如果真结束

.计次循环尾 ()
zise_局部变量_4.数据大小 ＝ 取文本长度 (zise_局部变量_2)
zise_局部变量_4.列表编号 ＝ zise_程序集变量_3.头部数据 [6]
zise_程序集变量_3.头部数据 [6] ＝ zise_程序集变量_3.头部数据 [6] ＋ 1
zise_程序集变量_3.头部数据 [zise_局部变量_4.头部编号 × 3 ＋ 3 ＋ 10] ＝ zise_局部变量_4.列表编号 ＋ #_0x80000000
zise_程序集变量_3.列表数据 [zise_局部变量_4.列表编号 × 3 ＋ 1] ＝ zise_局部变量_4.数据地址
zise_程序集变量_3.列表数据 [zise_局部变量_4.列表编号 × 3 ＋ 2] ＝ zise_局部变量_4.数据大小
zise_程序集变量_3.列表数据 [zise_局部变量_4.列表编号 × 3 ＋ 3] ＝ zise_局部变量_4.数据类型
移动读写位置 (zise_局部变量_1, #文件首, zise_局部变量_4.数据地址)
写出文本 (zise_局部变量_1, zise_局部变量_2)

移动读写位置 (zise_局部变量_1, #文件首, 0)
写出数据 (zise_局部变量_1, zise_程序集变量_3.头部数据, zise_程序集变量_3.列表数据)
关闭文件 (zise_局部变量_1)
返回 (zise_局部变量_13)


.子程序 zise_子程序_73, 文本型, , _-@S<整数到十六进制文本>
.参数 zise_参数_1, 整数型
.局部变量 zise_局部变量_1, 文本型
.局部变量 zise_局部变量_2, 整数型

zise_局部变量_2 ＝ zise_参数_1
.计次循环首 (8, )
    zise_局部变量_1 ＝ 取文本中间 (“0123456789ABCDEF”, 位与 (zise_局部变量_2, 15) ＋ 1, 1) ＋ zise_局部变量_1
    zise_局部变量_2 ＝ 右移 (zise_局部变量_2, 4)
.计次循环尾 ()
返回 (zise_局部变量_1)

.子程序 zise_子程序_77, 逻辑型, , _-@S<addaxpFilepath>
.局部变量 zise_局部变量_1, 文本型, , "0"
.局部变量 zise_局部变量_2, 文本型
.局部变量 zise_局部变量_3, 整数型
.局部变量 zise_局部变量_4, 文本型
.局部变量 zise_局部变量_5, 文本型

zise_局部变量_4 ＝ zise_程序集变量_16
zise_局部变量_5 ＝ zise_程序集变量_17
.如果真 (zise_局部变量_4 ＝ “”)
    返回 (假)
.如果真结束
.如果真 (取文本右边 (zise_局部变量_4, 1) ≠ “\”)
    zise_局部变量_4 ＝ zise_局部变量_4 ＋ “\”
.如果真结束
zise_程序集变量_8.标题 ＝ “真正搜集目录文件   ” ＋ zise_局部变量_4
雪宝遍历文件 (zise_局部变量_4, zise_局部变量_1)
.计次循环首 (取数组成员数 (zise_局部变量_1), zise_局部变量_3)
    zise_局部变量_1 [zise_局部变量_3] ＝ zise_局部变量_1 [zise_局部变量_3] ＋ “|” ＋ 取文本右边 (zise_局部变量_1 [zise_局部变量_3], 取文本长度 (zise_局部变量_1 [zise_局部变量_3]) － 取文本长度 (zise_局部变量_4))
    ' 
.计次循环尾 ()
zise_程序集变量_8.标题 ＝ “打包目录文件” ＋ zise_局部变量_4
.如果 (zise_子程序_76 (zise_局部变量_5, zise_局部变量_1, 真))
    zise_程序集变量_8.标题 ＝ “目录打包完成！！”
.否则
    zise_程序集变量_8.标题 ＝ “目录打包异常终止！！”
.如果结束
zise_程序集变量_7 ＝ 假
zise_程序集变量_6 ＝ 假
返回 (真)


.子程序 雪宝遍历文件, 逻辑型, 公开, 遍历目录下所有文件包括子目录
.参数 目录, 文本型
.参数 文件数组, 文本型, 参考 数组
.局部变量 zise_局部变量_1, 文本型
.局部变量 zise_局部变量_2, 文本型
.局部变量 zise_局部变量_3, 文本型, , "0"
.局部变量 zise_局部变量_4, 整数型

.如果真 (目录 ＝ “”)
    返回 (假)
.如果真结束
.如果真 (取文本右边 (目录, 1) ≠ “\”)
    目录 ＝ 目录 ＋ “\”

.如果真结束
zise_局部变量_1 ＝ 寻找文件 (目录 ＋ “*”, )
.判断循环首 (zise_局部变量_1 ≠ “”)  ' 
    .如果真 (zise_局部变量_1 ≠ “.” 且 zise_局部变量_1 ≠ “..”)
        加入成员 (文件数组, 目录 ＋ zise_局部变量_1)
    .如果真结束
    zise_局部变量_1 ＝ 寻找文件 (, )
.判断循环尾 ()

zise_局部变量_1 ＝ 寻找文件 (目录 ＋ “*”, 16)
.判断循环首 (zise_局部变量_1 ≠ “”)  ' 
    .如果真 (zise_局部变量_1 ≠ “.” 且 zise_局部变量_1 ≠ “..”)
        加入成员 (zise_局部变量_3, zise_局部变量_1)
    .如果真结束
    zise_局部变量_1 ＝ 寻找文件 (, 16)
.判断循环尾 ()
.计次循环首 (取数组成员数 (zise_局部变量_3), zise_局部变量_4)
    雪宝遍历文件 (目录 ＋ zise_局部变量_3 [zise_局部变量_4], 文件数组)
.计次循环尾 ()
返回 (真)


.子程序 AXP打包, 逻辑型, 公开, 开始打包一个目录 返回值说明开始打包了
.参数 打包后的文件名, 文本型, , 打包后的AXP文件名
.参数 目录, 文本型, , 待打包的目录
.参数 进度条, 进度条
.参数 标签, 透明标签

.如果真 (zise_程序集变量_6)
    返回 (假)
.如果真结束
zise_程序集变量_8 ＝ 标签
zise_程序集变量_9 ＝ 进度条
zise_程序集变量_16 ＝ 目录
zise_程序集变量_17 ＝ 打包后的文件名
zise_程序集变量_7 ＝ 真
zise_程序集变量_6 ＝ 真
zise_子程序_77 ()
返回 (真)


.版本 2
.支持库 iext
.支持库 dp1

.程序集 程序集_7z
.程序集变量 _7z进度条, 进度条
.程序集变量 _7z标签, 透明标签

.子程序 导出dll

.如果 (文件是否存在 (取运行目录 () ＋ “\7zlib.dll”) ＝ 假)
    写到文件 (取运行目录 () ＋ “\7zlib.dll”, 解压数据 (#_7zdll))
.否则
    .如果真 (取数据摘要 (读入文件 (取运行目录 () ＋ “\7zlib.dll”)) ≠ 取数据摘要 (解压数据 (#_7zdll)))
        写到文件 (取运行目录 () ＋ “\7zlib.dll”, 解压数据 (#_7zdll))
    .如果真结束

.如果结束



.子程序 雪宝7z解压文件, 整数型, 公开, 解压文件,返回 0 = 成功  1 = 错误  2 = 取消
.参数 窗口句柄, 整数型, , parent window handle
.参数 压缩包地址, 文本型, , file name
.参数 解压位置, 文本型, , 解压位置（根目录）
.参数 进度条, 进度条
.参数 标签, 透明标签
.参数 解压密码, 文本型, 可空
.局部变量 局_变量1, 文本型
.局部变量 局_变量2, 字节集
.局部变量 局_变量3, 整数型
.局部变量 局_变量4, 整数型
.局部变量 局_递归目录, 逻辑型
.局部变量 局_文件夹路径保存, 逻辑型
.局部变量 局_自带解压进度, 逻辑型

导出dll ()
局_递归目录 ＝ 真
局_文件夹路径保存 ＝ 真
局_自带解压进度 ＝ 假
_7z标签 ＝ 标签
_7z进度条 ＝ 进度条
.如果 (局_文件夹路径保存)
    局_变量1 ＝ “x”
.否则
    局_变量1 ＝ “e”
.如果结束

局_变量1 ＝ 局_变量1 ＋ “ ” ＋ #引号 ＋ 压缩包地址 ＋ #引号 ＋ “ -o” ＋ #引号 ＋ 解压位置 ＋ #引号
局_变量1 ＝ 局_变量1 ＋ “ ” ＋ #引号 ＋ “*.*” ＋ #引号

.如果真 (局_递归目录)
    局_变量1 ＝ 局_变量1 ＋ “ -r”
.如果真结束

.如果真 (局_自带解压进度 ＝ 假)
    局_变量1 ＝ 局_变量1 ＋ “ -hide”
.如果真结束

局_变量1 ＝ 局_变量1 ＋ “ -y”

.如果真 (解压密码 ≠ “”)
    局_变量1 ＝ 局_变量1 ＋ “ -p” ＋ 解压密码
.如果真结束

_7z_SevenZipSetOwnerWindowEx (窗口句柄, &ArchiverProc)
局_变量2 ＝ 取空白字节集 (32768)
_7z_SevenZip (窗口句柄, 局_变量1, 局_变量2, 32768)

_7z_SevenZipClearOwnerWindow ()

.判断开始 (寻找文本 (到小写 (到文本 (局_变量2)), “operation aborted”, , 假) ≠ -1)
    局_变量4 ＝ 2
.判断 (寻找文本 (到小写 (到文本 (局_变量2)), “error:”, , 假) ≠ -1)
    局_变量4 ＝ 1
.默认
    局_变量4 ＝ 0
.判断结束

返回 (局_变量4)

.子程序 ArchiverProc, 逻辑型
.参数 参数1, 整数型
.参数 参数2, 整数型
.参数 参数3, 整数型
.参数 参数4, 整数型
.局部变量 局_变量1, tagExtractingInfoEx
.局部变量 局_变量2, 字节集
.局部变量 局_变量3, 双精度小数型

.如果真 (参数3 ＝ 2)
    _7z进度条.位置 ＝ 100
    _7z标签.标题 ＝ “解压完成！”
    返回 (真)
.如果真结束
局_变量2 ＝ 指针到字节集 (参数4, LocalSize_tagExtractingInfoEx (局_变量1))
RtlMoveMemory_tagExtractingInfoEx (局_变量1, 局_变量2, LocalSize_tagExtractingInfoEx (局_变量1))
.判断开始 (局_变量1.exinfo.dwFileSize ＝ -1)
    局_变量3 ＝ 局_变量1.exinfo.dwWriteSize ÷ 10
.默认
    局_变量3 ＝ 局_变量1.exinfo.dwWriteSize ÷ 局_变量1.exinfo.dwFileSize × 100
.判断结束

_7z标签.标题 ＝ “正在解压：” ＋ 到文本 (到整数 (局_变量3)) ＋ “%”
_7z进度条.位置 ＝ 到整数 (局_变量3)
返回 (真)


.版本 2

.全局变量 PNG窗口类_PNG_宽, 整数型, 公开
.全局变量 PNG窗口类_PNG_高, 整数型, 公开
.全局变量 IMAGE_DOS_HEADER, IMAGE_DOS_HEADER
.全局变量 IMAGE_NT_HEADERS32, IMAGE_NT_HEADERS32
.全局变量 IMAGE_SECTION_HEADER, IMAGE_SECTION_HEADER, , "0"
.全局变量 版本_ZR, 系统版本结构, , , 4.0=nt,5.0=2000,5.1=xp,5.2=2003,6.0=vista,6.1=Win7   把补丁第1个字节设置为真实补丁序号
.全局变量 系统DLL句柄_ZR, 整数型, , "16", 1=ntdll, 2=kernel32, 3=user32, 4=gdi32, 5=ws2_32 内核模块句柄 6=ntkrnlpa.exe 7=ntdll.dll 8=win32k.sys
.全局变量 钩子DLL消息_ZR, 整数型
.全局变量 NT功能号_ZR, NT功能号, , "0"
.全局变量 主线程ID_ZR, 整数型
.全局变量 自进程ID_ZR, 整数型
.全局变量 主线句柄_ZR, 整数型
.全局变量 操作系统版本_ZR, 系统版本结构
.全局变量 自模块句柄_ZR, 整数型
.全局变量 EXE领空_ZR, 逻辑型
.全局变量 自模块名称_ZR, 文本型
.全局变量 GetProcAddress_ZR, 整数型
.全局变量 GetModuleHandleA_ZR, 整数型
.全局变量 LoadLibraryA_ZR, 整数型
.全局变量 临时目录_ZR, 文本型
.全局变量 全_文本, 文本型
.全局变量 普通填表, 普通填表, 公开
.全局变量 内存, 类_内存, 公开, , 内存操作
.全局变量 POST数据类, 类_POST数据类
.全局变量 POST数据类_字节集, 类_POST数据类_字节集
.全局变量 全_Token, 整数型
.全局变量 _WIN32_WINNT, 整数型
.全局变量 m_Build, 短整数型, , , 内部版本号
.全局变量 m_CodePage, 整数型, , , 代码页
.全局变量 m_stageSize, 整数型, , , 分段长度

.版本 2

.数据类型 MYSQL_FIELD
    .成员 name, 文本型
    .成员 org_name, 文本型
    .成员 table, 文本型
    .成员 org_table, 文本型
    .成员 db, 文本型
    .成员 catalog, 文本型
    .成员 def, 文本型
    .成员 length, 整数型
    .成员 max_length, 整数型
    .成员 name_length, 整数型
    .成员 org_name_length, 整数型
    .成员 table_length, 整数型
    .成员 org_table_length, 整数型
    .成员 db_length, 整数型
    .成员 catalog_length, 整数型
    .成员 def_length, 整数型
    .成员 flags, 整数型
    .成员 decimals, 整数型
    .成员 charset_nr, 整数型
    .成员 type, 整数型

.数据类型 MYSQL字段信息
    .成员 字段名, 文本型
    .成员 字段定义长度, 文本型
    .成员 字段实际长度, 文本型
    .成员 字段类型, 整数型, , , “mysql_”开头常量
    .成员 所在表, 文本型, , , 字段所在表名
    .成员 非空, 逻辑型
    .成员 主键, 逻辑型
    .成员 无符号, 逻辑型
    .成员 二进制, 逻辑型
    .成员 自动递增, 逻辑型
    .成员 补零, 逻辑型
    .成员 默认值, 文本型

.数据类型 MYSQL表更改信息
    .成员 字段名, 文本型, , , 当修改类型为“#修改表_修改字段”时使用本成员作为旧字段名.当为#删除字段时本成员为准备删除的字段名。
    .成员 字段信息, 文本型, , , 当修改类型为“#修改表_增加索引”时本成员作为索引使用的字段。如果需要使用多个字段可以通过“,“分割。如”fieldname1,fieldname2,fieldname3“。
    .成员 索引名, 文本型, , , 当修改类型为“#修改表_增加索引”或“#修改表_删除索引”时本成员作为索引名使用。
    .成员 主键名, 文本型, , , 当修改类型为“#修改表_增加主键”时本成员作为主键名使用。

.数据类型 Download_结构
    .成员 Download_成员4A, 子程序指针
    .成员 Download_成员4B, 子程序指针
    .成员 Download_成员4C, 子程序指针
    .成员 Download_成员4D, 子程序指针
    .成员 Download_成员4E, 子程序指针
    .成员 Download_成员4F, 子程序指针
    .成员 Download_成员50, 子程序指针
    .成员 Download_成员51, 子程序指针
    .成员 Download_成员52, 子程序指针
    .成员 Download_成员53, 子程序指针
    .成员 Download_成员54, 子程序指针

.数据类型 模块型_lua
    .成员 大小, 整数型
    .成员 mid, 整数型
    .成员 pid, 整数型
    .成员 gusage, 整数型
    .成员 pusage, 整数型
    .成员 base, 整数型
    .成员 bsize, 整数型
    .成员 模块句柄, 整数型
    .成员 模块名称, 字节型, , "256"
    .成员 模块路径, 字节型, , "256"

.数据类型 进程型_lua
    .成员 大小, 整数型, , , 1
    .成员 cntUsage, 整数型, , , 2
    .成员 进程ID, 整数型, , , 3
    .成员 th32DefaultHeapID, 整数型, , , 4
    .成员 th32ModuleID, 整数型, , , 5
    .成员 cntThreads, 整数型, , , 6
    .成员 th32ParentProcessID, 整数型, , , 7
    .成员 pcPriClassBase, 整数型, , , 8
    .成员 dwFlags, 整数型, , , 9
    .成员 进程名称, 字节型, , "260", 10

.数据类型 内存型_lua
    .成员 区域基地址, 整数型
    .成员 分配基地址, 整数型
    .成员 原始保护, 整数型
    .成员 区域大小, 整数型
    .成员 状态, 整数型
    .成员 保护, 整数型
    .成员 类型, 整数型

.数据类型 函数信息
    .成员 模块索引, 整数型
    .成员 ThunkRav, 整数型
    .成员 Thunk偏移, 整数型
    .成员 Thunk值, 整数型
    .成员 序数, 整数型
    .成员 名称, 文本型

.数据类型 IMAGE_NT_HEADERS32
    .成员 Signature, 整数型
    .成员 FileHeader, IMAGE_FILE_HEADER
    .成员 OptionalHeader, IMAGE_OPTIONAL_HEADER32

.数据类型 IMAGE_EXPORT_DIRECTORY
    .成员 Characteristics, 整数型
    .成员 TimeDateStamp, 整数型
    .成员 MajorVersion, 短整数型
    .成员 MinorVersion, 短整数型
    .成员 Name, 整数型
    .成员 Base, 整数型
    .成员 NumberOfFunctions, 整数型
    .成员 NumberOfNames, 整数型
    .成员 AddressOfFunctions, 整数型
    .成员 AddressOfNames, 整数型
    .成员 AddressOfNameOrdinals, 整数型

.数据类型 IMAGE_OPTIONAL_HEADER32
    .成员 Magic, 短整数型
    .成员 MajorLinkerVersion, 字节型
    .成员 MinorLinkerVersion, 字节型
    .成员 SizeOfCode, 整数型
    .成员 SizeOfInitializedData, 整数型
    .成员 SizeOfUninitializedData, 整数型
    .成员 AddressOfEntryPoint, 整数型
    .成员 BaseOfCode, 整数型
    .成员 BaseOfData, 整数型
    .成员 ImageBase, 整数型
    .成员 SectionAlignment, 整数型
    .成员 FileAlignment, 整数型
    .成员 MajorOperatingSystemVersion, 短整数型
    .成员 MinorOperatingSystemVersion, 短整数型
    .成员 MajorImageVersion, 短整数型
    .成员 MinorImageVersion, 短整数型
    .成员 MajorSubsystemVersion, 短整数型
    .成员 MinorSubsystemVersion, 短整数型
    .成员 Win32VersionValue, 整数型
    .成员 SizeOfImage, 整数型
    .成员 SizeOfHeaders, 整数型
    .成员 CheckSum, 整数型
    .成员 Subsystem, 短整数型
    .成员 DllCharacteristics, 短整数型
    .成员 SizeOfStackReserve, 整数型
    .成员 SizeOfStackCommit, 整数型
    .成员 SizeOfHeapReserve, 整数型
    .成员 SizeOfHeapCommit, 整数型
    .成员 LoaderFlags, 整数型
    .成员 NumberOfRvaAndSizes, 整数型
    .成员 DataDirectory, IMAGE_DATA_DIRECTORY, , "16"

.数据类型 IMAGE_DATA_DIRECTORY
    .成员 VirtualAddress, 整数型
    .成员 Size, 整数型

.数据类型 函数导出表
    .成员 API序号, 整数型
    .成员 API入口, 整数型, , , 非转向为API入口地址,转向时指向转向的DLL和函数名.可读取取函数入口,写进OUT地址.
    .成员 API名称, 文本型
    .成员 OUT地址, 整数型, , , 保存API入口的模块内存地址.可从此处读取修改API入口进行HOOK.
    .成员 转向API, 逻辑型, , , 假=NO转向.真=转向API.从 API入口处读取转向的API名,值如 "NTDLL.RtlAllocateHeap"
    .成员 原始指令, 字节集, , , 原始API入口处的指令.供 内核_取模块导出表 内核_修复APIHOOK 使用
    .成员 当前指令, 字节集, , , 当前API入口处的指令.供 内核_取模块导出表 内核_修复APIHOOK 使用

.数据类型 函数导入表
    .成员 DLL名称, 文本型
    .成员 API序号, 整数型
    .成员 API名称, 文本型
    .成员 API入口, 整数型, , , 非转向为API入口地址,转向时指向转向的DLL和函数名.可读取取函数入口,写进IAT地址.
    .成员 IAT地址, 整数型, , , 保存API入口的模块内存地址.可从此处读取修改API入口进行HOOK.

.数据类型 导出函数, , IMAGE_EXPORT_DIRECTORY 40字节.如果为转向函数则 入口数组[X] 指向某个函数名称 如 Kernel32.dll->HeapAlloc -> "NTDLL.RtlAllocHeap" NTDLL.RtlAllocateHeap
    .成员 保留成员, 整数型, , , Characteristics           保留成员  0
    .成员 创建时间, 整数型, , , TimeDateStamp             函数导出表创建时间
    .成员 版本编号, 整数型, , , MinorVersion|MajorVersion 输出表主次版本号 0
    .成员 模块名称, 整数型, , , 自身模块文本名称指针.若DLL名被修改,加载器将使用这里的名称
    .成员 起始序号, 整数型, , , 函数起始序号默认=1.查询函数序时,该函数序号表的索引为Y=X-1
    .成员 入口数目, 整数型, , , 函数入口数组元数.有些可能为0,意味此序数值没有代码和数据输出
    .成员 名称数目, 整数型, , , 函数名称数组元数.有些无名称函数不被算入此处
    .成员 入口数组, 整数型, , , EAT RAV.指向输出入口数组,每成员四字节.每个非零成员对应一个函数入口RAV指针
    .成员 名称数组, 整数型, , , ENT RAV.指向输出名称数组,每成员四字节,每个非零成员对应一个名称,二进制排序
    .成员 序号数组, 整数型, , , EOT RAV.指向输出序号数组,每成员二字节,序号数组与名称数组一一对应.

.数据类型 导入函数, , IMAGE_IMPORT_DESCRIPTOR 20字节.终止结构为{0}.每个成员对应个DLL. 函数数组 高位=1(低31位=序号).高位=0(名称指针->可选16位序号|函数名称{0})
    .成员 导入函数, 整数型, , , INT RAV.IMAGE_THUNK_DATA OriginalFirstThunk 指向 序号+名称.序号(2字节)+文本API名称{0}.数组最后成员为{0}终止.源导入函数
    .成员 创建时间, 整数型, , , DWORD TimeDateStamp  0=不绑定DLL,-1=旧方式绑定,日期时间=绑定
    .成员 转发函数, 整数型, , , DWORD ForwarderChain 第一个被转向的API的索引.老式绑定用
    .成员 模块名称, 整数型, , , TEXT  Name           指向模块文件名称的RAV指针.注意:起初 导入函数 与 函数地址 指向同一处的数据,当模块加载完成,后者被替换新的
    .成员 函数地址, 整数型, , , DWORD FirstThunk     导入函数入口地址数组指针  指向一堆对该DLL所引用的API IAT RVA函数入口4字节的数组以0结尾.现导入函数

.数据类型 进程基本信息, , PROCESS_BASIC_INFORMATION 24字节
    .成员 返回值, 整数型, , , 进程返回值,若进程还未返回=259
    .成员 PEB地址, 整数型
    .成员 CPU掩码, 整数型, , , 1=第一个CPU,AffinityMask
    .成员 优先级, 整数型, , , BasePriority 基本优先级
    .成员 进程ID, 整数型
    .成员 父进程ID, 整数型, , , InheritedFromUniqueProcessId

.数据类型 系统版本结构
    .成员 结构长度, 整数型, , , 148字节
    .成员 主版本号, 整数型, , , (2K,XP,2003)=5,(Vista,WIN7,2008,Win8)=6 与次版本号结合判断
    .成员 次版本号, 整数型, , , (2K=0,XP=1,2003=2),(Vista=0,WIN7=1,2008=1,Win8=2)
    .成员 内版本号, 整数型
    .成员 系统平台, 整数型, , , 32s=0,9X＝1，NT＝2
    .成员 补丁名称, 字节型, , "128", 用到文本可以获取补丁包名称
    .成员 补丁序号, 整数型, , , SP1=1,SP2=2 扩展成员
    .成员 Win64, 逻辑型, , , 64位操作系统
    .成员 保留, 字节型, , "64"

.数据类型 PE_区段, , IMAGE_SECTION_HEADER 40字节.Rva=相对虚拟偏移,Raw=相对文件偏移.偏差值 = 内存偏移 - 文件偏移.绝对虚拟地址 = 相对文件地址 + 模块句柄 + 偏差值.绝对文件地址 = 绝对虚拟地址 - 模块句柄 - 偏差值
    .成员 区段名称, 字节型, , "8", BYTE    Name[IMAGE_SIZEOF_SHORT_NAME]            到文本(区段名称) 代码(text) 数据(data) 只读(rdata) 资源(rsrc) 输出(edata) 输入(idata) 符号(pdata) 调试(debug) 线程(TLS) 重定位(reloc)
    .成员 虚拟大小, 整数型, , , DWORD   VirtualSize,DWORD PhysicalAddress        本成员也可能是物理地址.文件数据真实尺寸? 此成员该忽略处理.
    .成员 虚拟偏移, 整数型, , , DWORD   VirtualAddress                           区段内存地址=模块句柄+内存偏移   0x1000=4096
    .成员 原始大小, 整数型, , , DWORD   SizeOfRawData                            区段文件有效数据尺寸.  区段内存数据尺寸
    .成员 文件偏移, 整数型, , , DWORD   PointerToRawData                         区段文件有效数据地址             0x1000=4096
    .成员 重定位, 整数型, , , DWORD   PointerToRelocations                     在OBJ文件中使用,指向重定位数据列表偏移
    .成员 符号表, 整数型, , , DWORD   PointerToLinenumbers                     指向调试符号列表
    .成员 位符数目, 整数型, , , WORD    NumberOfRelocations|WORD    NumberOfLinenumbers   在OBJ文件中使用,重定位项数目|调试符号数目
    .成员 区段特性, 整数型, , , 代码段=32,初始化数据=64,未初始化数据=128,可放弃内存=33554432,非缓存内存=67108864,非分页内存=134217728,非共享内存=268435456,运行内存=536870912,可读内存=1073741824,可写内存=2147483648

.数据类型 NT功能号
    .成员 DLL名称, 整数型, , , 1＝NTDLL，2＝USER32.dll，3＝gdi32.dll
    .成员 API名称, 文本型
    .成员 SSDT_ID, 整数型, , , NTAPIID
    .成员 RETN_XX, 整数型, , , ret xxxx 后面的xxxx值
    .成员 ECX, 整数型, , , xor  ecx,ecx  或  mov ecx,xxxxxxxx   64位系统专用

.数据类型 对象数据信息, , OBJECT_DATA_INFORMATION
    .成员 继承句柄, 逻辑型, , , BOOLEAN                 InheritHandle
    .成员 关闭保护, 逻辑型, , , BOOLEAN                 ProtectFromClose

.数据类型 内存属性, , MEMORY_BASIC_INFORMATION
    .成员 区域地址, 整数型, , , 子集合页块区域基址
    .成员 分配地址, 整数型, , , 父集合页块区域基址
    .成员 初始属性, 整数型, , , 父集合页原保护属性.0=无权或未分配,1=不可访问,(2=只读,4=读写,8=写拷贝,16=只运行,32=读运行,64=读写运行,128=读写拷贝运行) or 256=系统保护页,512=非缓存页,1024=写入提交
    .成员 区域长度, 整数型, , , 子集合页块已提交可使用的内存长度
    .成员 页状态, 整数型, , , 已分配且提交的可用内存页MEM_COMMIT=4096,已释放可再分配的空闲页MEM_FREE=65536,待分配的已被保留页MEM_RESERVE=8192,
    .成员 当前属性, 整数型, , , 子集合页现保护属性,0=无权或未分配,1=不可访问,2=只读,4=读写,8=写拷贝,16=只运行,32=读运行,64=读写运行,128=读写拷贝运行
    .成员 页类型, 整数型, , , 131072=非映射共享的私有内存页,16777216=EXE,DLL映像映射内存,,262144=部件对象共享内存映射

.数据类型 Dr寄存器, , 24字节 物理中断寄存器结构  CONTEXT_DEBUG_REGISTERS
    .成员 Dr0, 整数型, , , 04 物理中断用
    .成员 Dr1, 整数型, , , 08 物理中断用
    .成员 Dr2, 整数型, , , 0C 物理中断用
    .成员 Dr3, 整数型, , , 10 物理中断用
    .成员 Dr6, 整数型, , , 14 物理中断状态寄存器,发生断点事件时会设置此寄存器描述中断状态
    .成员 Dr7, 整数型, , , 18 物理中断控制寄存器,设置断点发生的条件

.数据类型 系统进程, , SYSTEM_PROCESSES 进程结构 240字节
    .成员 下个结构, 整数型, , , ULONG NextEntryDelta 指向下个结构的偏移,0=无下个结构
    .成员 线程数目, 整数型, , , ULONG ThreadCount
    .成员 保留, 整数型, , "6", ULONG Reserved[6]
    .成员 创建时间, 长整数型, , , UTC时间 CreateTime
    .成员 用户时间, 长整数型, , , UTC时间 UserTime
    .成员 内核时间, 长整数型, , , UTC时间 KernelTime
    .成员 进程名, 宽文本结构_, , , UNICODE_STRING ProcessName
    .成员 基本优先级, 整数型, , , KPRIORITY BasePriority
    .成员 进程ID, 整数型, , , ULONG ProcessId
    .成员 父进程ID, 整数型, , , ULONG InheritedFromProcessId
    .成员 句柄数目, 整数型, , , ULONG HandleCount
    .成员 保留2, 整数型, , "2", ULONG Reserved2[2] 8
    .成员 虚拟内存统计, 虚拟内存统计, , , VM_COUNTERS VmCounters 44
    .成员 IO操作统计, IO操作统计, , , IO_COUNTERS IoCounters 48
    .成员 系统线程, 枚举线程结构, , "1", struct _SYSTEM_THREADS Threads[1]; 60

.数据类型 虚拟内存统计, , VM_COUNTERS 44
    .成员 虚拟存储峰值大小, 整数型, , , ULONG PeakVirtualSize;                  //虚拟存储峰值大小
    .成员 虚拟存储大小, 整数型, , , ULONG VirtualSize;                      //虚拟存储大小
    .成员 页故障数目, 整数型, , , ULONG PageFaultCount;                   //页故障数目
    .成员 工作集峰值大小, 整数型, , , ULONG PeakWorkingSetSize;               //工作集峰值大小
    .成员 工作集大小, 整数型, , , ULONG WorkingSetSize;                   //工作集大小
    .成员 分页池使用配额峰值, 整数型, , , ULONG QuotaPeakPagedPoolUsage;          //分页池使用配额峰值
    .成员 分页池使用配额, 整数型, , , ULONG QuotaPagedPoolUsage;              //分页池使用配额
    .成员 非分页池使用配额峰值, 整数型, , , ULONG QuotaPeakNonPagedPoolUsage;       //非分页池使用配额峰值
    .成员 非分页池使用配额, 整数型, , , ULONG QuotaNonPagedPoolUsage;           //非分页池使用配额
    .成员 页文件使用情况, 整数型, , , ULONG PagefileUsage;                    //页文件使用情况
    .成员 页文件使用峰值, 整数型, , , ULONG PeakPagefileUsage;                //页文件使用峰值

.数据类型 MEMORY_BASIC_INFORMATION_
    .成员 区域地址, 整数型, , , BaseAddress
    .成员 分配地址, 整数型, , , AllocationBase
    .成员 初始属性, 整数型, , , AllocationProtect
    .成员 区域长度, 整数型, , , RegionSize
    .成员 保留值, 整数型, , , 已提交值,保留值,自由值State
    .成员 当前属性, 整数型, , , Protect
    .成员 页类型, 整数型, , , lType

.数据类型 IO操作统计, , IO_COUNTERS 48字节
    .成员 读操作计数, LARGE_INTEGER_, , , LARGE_INTEGER_ ReadOperationCount;       //I/O读操作数目
    .成员 写操作计数, LARGE_INTEGER_, , , LARGE_INTEGER_ WriteOperationCount;      //I/O写操作数目
    .成员 其它操作计数, LARGE_INTEGER_, , , LARGE_INTEGER_ OtherOperationCount;      //I/O其他操作数目
    .成员 读数据计数, LARGE_INTEGER_, , , LARGE_INTEGER_ ReadTransferCount;        //I/O读数据数目
    .成员 写数据计数, LARGE_INTEGER_, , , LARGE_INTEGER_ WriteTransferCount;       //I/O写数据数目
    .成员 其它数据计数, LARGE_INTEGER_, , , LARGE_INTEGER_ OtherTransferCount;       //I/O其他操作数据数目

.数据类型 LARGE_INTEGER_, , 64位长整数型值结构.可以用长整数型传址替换此类型
    .成员 高位, 整数型, , , 32位时设置在此处
    .成员 低位, 整数型

.数据类型 宽文本结构_, , UNICODE_STRING
    .成员 宽文长度, 短整数型
    .成员 内存长度, 短整数型
    .成员 宽字符串, 整数型, , , 指向宽文本数据的内存地址

.数据类型 调试事件, , DEBUG_EVENT
    .成员 事件ID, 整数型, , , 事件代码
    .成员 进程ID, 整数型
    .成员 线程ID, 整数型
    .成员 调试信息, 整数型, , "32", 见下面几个调试数据结构 RIP_INFO 

.数据类型 所有对象信息, , 对象信息　SYSTEM_HANDLE_INFORMATION 16字节
    .成员 进程ID, 整数型, , , ULONG ProcessId
    .成员 类型索引, 字节型, , , UCHAR ObjectTypeNumber 对象_取类型名称(类型索引) 对象_取类型索引("Mutant")
    .成员 对象标志, 字节型, , , UCHAR Flags，克隆句柄=0,跟随关闭＝1，进程继承＝2
    .成员 对象句柄, 短整数型, , , USHORT Handle
    .成员 对象地址, 整数型, , , PVOID Object 对象句柄所指的内核对象地址,指向内核空间的内存地址
    .成员 访问权限, 整数型, , , ACCESS_MASK GrantedAccess 创建句柄时所准许的对象的访问权

.数据类型 枚举线程结构, , SYSTEM_THREADS 线程结构 64
    .成员 保留, 整数型
    .成员 内核时间, 长整数型, , , UTC时间 KernelTime
    .成员 用户时间, 长整数型, , , UTC时间 UserTime
    .成员 创建时间, 长整数型, , , UTC时间 CreateTime
    .成员 等待时间, 整数型, , , ULONG WaitTime
    .成员 启动地址, 整数型, , , PVOID StartAddress 线程在R3层第一条指令地址,一般是kernel32.dll线程进程安全入口.若想获取程序的线程入口地址请使用 线程_取线程入口 ()
    .成员 进程ID, 整数型, , , CLIENT_ID ClientIs
    .成员 线程ID, 整数型
    .成员 线程优先级, 整数型, , , KPRIORITY Priority
    .成员 基本优先级, 整数型, , , KPRIORITY BasePriority
    .成员 切换计数, 整数型, , , ULONG ContextSwitchCount
    .成员 线程状态, 整数型, , , THREAD_STATE ULONG ThreadState 当状态=5处于等待状态 
    .成员 等待原因, 整数型, , , KWAIT_REASON WaitReason        线程等态状态时此处为等待原因

.数据类型 浮点数据, , FLOATING_SAVE_AREA   CONTEXT_FLOATING_POINT 108字节 汇编 fsave()=保存, frstor()=载入
    .成员 ControlWord, 整数型, , , 1C 28 控制代码
    .成员 StatusWord, 整数型, , , 20 32 状态代码
    .成员 TagWord, 整数型, , , 24 36 标记代码
    .成员 ErrorOffset, 整数型, , , 28 40 错误偏移
    .成员 ErrorSelector, 整数型, , , 2C 44 错误选择器
    .成员 DataOffset, 整数型, , , 30 48 数据偏移
    .成员 DataSelector, 整数型, , , 34 52 数据选择器
    .成员 ST0, 字节型, , "10", 38 56 RegisterArea 浮点数寄存器在这里 ST0 - ST7 每个寄存器为10字节
    .成员 ST1, 字节型, , "10", 42 66
    .成员 ST2, 字节型, , "10", 4C 76
    .成员 ST3, 字节型, , "10", 56 86
    .成员 ST4, 字节型, , "10", 60 96
    .成员 ST5, 字节型, , "10", 6A 106
    .成员 ST6, 字节型, , "10", 74 116
    .成员 ST7, 字节型, , "10", 7E 126

.数据类型 线程环境, , 204 716字节
    .成员 环境标志, 整数型, , , 00 0    CONTEXT ContextFlags .65567=CONTEXT_FULL+DR寄存器+浮点寄存器. CONTEXT_FULL=65543=控制寄存器+通用寄存器+段寄存器  .注意:WIN7里用-1会获取失败
    .成员 Dr寄存器, Dr寄存器, , , 04 08 0C 10 14 18 物理中断寄存器结构  CONTEXT_DEBUG_REGISTERS=65552
    .成员 浮点数据, 浮点数据, , , 1C 28  CONTEXT_FLOATING_POINT=65544
    .成员 Cr0NpxState, 整数型, , , 88 136 属于浮点数寄存器里的同步状态
    .成员 GS, 整数型, , , 8C 140  SegGs    CONTEXT_SEGMENTS=65540 GS,FS,ES,DS
    .成员 FS, 整数型, , , 90 144  SegFs
    .成员 ES, 整数型, , , 94 148  SegEs
    .成员 DS, 整数型, , , 98 152  SegDs
    .成员 EDI, 整数型, , , 9C 156  CONTEXT_INTEGER=65538  EDI,ESI,EBX,EDX,ECX,EAX
    .成员 ESI, 整数型, , , A0 160
    .成员 EBX, 整数型, , , A4 164
    .成员 EDX, 整数型, , , A8 168
    .成员 ECX, 整数型, , , AC 172
    .成员 EAX, 整数型, , , B0 176
    .成员 EBP, 整数型, , , B4 180  CONTEXT_CONTROL=65537  EBP,EIP,CS,标志位,ESP,SS
    .成员 EIP, 整数型, , , B8 184
    .成员 CS, 整数型, , , BC 188  SegCs=0 标志位=0
    .成员 标志位, 整数型, , , C0 192 EFlags CF=1,PF=3,AF=5,ZF=7,SF=8,TF=9,IF=10,DF=11,OF=12, 取位 BT_(标志,位数), 反位 BTC_(标志,位数), 置0 BTR_(), 置1 BTS_(标志,位数)
    .成员 ESP, 整数型, , , C4 196
    .成员 SS, 整数型, , , C8 200  SegSs
    .成员 保留, 整数型, , , CC 208  禁止使用 扩展寄存器 整数型[128] CONTEXT_EXTENDED_REGISTERS=65568

.数据类型 线程基本信息, , THREAD_BASIC_INFORMATION
    .成员 返回值, 整数型, , , 线程返回值,若线程还未返回=259
    .成员 TEB地址, 整数型, , , TebBaseAddress;
    .成员 进程ID, 整数型
    .成员 线程ID, 整数型
    .成员 CPU掩码, 整数型, , , 1=第一个CPU,AffinityMask;
    .成员 优先级, 整数型, , , Priority; 动态优先级
    .成员 基本优先级, 整数型

.数据类型 PE_结构, , IMAGE_NT_HEADER  共 4 + 20 + 96 + 128 = 248 字节
    .成员 PE_标志, 整数型, , , DWORD                 Signature 50450000=17744="PE00"
    .成员 PE_文件, PE_文件, , , IMAGE_FILE_HEADER     ImageFileHeader     20字节
    .成员 PE_映像, PE_映像, , , IMAGE_OPTIONAL_HEADER ImageOptionalHeader 96字节
    .成员 区段列表, PE_区段, , "128", PE头件头.PE区块数
    .成员 区段偏差, 整数型, , "128", 各区域间偏移量差.     此成员为自定义

.数据类型 PE_文件, ,  IMAGE_FILE_HEADER PE头里使用的文件头  共20字节   3=EXE,8194=DLL
    .成员 CPU_标志, 短整数型, , , WORD    Machine;               IMAGE_FILE_MACHINE_I386=014C=332
    .成员 区段数目, 短整数型, , , WORD    NumberOfSections;      区段数目    .text  .data   .rdata
    .成员 创建日期, 整数型, , , DWORD   TimeDateStamp;         文件创建日期与时间
    .成员 符号列表, 整数型, , , DWORD   PointerToSymbolTable;  指向调试符号列表偏移
    .成员 符号数目, 整数型, , , DWORD   NumberOfSymbols;       调试符号列表中的符号数目
    .成员 映像大小, 短整数型, , , WORD    SizeOfOptionalHeader;  PE_映像 结构大小.  PE_结构+PE_目录结构=E0=224
    .成员 模块类型, 短整数型, , , WORD    Characteristics;       掩码 1=EXE=无重定位,2=可执行映像,4=删除行号,8=删除局部标签,16=强行WS裁剪,32=高地址警告,128=保留字节(低),256=32位电脑,512=删除调试信息,1024=交换运行(移动),2048=交换运行(.net),4096=文件系统,8192=DLL,16384=非多处理器系统,32768=保留字节(高)

.数据类型 PE_映像, , IMAGE_OPTIONAL_HEADER 96字节+目录128字节=224字节  .50450000=17744="PE00"
    .成员 PE_标志, 短整数型, , , WORD        Magic                此处起为通用结构  0x010B=267=PE32位
    .成员 链接版本, 短整数型, , , BYTE|BYTE   MajorLinKerVersion|MinorLinKerVersion  链接器 主次版本
    .成员 执行代码大小, 整数型, , , DWORD   SizeOfCode               可执行代码段尺寸 如 .text  + .text2
    .成员 装载数据大小, 整数型, , , DWORD   SizeOfInitializedData    模块全数据段尺寸 如 .rdata + .data  + .rsrc
    .成员 未载数据大小, 整数型, , , DWORD   SizeOfUninitializedData  00000000
    .成员 模块入口地址, 整数型, , , DWORD   AddressOfEntryPoint      程序模块代码入口地址
    .成员 代码起始地址, 整数型, , , DWORD   BaseOfCode               模块执行代码所在起始地址
    .成员 数据起始地址, 整数型, , , DWORD   BaseOfData               模块数据所在起始地址
    .成员 模块映像基址, 整数型, , , DWORD   ImageBase                优先装载虚拟内存地址.动态模块可以在任何地址
    .成员 区段对齐, 整数型, , , DWORD   SectionAlignment         模块映像区段内存对齐 0x1000=4096 以此为倍数
    .成员 文件对齐, 整数型, , , DWORD   FileAlignment            文件数据区段对齐     0x200 =512  0x1000=4096  倍数
    .成员 系统版本, 整数型, , , WORD|WORD   MajorOsVersion|MinorOsVerSion               要求操作系统基本主次版本4.0
    .成员 模块版本, 整数型, , , WORD|WORD   MajorImageVersion|MinorImageVersion         模块用户自定义版本      1.0
    .成员 子系统号, 整数型, , , WORD|WORD   MajorSubsystemVersion|MinorSubsystemVersion 要求子系统版本号必定为  4.0
    .成员 保留成员, 整数型, , , DWORD       Win32VersionValue
    .成员 映像大小, 整数型, , , DWORD   SizeOfImage              整个模块映像占用内存尺寸
    .成员 头部大小, 整数型, , , DWORD   SizeOfHeaders            DOS_结构 + PE_结构....0x1000=4096
    .成员 校验和, 整数型, , , DWORD   CheckSum                 0
    .成员 子系统, 短整数型, , , WORD    Subsystem                控制台程序(CUI)=1,图形界面(GUI)=2  
    .成员 DLL_特性, 短整数型, , , WORD    DllCharacteristics       DLL特点特性
    .成员 保留栈, 整数型, , , DWORD   SizeOfStackReserve       栈保留大小  0x100000=1048576=1MB
    .成员 提交栈, 整数型, , , DWORD   SizeOfStackCommit        栈提交大小  0x1000  =4096
    .成员 保留堆, 整数型, , , DWORD   SizeOfHeapReserve        堆保留大小  0x100000=1048576=1MB
    .成员 提交堆, 整数型, , , DWORD   SizeOfHeapCommit         堆提交大小  0x1000  =4096
    .成员 装载标志, 整数型, , , DWORD   LoaderFlags              默认=00
    .成员 目录数目, 整数型, , , DWORD   NumberOfRvaAndSizes      数组目录列表数目  0x10=16
    .成员 数据目录, 整数型, , "32", IMAGE_DATA_DIRECTORY             DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]

.数据类型 精易_表头样式, 公开
    .成员 参_列索引, 整数型
    .成员 参_文本色, 整数型
    .成员 参_背景色, 整数型

.数据类型 DRAWITEMSTRUCT, , 12*4=48
    .成员 CtlType, 整数型, , , 控件类型
    .成员 CtlID, 整数型, , , 组合框、列表框等控件的ID标识号
    .成员 itemID, 整数型, , , 菜单项的ID标识 号或列表框、组合框中某一项的索引值
    .成员 itemAction, 整数型, , , 控件行为
    .成员 itemState, 整数型, , , 控件状态
    .成员 hwndItem, 整数型, , , 父窗口句柄或菜单句柄
    .成员 hDC, 整数型, , , 控件对应的绘图设备句柄
    .成员 rcItem, RECT, , , 控件所占据的矩形区域,注意：这里不是传址，4*4=16
    .成员 itemData, 整数型, , , 列表框或组合框中某一项的值

.数据类型 HDITEM
    .成员 mask, 整数型
    .成员 cxy, 整数型
    .成员 pszText, 字节集, , , LPSTR　字符串指针
    .成员 hbm, 整数型, , , HBITMAP　句柄
    .成员 cchTextMax, 整数型
    .成员 fmt, 整数型
    .成员 lParam, 整数型, , , LPARAM　自定义类型
    .成员 iImage, 整数型
    .成员 iOrder, 整数型
    .成员 type, 整数型
    .成员 pvFilter, 整数型, , , void　无类型指针
    .成员 state, 整数型

.数据类型 RECT, 公开
    .成员 left, 整数型
    .成员 top, 整数型
    .成员 right, 整数型
    .成员 bottom, 整数型

.数据类型 剪辑版数据, 公开
    .成员 剪辑版数据格式, 整数型
    .成员 文本型数据, 文本型
    .成员 字节集长度, 整数型
    .成员 字节集数据, 字节集

.数据类型 WINDOWPOS
    .成员 hwnd, 整数型
    .成员 hwndInsertAfter, 整数型
    .成员 x, 整数型
    .成员 y, 整数型
    .成员 cx, 整数型
    .成员 cy, 整数型
    .成员 flags, 整数型

.数据类型 NMHDR, , 12
    .成员 hWndFrom, 整数型
    .成员 idFrom, 整数型
    .成员 code, 整数型

.数据类型 NMCUSTOMDRAW, , 48
    .成员 hdr, NMHDR, , , 12
    .成员 dwDrawStage, 整数型, , , 4
    .成员 hdc, 整数型, , , 4
    .成员 rc, 矩形信息, , , 16
    .成员 dwItemSpec, 整数型, , , 4
    .成员 uItemState, 整数型, , , 4
    .成员 lItemlParam, 整数型, , , 4

.数据类型 NMLVCUSTOMDRAW, , 48+40+16=104
    .成员 nmcd, NMCUSTOMDRAW, , , 48
    .成员 clrText, 整数型, , , 4
    .成员 clrTextBk, 整数型, , , 4
    .成员 iSubItem, 整数型, , , 4
    .成员 dwItemType, 整数型, , , 4
    .成员 clrFace, 整数型, , , 4
    .成员 iIconEffect, 整数型, , , 4
    .成员 iIconPhase, 整数型, , , 4
    .成员 iPartId, 整数型, , , 4
    .成员 iStateId, 整数型, , , 4
    .成员 rcText, 矩形信息, , , 16
    .成员 uAlign, 整数型, , , 4

.数据类型 LVINFO
    .成员 窗口句柄, 整数型
    .成员 对象, 对象

.数据类型 TCITEM
    .成员 mask, 整数型
    .成员 dwState, 整数型
    .成员 dwStateMask, 整数型
    .成员 pszText, 文本型
    .成员 cchTextMax, 整数型
    .成员 iImage, 整数型
    .成员 lParam, 整数型

.数据类型 SYSTEM_PROCESSES
    .成员 NextEntryDelta, 整数型
    .成员 ThreadCount, 整数型
    .成员 Reserved1, 整数型, , "6"
    .成员 CreateTime, 长整数型
    .成员 UserTime, 长整数型
    .成员 KernelTime, 长整数型
    .成员 ProcessName, UNICODE_STRING
    .成员 BasePriority, 整数型
    .成员 ProcessID, 整数型
    .成员 InheritedFromProcessId, 整数型
    .成员 HandleCount, 整数型
    .成员 SessionId, 整数型
    .成员 Reserved2, 整数型, , "2"
    .成员 VmCounters, VM_COUNTERS
    .成员 PrivatePageCount, 整数型
    .成员 IoCounters, IO_COUNTERSEX
    .成员 Threads, SYSTEM_THREADS, , "1"

.数据类型 VM_COUNTERS, 公开, 进程_取父ID
    .成员 PeakVirtualSize, 整数型
    .成员 VirtualSize, 整数型
    .成员 PageFaultCount, 整数型
    .成员 PeakWorkingSetSize, 整数型
    .成员 WorkingSetSize, 整数型
    .成员 QuotaPeakPagedPoolUsage, 整数型
    .成员 QuotaPagedPoolUsage, 整数型
    .成员 QuotaPeakNonPagedPoolUsage, 整数型
    .成员 QuotaNonPagedPoolUsage, 整数型
    .成员 PagefileUsage, 整数型
    .成员 PeakPagefileUsage, 整数型

.数据类型 IO_COUNTERSEX
    .成员 ReadOperationCount, 长整数型
    .成员 WriteOperationCount, 长整数型
    .成员 OtherOperationCount, 长整数型
    .成员 ReadTransferCount, 长整数型
    .成员 WriteTransferCount, 长整数型
    .成员 OtherTransferCount, 长整数型

.数据类型 SYSTEM_THREADS
    .成员 KernelTime, 长整数型
    .成员 UserTime, 长整数型
    .成员 CreateTime, 长整数型
    .成员 WaitTime, 整数型
    .成员 StartAddress, 整数型
    .成员 ClientId, CLIENT_ID
    .成员 Priority, 整数型
    .成员 BasePriority, 整数型
    .成员 ContextSwitchCount, 整数型
    .成员 State, 整数型
    .成员 WaitReason, 整数型

.数据类型 菜单消息, 公开
    .成员 名称, 文本型
    .成员 是否插入, 逻辑型, , , 默认为假 假=在菜单末尾添加新的菜单
    .成员 事件, 子程序指针

.数据类型 菜单结构
    .成员 窗口句柄, 整数型
    .成员 菜单标题, 文本型
    .成员 插入位置, 整数型
    .成员 原回调地址, 整数型
    .成员 菜单数据, 菜单消息, , "1"

.数据类型 精易_任务栏缩略图按钮, 公开
    .成员 掩码, 整数型, , , “缩略图按钮掩码_”开头常量组合
    .成员 ID, 整数型
    .成员 图片索引, 整数型
    .成员 图标, 整数型
    .成员 提示文本, 文本型
    .成员 按钮风格, 整数型, , , “缩略图按钮_”开头常量组合

.数据类型 THUMBBUTTON
    .成员 dwMask, 整数型
    .成员 iId, 整数型
    .成员 iBitmap, 整数型
    .成员 hIcon, 整数型
    .成员 szTip, 字节型, , "520"
    .成员 dwFlags, 整数型

.数据类型 DISPLAY_DEVICEA, 公开
    .成员 cb, 整数型
    .成员 DeviceName, 字节型, , "32"
    .成员 DeviceString, 字节型, , "128"
    .成员 StateFlags, 整数型
    .成员 DeviceID, 字节型, , "128"
    .成员 DeviceKey, 字节型, , "128"

.数据类型 MOUSEHOOKSTRUCT, 公开
    .成员 pt, POINT
    .成员 hwnd, 整数型, , , 如果消息是WM_MOUSEWHEEL，则该成员的高位字是轮增量。低位字是保留的。正值表示车轮向前旋转，远离用户; 负值表示车轮向后旋转，朝向用户。单轮定位单击定义为WHEEL_DELTA，即120。如果消息是WM_XBUTTONDOWN，WM_XBUTTONUP，WM_XBUTTONDBLCLK，WM_NCXBUTTONDOWN，WM_NCXBUTTONUP或WM_NCXBUTTONDBLCLK，则高位字指定按下或释放哪个X按钮，并保留低位字。
    .成员 wHitTestCode, 整数型
    .成员 dwExtraInfo, 整数型

.数据类型 POINT, 公开
    .成员 X, 整数型
    .成员 Y, 整数型

.数据类型 HashMap_Str_Str_键值型
    .成员 散列值, 整数型
    .成员 键, 文本型
    .成员 值, 整数型

.数据类型 HashMap_Str_Str_节点型
    .成员 键值链数组, HashMap_Str_Str_键值型, , "1"

.数据类型 LIST_ENTRY64
    .成员 Flink, 长整数型
    .成员 Blink, 长整数型

.数据类型 LDR_DATA_TABLE_ENTRY64
    .成员 InLoadOrderLinks, LIST_ENTRY64, , , 按加载顺序
    .成员 InMemoryOrderLinks, LIST_ENTRY64, , , 按内存顺序
    .成员 InInitializationOrderLinks, LIST_ENTRY64, , , 按初始化顺序
    .成员 DllBase, 长整数型
    .成员 EntryPoint, 长整数型
    .成员 SizeOfImage, 长整数型
    .成员 FullDllName, UNICODE_STRING64
    .成员 BaseDllName, UNICODE_STRING64

.数据类型 模块信息, 公开
    .成员 模块句柄, 文本型
    .成员 模块路径, 文本型

.数据类型 位图结构_
    .成员 bmType, 整数型, , , 一定是0
    .成员 位图宽度, 整数型, , , bmWidth
    .成员 位图高度, 整数型, , , bmHeight
    .成员 bmWidthBytes, 整数型
    .成员 bmPlanes, 整数型
    .成员 bmBitsPixel, 整数型
    .成员 bmBits, 整数型

.数据类型 TRAYDATAEX
    .成员 hWnd, 整数型
    .成员 idCommand, 整数型
    .成员 strFilePath, 文本型
    .成员 strTile, 文本型

.数据类型 TRAYDATA
    .成员 hWnd, 长整数型
    .成员 uID, 整数型
    .成员 uCallbackMessage, 整数型
    .成员 Reserved, 整数型, , "2"
    .成员 hIcon, 整数型

.数据类型 TBBUTTON
    .成员 idBitMap, 整数型
    .成员 idCommand, 整数型
    .成员 fsState, 字节型
    .成员 fsStyle, 字节型
    .成员 bReserved, 字节型, , "6"
    .成员 dwData, 整数型
    .成员 iString, 整数型

.数据类型 CLIENT_ID
    .成员 UniqueProcess, 整数型
    .成员 UniqueThread, 整数型

.数据类型 OBJECT_ATTRIBUTES
    .成员 Length, 整数型
    .成员 RootDirectory, 整数型
    .成员 ObjectName, 整数型
    .成员 Attributes, 整数型
    .成员 SecurityDescriptor, 整数型
    .成员 SecurityQualityOfService, 整数型

.数据类型 SYSTEM_HANDLE_TABLE_ENTRY_INFO
    .成员 UniqueProcessId, 短整数型, , , ""
    .成员 CreatorBackTraceIndex, 短整数型, , , ""
    .成员 ObjectTypeIndex, 字节型, , , ""
    .成员 HandleAttributes, 字节型, , , ""
    .成员 HandleValue, 短整数型, , , ""
    .成员 pObject, 整数型, , , ""
    .成员 GrantedAccess, 整数型, , , ""

.数据类型 IP_ADDR_STRING
    .成员 Next, 整数型
    .成员 IpAddress, 字节型, , "16", IP_ADDRESS_STRING
    .成员 IpMask, 字节型, , "16", IP_MASK_STRING=IP_ADDRESS_STRING
    .成员 Context, 整数型

.数据类型 精易_网卡信息, 公开
    .成员 名称, 文本型
    .成员 连接名称, 文本型
    .成员 Mac, 文本型
    .成员 Ip, 文本型
    .成员 掩码, 文本型
    .成员 网关, 文本型
    .成员 DNS1, 文本型
    .成员 DNS2, 文本型

.数据类型 IMAGE_OPTIONAL_HEADER
    .成员 Magic, 短整数型
    .成员 MajorLinkerVersion, 字节型
    .成员 MinorLinkerVersion, 字节型
    .成员 SizeOfCode, 整数型
    .成员 SizeOfInitializedData, 整数型
    .成员 SizeOfUnitializedData, 整数型
    .成员 AddressOfEntryPoint, 整数型
    .成员 BaseOfCode, 整数型
    .成员 BaseOfData, 整数型
    .成员 ImageBase, 整数型
    .成员 SectionAlignment, 整数型
    .成员 FileAlignment, 整数型
    .成员 MajorOperatingSystemVersion, 短整数型
    .成员 MinorOperatingSystemVersion, 短整数型
    .成员 MajorImageVersion, 短整数型
    .成员 MinorImageVersion, 短整数型
    .成员 MajorSubsystemVersion, 短整数型
    .成员 MinorSubsystemVersion, 短整数型
    .成员 W32VersionValue, 整数型
    .成员 SizeOfImage, 整数型
    .成员 SizeOfHeaders, 整数型
    .成员 CheckSum, 整数型
    .成员 SubSystem, 短整数型
    .成员 DllCharacteristics, 短整数型
    .成员 SizeOfStackReserve, 整数型
    .成员 SizeOfStackCommit, 整数型
    .成员 SizeOfHeapReserve, 整数型
    .成员 SizeOfHeapCommit, 整数型
    .成员 LoaderFlags, 整数型
    .成员 NumberOfRvaAndSizes, 整数型
    .成员 DataDirectory, IMAGE_DATA_DIRECTORY, , "16"

.数据类型 IMAGE_FILE_HEADER
    .成员 Machine, 短整数型
    .成员 NumberOfSections, 短整数型
    .成员 TimeDateStamp, 整数型
    .成员 PointerToSymbolTable, 整数型
    .成员 NumberOfSymbols, 整数型
    .成员 SizeOfOptionalHeader, 短整数型
    .成员 characteristics, 短整数型

.数据类型 FLOATING_SAVE_AREA
    .成员 ControlWord, 整数型
    .成员 StatusWord, 整数型
    .成员 TagWord, 整数型
    .成员 ErrorOffset, 整数型
    .成员 ErrorSelector, 整数型
    .成员 DataOffset, 整数型
    .成员 DataSelector, 整数型
    .成员 RegisterArea, 字节型, , "80"
    .成员 Cr0NpxState, 整数型

.数据类型 IMAGE_SECTION_HEADER
    .成员 SecName, 字节型, , "8"
    .成员 VirtualSize, 整数型
    .成员 VirtualAddress, 整数型
    .成员 SizeOfRawData, 整数型
    .成员 PointerToRawData, 整数型
    .成员 PointerToRelocations, 整数型
    .成员 PointerToLinenumbers, 整数型
    .成员 NumberOfRelocations, 短整数型
    .成员 NumberOfLinenumbers, 短整数型
    .成员 characteristics, 整数型

.数据类型 CONTEXT86
    .成员 ContextFlags, 整数型
    .成员 Dr0, 整数型
    .成员 Dr1, 整数型
    .成员 Dr2, 整数型
    .成员 Dr3, 整数型
    .成员 Dr6, 整数型
    .成员 Dr7, 整数型
    .成员 FloatSave, FLOATING_SAVE_AREA
    .成员 SegGs, 整数型
    .成员 SegFs, 整数型
    .成员 SegEs, 整数型
    .成员 SegDs, 整数型
    .成员 Edi, 整数型
    .成员 Esi, 整数型
    .成员 Ebx, 整数型
    .成员 Edx, 整数型
    .成员 Ecx, 整数型
    .成员 Eax, 整数型
    .成员 Ebp, 整数型
    .成员 Eip, 整数型
    .成员 SegCs, 整数型
    .成员 EFlags, 整数型
    .成员 Esp, 整数型
    .成员 SegSs, 整数型

.数据类型 IMAGE_NT_HEADERS
    .成员 Signature, 整数型
    .成员 FileHeader, IMAGE_FILE_HEADER
    .成员 OptionalHeader, IMAGE_OPTIONAL_HEADER

.数据类型 IMAGE_DOS_HEADER
    .成员 e_magic, 短整数型
    .成员 e_cblp, 短整数型
    .成员 e_cp, 短整数型
    .成员 e_crlc, 短整数型
    .成员 e_cparhdr, 短整数型
    .成员 e_minalloc, 短整数型
    .成员 e_maxalloc, 短整数型
    .成员 e_ss, 短整数型
    .成员 e_sp, 短整数型
    .成员 e_csum, 短整数型
    .成员 e_ip, 短整数型
    .成员 e_cs, 短整数型
    .成员 e_lfarlc, 短整数型
    .成员 e_ovno, 短整数型
    .成员 e_res, 短整数型, , "4"
    .成员 e_oemid, 短整数型
    .成员 e_oeminfo, 短整数型
    .成员 e_res2, 短整数型, , "10"
    .成员 e_lfanew, 整数型

.数据类型 临界许可, 公开, 临界许可类
    .成员 标识, 整数型, , , DebugInfo 这个只要大于0就表示许可证存在
    .成员 LockCount, 整数型
    .成员 RecursionCount, 整数型
    .成员 OwningThread, 整数型
    .成员 LockSemaphore, 整数型
    .成员 SpinCount, 整数型

.数据类型 矩形信息, 公开
    .成员 左边, 整数型
    .成员 顶边, 整数型
    .成员 宽度, 整数型
    .成员 高度, 整数型

.数据类型 精易_详细信息, 公开, 用于存放解析的自绘窗口元素信息
    .成员 子窗口数, 文本型
    .成员 控件ID, 文本型
    .成员 控件描述, 文本型
    .成员 控件名称, 文本型
    .成员 控件状态, 文本型
    .成员 控件类型, 文本型
    .成员 控件值, 文本型
    .成员 窗口位置, 文本型
    .成员 矩形信息, 矩形信息
    .成员 默认动作, 文本型
    .成员 状态标识, 文本型
    .成员 类型标识, 文本型
    .成员 屏幕位置, 文本型
    .成员 窗口大小, 文本型

.数据类型 精易_鼠标移入移出事件, 公开
    .成员 句柄, 整数型
    .成员 消息钩子句柄, 整数型
    .成员 移入事件, 子程序指针
    .成员 移出事件, 子程序指针

.数据类型 物理字体属性信息_, , TEXTMETRIC
    .成员 tmHeight, 整数型
    .成员 tmAscent, 整数型
    .成员 tmDescent, 整数型
    .成员 tmInternalLeading, 整数型
    .成员 tmExternalLeading, 整数型
    .成员 tmAveCharWidth, 整数型
    .成员 tmMaxCharWidth, 整数型
    .成员 tmWeight, 整数型
    .成员 tmOverhang, 整数型
    .成员 tmDigitizedAspectX, 整数型
    .成员 tmDigitizedAspectY, 整数型
    .成员 tmFirstChar, 字节型
    .成员 tmLastChar, 字节型
    .成员 tmDefaultChar, 字节型
    .成员 tmBreakChar, 字节型
    .成员 tmItalic, 字节型
    .成员 tmUnderlined, 字节型
    .成员 tmStruckOut, 字节型
    .成员 tmPitchAndFamily, 字节型
    .成员 tmCharSet, 字节型

.数据类型 PROCESS_BASIC_INFORMATION, 公开
    .成员 ExitStatus, 整数型
    .成员 PebBaseAddress, 整数型
    .成员 AffinityMask, 整数型
    .成员 BasePriority, 整数型
    .成员 UniqueProcessId, 整数型
    .成员 InheritedFromUniqueProcessId, 整数型

.数据类型 Process_Memory_Counters, , 进程内存统计_
    .成员 结构大小, 整数型, , , cb
    .成员 页错误数量, 整数型, , , PageFaultCount
    .成员 最高工作设置大小, 整数型, , , PeakWorkingSetSize
    .成员 当前工作设置大小, 整数型, , , WorkingSetSize
    .成员 最高页使用, 整数型, , , QuotaPeakPagedPoolUsage
    .成员 当前页使用, 整数型, , , QuotaPagedPoolUsage
    .成员 最高非页使用, 整数型, , , QuotaPeakNonPagedPoolUsage
    .成员 当前非页使用, 整数型, , , QuotaPeakNonPagedPoolUsage
    .成员 页文件使用, 整数型, , , PagefileUsage
    .成员 最高页文件使用, 整数型, , , PeakPagefileUsage

.数据类型 MEMORY_BASIC_INFORMATION
    .成员 BaseAddress, 整数型, , , 指向页面区域基地址的指针。
    .成员 AllocationBase, 整数型, , , 指向VirtualAlloc函数分配的一系列页面的基地址的指针。BaseAddress成员指向的页面包含在此分配范围内。
    .成员 AllocationProtect, 整数型, , , 最初分配区域时的内存保护选项。如果调用者无权访问，则该成员可以是 内存保护常量之一或 0。
    .成员 RegionSize, 整数型, , , 从基地址开始的区域的大小，其中所有页面具有相同的属性，以字节为单位。
    .成员 State, 整数型, , , 区域中页面的状态。
    .成员 Protect, 整数型, , , 区域内页面的访问保护。此成员是为AllocationProtect成员列出的值之一。
    .成员 Type, 整数型, , , 区域中的页面类型。

.数据类型 SYSTEM_PROCESS_INFORMATION_ex
    .成员 dwNextEntryOffset, 整数型
    .成员 dwNumberOfThreads, 整数型
    .成员 qSpareLi1, 长整数型
    .成员 qSpareLi2, 长整数型
    .成员 qSpareLi3, 长整数型
    .成员 qCreateTime, 长整数型
    .成员 qUserTime, 长整数型
    .成员 qKernelTime, 长整数型
    .成员 ImageName, UNICODE_STRING
    .成员 nBasePriority, 整数型
    .成员 dwProcessId, 整数型
    .成员 dwInheritedFromUniqueProcessId, 整数型
    .成员 dwHandleCount, 整数型
    .成员 dwSessionId, 整数型
    .成员 dwSpareUl3, 长整数型
    .成员 tPeakVirtualSize, 整数型
    .成员 tVirtualSize, 整数型
    .成员 dwPageFaultCount, 整数型
    .成员 dwPeakWorkingSetSize, 整数型
    .成员 dwWorkingSetSize, 整数型
    .成员 tQuotaPeakPagedPoolUsage, 整数型
    .成员 tQuotaPagedPoolUsage, 整数型
    .成员 tQuotaPeakNonPagedPoolUsage, 整数型
    .成员 tQuotaNonPagedPoolUsage, 整数型
    .成员 tPagefileUsage, 整数型
    .成员 tPeakPagefileUsage, 整数型
    .成员 tPrivatePageCount, 整数型
    .成员 qReadOperationCount, 长整数型
    .成员 qWriteOperationCount, 长整数型
    .成员 qOtherOperationCount, 长整数型
    .成员 qReadTransferCount, 长整数型
    .成员 qWriteTransferCount, 长整数型
    .成员 qOtherTransferCount, 长整数型

.数据类型 PROCESS_BASIC_INFORMATION64
    .成员 ExitStatus, 整数型
    .成员 Reserved0, 整数型
    .成员 PebBaseAddress, 长整数型
    .成员 AffinityMask, 长整数型
    .成员 BasePriority, 整数型
    .成员 Reserved1, 整数型
    .成员 UniqueProcessId, 长整数型
    .成员 InheritedFromUniqueProcessId, 长整数型

.数据类型 PEB_LDR_DATA
    .成员 Reserved1, 整数型, , "6"
    .成员 Ldr, 长整数型
    .成员 ProcessParameters, 长整数型

.数据类型 RTL_USER_PROCESS_PARAMETERS, , 14 
    .成员 ImagePathName, UNICODE_STRING64, , , 16
    .成员 CommandLine, UNICODE_STRING64, , , 16

.数据类型 UNICODE_STRING64
    .成员 Length, 短整数型
    .成员 MaximumLength, 短整数型
    .成员 Reserved, 整数型, , , 占位符
    .成员 Buffer, 长整数型

.数据类型 LPMODULEENTRY32, , 模块信息
    .成员 size, 整数型
    .成员 mid, 整数型, , , 模块ID
    .成员 pid, 整数型, , , 进程ID
    .成员 gusage, 整数型, , , 全局引用数
    .成员 pusage, 整数型, , , 引用数
    .成员 base, 整数型, , , 模块基址
    .成员 bsize, 整数型, , , 模块大小
    .成员 hmodule, 整数型, , , 模块句柄
    .成员 szname, 字节型, , "256", 模块名
    .成员 szpath, 字节型, , "256", 模块路径

.数据类型 SHFILEINFO
    .成员 hIcon
    .成员 iIcon
    .成员 dwAttributes
    .成员 szDisplayName, 字节型, , "260"
    .成员 szTypeName, 字节型, , "80"

.数据类型 struct
    .成员 hwnd, 整数型
    .成员 message, 整数型
    .成员 wParam, 整数型
    .成员 lParam, 整数型
    .成员 time, 整数型
    .成员 pt, 整数型

.数据类型 INTERNET_CACHE_ENTRY_INFO
    .成员 dwStructSize, 整数型, , "1", 结构尺寸
    .成员 lpszSourceUrlName, 文本型, , , url
    .成员 lpszLocalFileName, 文本型, , , 路径文件名
    .成员 CacheEntryType, 整数型, , ,  ？65是什么
    .成员 dwUseCount, 整数型, , , 缓存条目
    .成员 dwHitRate, 整数型, , , 已访问次数
    .成员 dwSizeLow, 整数型, , , 缓存文件大小
    .成员 dwSizeHigh, 整数型
    .成员 LastModifiedTime, 长整数型, , , 最后修改时间
    .成员 ExpireTime, 长整数型, , , 到期时间
    .成员 LastAccessTime, 长整数型, , , 上次访问的时间
    .成员 LastSyncTime, 长整数型, , , 最后一次缓存时间
    .成员 lpHeaderInfo, 文本型, , , 地址缓冲包含标题信息
    .成员 dwHeaderInfoSize, 整数型, , , lpHeaderInfo缓冲区大小
    .成员 lpszFileExtension, 文本型, , , 地址的一个字符串
    .成员 dwReserved, 整数型, , , 0 保留
    .成员 dwExemptDelta, 整数型, , , 访问间隔？

.数据类型 LARGE_INTEGER, , 长整数型_;
    .成员 lowpart, 整数型
    .成员 highpart, 整数型

.数据类型 INTERNET_PROXY_INFO, , 代理服务器信息
    .成员 dwAccessType, 整数型
    .成员 lpszProxy, 文本型
    .成员 lpszProxyBypass, 文本型

.数据类型 SERVICE_DESCRIPTION, , 服务描述结构
    .成员 lpDescription, 文本型

.数据类型 SERVICE_Table, , 服务表结构
    .成员 lpServiceName, 整数型
    .成员 lpServiceProc, 整数型

.数据类型 QUERY_SERVICE_CONFIG, , 服务的配置信息。
    .成员 dwServiceType, 整数型, , , 4
    .成员 dwStartType, 整数型, , , 4
    .成员 dwErrorControl, 整数型, , , 4
    .成员 lpBinaryPathName
    .成员 lpLoadOrderGroup
    .成员 dwTagId, 整数型, , , 4
    .成员 lpDependencies
    .成员 lpServiceStartName
    .成员 lpDisplayName

.数据类型 SERVICE_STATUS, , 服务状态结构
    .成员 dwServiceType, 整数型
    .成员 dwCurrentState, 整数型
    .成员 dwControlsAccepted, 整数型
    .成员 dwWin32ExitCode, 整数型
    .成员 dwServiceSpecificExitCode, 整数型
    .成员 dwCheckPoint, 整数型
    .成员 dwWaitHint, 整数型

.数据类型 SHFILEOPSTRUCT
    .成员 hwnd, 整数型
    .成员 wFunc, 整数型, , , #FO_
    .成员 pFrom, 字节集
    .成员 pTo, 字节集
    .成员 fFlags, 短整数型, , , #FOF_
    .成员 fAnyOperationsAborted, 整数型
    .成员 hNameMappings, 整数型
    .成员 lpszProgressTitle, 整数型

.数据类型 地址信息
    .成员 地址, 文本型
    .成员 端口, 整数型

.数据类型 客户信息, 公开
    .成员 IP, 文本型
    .成员 端口, 短整数型
    .成员 句柄, 整数型

.数据类型 fd_set
    .成员 fd_count, 整数型
    .成员 fd_array, 整数型

.数据类型 套接字地址, 公开, sockaddr
    .成员 常量, 短整数型, , , sin_family
    .成员 端口, 短整数型, , , sin_port
    .成员 地址, 整数型, , , sin_addr
    .成员 地址范围, 字节型, , "8", sin_zero

.数据类型 套接字信息, 公开, WSADataType
    .成员 版本, 短整数型, , , wVersion
    .成员 高版本, 短整数型, , , wHighVersion
    .成员 种类, 字节型, , "257", * WSA_DescriptionSize
    .成员 系统状态, 字节型, , "129", * WSA_SysStatusSize
    .成员 最大套接字, 短整数型, , , iMaxSockets
    .成员 最大Udp, 短整数型, , , iMaxUdpDg
    .成员 信息, 整数型, , , lpVendorInfo

.数据类型 按钮信息, , 显示或隐藏任务栏指定按钮
    .成员 cbSize, 整数型, , , 32
    .成员 dwMask, 整数型
    .成员 idCommand, 整数型
    .成员 iImage, 整数型
    .成员 fsState, 字节型
    .成员 fsStyle, 字节型
    .成员 cx, 短整数型
    .成员 lParam, 整数型
    .成员 pszText, 整数型
    .成员 cchText, 整数型

.数据类型 IDE, , 取磁盘信息
    .成员 bFeaturesReg, 字节型
    .成员 bSectorCountReg, 字节型
    .成员 bSectorNumberReg, 字节型
    .成员 bCylLowReg, 字节型
    .成员 bCylHighReg, 字节型
    .成员 bDriveHeadReg, 字节型
    .成员 bCommandReg, 字节型

.数据类型 SCIP, , 取磁盘信息
    .成员 cBufferSize, 整数型
    .成员 irDriveRegs, IDE
    .成员 bDriveNumber, 字节型
    .成员 bReserved, 字节型, , "3"
    .成员 dwReserved, 整数型, , "4"
    .成员 bBuffer, 字节型, , "1"

.数据类型 精易_磁盘信息, 公开
    .成员 型号, 文本型
    .成员 序列号, 文本型
    .成员 固件版本, 文本型

.数据类型 项目数据, 公开, 树型框操作类
    .成员 项目文本, 文本型, , , 项目文本
    .成员 图片索引, 整数型, , , 图象
    .成员 选中图片索引, 整数型, , , 选择图象
    .成员 项目数值, 整数型, , , 项目数值
    .成员 是否加粗, 逻辑型
    .成员 项目句柄, 长整数型, 传址

.数据类型 树型框结构, , 树型框操作类
    .成员 项目文本, 文本型
    .成员 图片索引, 整数型
    .成员 选中图片索引, 整数型
    .成员 项目数值, 整数型
    .成员 加粗扩展, 整数型, , , 0、普通，1、加粗，2、扩展，3、加粗+扩展
    .成员 缩进层次, 整数型

.数据类型 TVITEMEX, , 树型框操作类
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 文本型, 传址, , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

.数据类型 TVITEMEX2, , 树型框操作类
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 整数型, , , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

.数据类型 TVINSERTSTRUCT, , 树型框操作类
    .成员 hParent, 整数型, , , 父
    .成员 hInsertAfter, 整数型, , , 插入标志
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 文本型, 传址, , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

.数据类型 TVINSERTSTRUCT2, , 树型框操作类
    .成员 hParent, 整数型, , , 父
    .成员 hInsertAfter, 整数型, , , 插入标志
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 整数型, , , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

.数据类型 内存映射数据9X
    .成员 映射文件号, 整数型
    .成员 指针, 整数型

.数据类型 线程许可证, 公开
    .成员 调试信息, 整数型
    .成员 锁计数, 整数型
    .成员 递归计数, 整数型
    .成员 拥有线程, 整数型
    .成员 锁信号量, 整数型
    .成员 自旋数, 整数型

.数据类型 剪贴板_置文件
    .成员 pFiles, 整数型
    .成员 pt, 精易_坐标
    .成员 fNC, 整数型
    .成员 fWide, 整数型

.数据类型 取硬盘特征号0, , 33-1
    .成员 cBufferSize, 整数型
    .成员 bFeaturesReg, 字节型, , , IDEREGS_Begin
    .成员 bSectorCountReg, 字节型
    .成员 bSectorNumberReg, 字节型
    .成员 bCylLowReg, 字节型
    .成员 bCylHighReg, 字节型
    .成员 bDriveHeadReg, 字节型
    .成员 bCommandReg, 字节型
    .成员 bReserved1, 字节型, , , IDEREGS_End
    .成员 bDriveNumber, 字节型
    .成员 bReserved, 字节型, , "3"
    .成员 dwReserved, 整数型, , "4"
    .成员 bBuffer, 字节型

.数据类型 取硬盘特征号1, , 24
    .成员 bVersion, 字节型
    .成员 bRevision, 字节型
    .成员 bReserved, 字节型
    .成员 bIDEDeviceMap, 字节型
    .成员 fCapabilities, 整数型
    .成员 dwReserved, 整数型, , "4"

.数据类型 取硬盘特征号2, , 28+33-1
    .成员 HeaderLength, 整数型
    .成员 Signature, 字节型, , "8"
    .成员 Timeout, 整数型
    .成员 ControlCode, 整数型
    .成员 ReturnCode, 整数型
    .成员 Length, 整数型
    .成员 cBufferSize, 整数型, , , SENDCMDINPARAMS_Begin
    .成员 bFeaturesReg, 字节型, , , IDEREGS_Begin
    .成员 bSectorCountReg, 字节型
    .成员 bSectorNumberReg, 字节型
    .成员 bCylLowReg, 字节型
    .成员 bCylHighReg, 字节型
    .成员 bDriveHeadReg, 字节型
    .成员 bCommandReg, 字节型
    .成员 bReserved1, 字节型, , , IDEREGS_End
    .成员 bDriveNumber, 字节型
    .成员 bReserved, 字节型, , "3"
    .成员 dwReserved, 整数型, , "4"
    .成员 bBuffer, 字节型, , , SENDCMDINPARAMS_End

.数据类型 取硬盘特征号3, , 256
    .成员 wGenConfig, 短整数型
    .成员 wNumCyls, 短整数型
    .成员 wReserved, 短整数型
    .成员 wNumHeads, 短整数型
    .成员 wBytesPerTrack, 短整数型
    .成员 wBytesPerSector, 短整数型
    .成员 wSectorsPerTrack, 短整数型
    .成员 wVendorUnique, 短整数型, , "3"
    .成员 sSerialNumber, 字节型, , "20"
    .成员 wBufferType, 短整数型
    .成员 wBufferSize, 短整数型
    .成员 wECCSize, 短整数型
    .成员 sFirmwareRev, 字节型, , "8"
    .成员 sModelNumber, 字节型, , "40"
    .成员 wMoreVendorUnique, 短整数型
    .成员 wDoubleWordIO, 短整数型
    .成员 wCapabilities, 短整数型
    .成员 wReserved1, 短整数型
    .成员 wPIOTiming, 短整数型
    .成员 wDMATiming, 短整数型
    .成员 wBS, 短整数型
    .成员 wNumCurrentCyls, 短整数型
    .成员 wNumCurrentHeads, 短整数型
    .成员 wNumCurrentSectorsPerTrack, 短整数型
    .成员 ulCurrentSectorCapacity, 整数型
    .成员 wMultSectorStuff, 短整数型
    .成员 ulTotalAddressableSectors, 整数型
    .成员 wSingleWordDMA, 短整数型
    .成员 wMultiWordDMA, 短整数型
    .成员 bReserved, 字节型, , "128"

.数据类型 GdiplusStartupInput
    .成员 GdiplusVersion, 整数型
    .成员 DebugEventCallback, 整数型
    .成员 SuppressBackgroundThread, 整数型
    .成员 SuppressExternalCodecs, 整数型

.数据类型 BLENDFUNCTION
    .成员 BlendOp, 字节型
    .成员 BlendFlags, 字节型
    .成员 SourceConstantAlpha, 字节型
    .成员 AlphaFormat, 字节型

.数据类型 Size, , 尺寸;
    .成员 cx, 整数型
    .成员 cy, 整数型

.数据类型 BITMAPINFO
    .成员 BITMAPINFOHEADER, BITMAPINFOHEADER
    .成员 bmiColors, 整数型, , , RGBQUAD          bmiColors[1]; 

.数据类型 BITMAPINFOHEADER
    .成员 biSize, 整数型
    .成员 biWidth, 整数型
    .成员 biHeight, 整数型
    .成员 biPlanes, 短整数型
    .成员 biBitCount, 短整数型
    .成员 biCompression, 整数型
    .成员 biSizeImage, 整数型
    .成员 biXPelsPerMeter, 整数型
    .成员 biYPelsPerMeter, 整数型
    .成员 biClrUsed, 整数型
    .成员 biClrImportant, 整数型

.数据类型 BITMAPFILEHEADER
    .成员 bfType, 短整数型
    .成员 bfSize, 整数型
    .成员 bfReserved1, 短整数型
    .成员 bfReserved2, 短整数型
    .成员 bfOffBits, 整数型

.数据类型 BITMAP
    .成员 bmType, 整数型
    .成员 bmWidth, 整数型
    .成员 bmHeight, 整数型
    .成员 bmWidthBytes, 整数型
    .成员 bmPlanes, 短整数型
    .成员 bmBitsPixel, 短整数型
    .成员 bmBits, 整数型, 传址

.数据类型 位图信息_, , 位图信息_
    .成员 结果大小, 整数型, , , biSize
    .成员 位图宽度, 整数型, , , biWidth
    .成员 位图高度, 整数型, , , biHeight
    .成员 位图位面数, 短整数型, , , biPlanes
    .成员 位深度, 短整数型, , , biBitCount
    .成员 压缩率, 整数型, , , biCompression
    .成员 位图大小, 整数型, , , biSizeImage
    .成员 水平折像度, 整数型, , , biXPelsPerMeter
    .成员 垂直折像度, 整数型, , , biYPelsPerMeter
    .成员 位图颜色表索引, 整数型, , , biClrUsed
    .成员 位图显示索引, 整数型, , , biClrImportant
    .成员 蓝色值, 字节型, , , rgbBlue
    .成员 绿色值, 字节型, , , rgbGreen
    .成员 红色值, 字节型, , , rgbRed
    .成员 保留参数, 字节型, , , rgbReserved

.数据类型 _验证码取图, , 设备无关位图;
    .成员 biSize, 整数型, , , 40
    .成员 biWidth, 整数型, , , btm.bmWidth
    .成员 biHeight, 整数型, , , btm.bmHeight
    .成员 biPlanes, 短整数型, , , 1
    .成员 biBitCount, 短整数型, , , btm.bmBitsPixel
    .成员 biCompression, 整数型, , , 0
    .成员 biSizeImage, 整数型, , , (btm.bmWidth*24+31)/8*btm.bmHeight
    .成员 biXPelsPerMeter, 整数型, , , 0
    .成员 biYPelsPerMeter, 整数型, , , 0
    .成员 biClrUsed, 整数型, , , 0 24色取0
    .成员 biClrImportant, 整数型, , , 0

.数据类型 超级列表框0
    .成员 掩码, 整数型
    .成员 项目, 整数型
    .成员 子项目, 整数型
    .成员 状态, 整数型
    .成员 状态掩码, 整数型
    .成员 项目文本, 文本型, 传址
    .成员 项目文本长度, 整数型
    .成员 图片索引, 整数型
    .成员 项目数值, 整数型
    .成员 缩进, 整数型

.数据类型 超级列表框1
    .成员 掩码, 整数型
    .成员 表项索引, 整数型
    .成员 子项目, 整数型
    .成员 状态, 整数型
    .成员 状态掩码, 整数型
    .成员 项目文本, 整数型
    .成员 项目文本长度, 整数型
    .成员 图片索引, 整数型
    .成员 项目数值, 整数型
    .成员 缩进, 整数型

.数据类型 列表框信息, 公开
    .成员 标题, 文本型, 传址, , 本参数指定表项的标题文本(也即是第0列的标题)。
    .成员 图片索引, 整数型, , , 图片索引用于指定“图片组”属性中的某张图片。索引值从 0 开始，-1 表示无图片。
    .成员 状态图片索引, 整数型, , , 状态图片索引用于指定“状态图片组”属性中的某张图片。索引值从 0 开始，-1 表示无图片。
    .成员 表项数值, 整数型, , , 该数值与指定表项相关联。
    .成员 缩进数目, 整数型, , , “缩进数目”仅在报表型列表框才有效，用作指定显示时在表项首部增加的空白数。
    .成员 列标题, 文本型, , "1", 从第1列开始计起的列标题，多列请按列索引次序依次写到相应的数组成员中
    .成员 列图片索引, 整数型, , "1", 从第1列开始计起，可以被省略。图片索引用于指定“图片组”属性中的某张图片。索引值从 0 开始，-1 表示无图片。如果本参数被省略，默认值为 -1 。

.数据类型 超级列表框3
    .成员 flags, 整数型, , , 查找类型常量
    .成员 LPCTSTR, 文本型, 传址, , LVFI_STRING or LVFI_PARTIAL 才能有效
    .成员 lParam, 整数型, , , LVFI_PARAM 才能有效
    .成员 pt, 精易_坐标, 传址, , LVFI_NEARESTXY 才能有效
    .成员 vkDirection, 整数型, , , 查找热键常量，LVFI_NEARESTXY 才能有效

.数据类型 超级列表框4
    .成员 flags, 整数型, , , 查找类型常量
    .成员 LPCTSTR, 整数型, , , LVFI_STRING or LVFI_PARTIAL 才能有效
    .成员 lParam, 整数型, , , LVFI_PARAM 才能有效
    .成员 pt, 整数型, , , LVFI_NEARESTXY 才能有效
    .成员 vkDirection, 整数型, , , 查找热键常量，LVFI_NEARESTXY 才能有效

.数据类型 超级列表框5
    .成员 ulFlags, 整数型
    .成员 hbm, 整数型, , , 没有使用,置0
    .成员 图片路径, 文本型, 传址
    .成员 最大长度, 整数型
    .成员 xOffsetPercent, 整数型, , , X补偿百分比
    .成员 yOffsetPercent, 整数型, , , Y补偿百分比

.数据类型 超级列表框6
    .成员 ulFlags, 整数型
    .成员 hbm, 整数型, , , 没有使用,置0
    .成员 pszImage, 整数型, , , 图片路径
    .成员 cchImageMax, 整数型, , , 最大长度
    .成员 xOffsetPercent, 整数型, , , X补偿百分比
    .成员 yOffsetPercent, 整数型, , , Y补偿百分比

.数据类型 超级列表框7
    .成员 mask, 整数型
    .成员 对齐方式, 整数型
    .成员 列宽度, 整数型
    .成员 列标题, 文本型, 传址
    .成员 缓冲区长度, 整数型
    .成员 列索引, 整数型
    .成员 列图标, 整数型
    .成员 iOrder, 整数型

.数据类型 超级列表框8
    .成员 mask, 整数型
    .成员 对齐方式, 整数型
    .成员 列宽度, 整数型
    .成员 列标题, 整数型
    .成员 缓冲区长度, 整数型
    .成员 列索引, 整数型
    .成员 列图标, 整数型
    .成员 iOrder, 整数型

.数据类型 精易_颜色对话框, 公开
    .成员 长度, 整数型
    .成员 窗口句柄, 整数型
    .成员 hInstance, 整数型
    .成员 rgbResult, 整数型
    .成员 颜色数长度, 文本型
    .成员 lCustData, 整数型
    .成员 lpfnHook, 整数型
    .成员 lpTemplateName, 文本型

.数据类型 查找的文件信息
    .成员 dwFileAttributes, 整数型
    .成员 ftCreationTime, FILETIME
    .成员 ftLastAccessTime, FILETIME
    .成员 ftLastWriteTime, FILETIME
    .成员 nFileSizeHigh, 整数型
    .成员 nFileSizeLow, 整数型
    .成员 dwReserved0, 整数型
    .成员 dwReserved1, 整数型
    .成员 cFileName, 字节型, , "260"
    .成员 cAlternate, 字节型, , "14"

.数据类型 FILETIME, 公开
    .成员 dwLowDateTime, 整数型
    .成员 dwHighDateTime, 整数型

.数据类型 精易_任务相关
    .成员 cbSize, 整数型
    .成员 hwnd, 整数型
    .成员 uCallbackMessage, 整数型
    .成员 uEdge, 整数型
    .成员 rc, 精易_矩形
    .成员 lParam, 整数型

.数据类型 TOKEN_PRIVILEGES
    .成员 PrivilegeCount, 整数型
    .成员 LowPart, 整数型
    .成员 HighPart, 整数型
    .成员 Attributes, 整数型

.数据类型 LUID
    .成员 LowPart, 整数型
    .成员 HighPart, 整数型

.数据类型 精易_模块信息, 公开, 进程模块信息
    .成员 size, 整数型, , , 1
    .成员 mid, 整数型, , , 模块ID
    .成员 pid, 整数型, , , 进程ID
    .成员 gusage, 整数型, , , 全局引用数
    .成员 pusage, 整数型, , , 引用数
    .成员 base, 整数型, , , 模块基址
    .成员 大小, 整数型, , , 模块大小
    .成员 模块句柄, 整数型, , , 模块句柄
    .成员 模块文件名, 字节型, , "256", 模块名
    .成员 模块完整路径, 字节型, , "256", 模块路径

.数据类型 精易_热键信息
    .成员 窗口句柄, 整数型
    .成员 热键ID
    .成员 回调函数, 整数型

.数据类型 光驱相关1
    .成员 dwCallback, 整数型
    .成员 wDeviceID, 整数型
    .成员 lpstrDeviceType, 文本型
    .成员 lpstrElementName, 文本型
    .成员 lpstrAlias, 整数型

.数据类型 光驱相关2
    .成员 dwCallback, 整数型
    .成员 dwTimeFormat, 整数型
    .成员 dwAudio, 整数型

.数据类型 精易_进程信息, 公开
    .成员 进程ID, 整数型
    .成员 进程名, 文本型
    .成员 进程全路径名, 文本型

.数据类型 精易_进程结构, 公开
    .成员 进程句柄, 整数型, , , hProcess
    .成员 线程句柄, 整数型, , , hThread
    .成员 进程标识符, 整数型, , , dwProcessId
    .成员 线程标识符, 整数型, , , dwThreadId

.数据类型 精易_窗口信息, 公开
    .成员 窗口句柄, 整数型
    .成员 进程ID, 整数型
    .成员 线程ID, 整数型
    .成员 窗口标题, 文本型
    .成员 窗口类名, 文本型

.数据类型 精易_进程信息数组, 公开
    .成员 进程标识符, 整数型, , , 初始值为 0 。
    .成员 进程名称, 文本型, , , 初始值为“”。
    .成员 进程模块标识符, 整数型, , , 初始值为 0 。
    .成员 父进程标识符, 整数型, , , 初始值为 0 。
    .成员 线程优先权, 整数型, , , 初始值为 0 。
    .成员 线程数, 整数型, , , 初始值为 0 。

.数据类型 精易_进程信息列表, 公开, PROCESSENTRY32
    .成员 dwSize, 整数型, , , 1
    .成员 cntUsage, 整数型, , , 2
    .成员 进程ID, 整数型, , , 3
    .成员 th32DefaultHeapID, 整数型, , , 4
    .成员 th32ModuleID, 整数型, , , 5
    .成员 cntThreads, 整数型, , , 6
    .成员 th32ParentProcessID, 整数型, , , 7
    .成员 pcPriClassBase, 整数型, , , 8
    .成员 dwFlags, 整数型, , , 9
    .成员 进程名称, 字节型, , "260", 10

.数据类型 PGUITHREADINFO
    .成员 cbSize, 整数型
    .成员 flags, 整数型
    .成员 hwndActive, 整数型
    .成员 hwndFocus, 整数型
    .成员 hwndCapture, 整数型
    .成员 hwndMenuOwner, 整数型
    .成员 hwndMoveSize, 整数型
    .成员 hwndCaret, 整数型
    .成员 rcCaret, 精易_矩形

.数据类型 线程入口结构
    .成员 结构大小, 整数型, , , 注意！请先初始化！
    .成员 引用线程数, 整数型, , , 请传0
    .成员 线程ID, 整数型
    .成员 父进程ID, 整数型
    .成员 优先级, 整数型
    .成员 更改的优先级, 整数型
    .成员 保留, 整数型

.数据类型 MSG
    .成员 hwnd, 整数型
    .成员 message, 整数型
    .成员 wParam, 整数型
    .成员 lParam, 整数型
    .成员 time, 整数型
    .成员 pt, 精易_坐标

.数据类型 点阵型
    .成员 x, 整数型
    .成员 y, 整数型
    .成员 z, 整数型

.数据类型 精易_坐标, 公开
    .成员 横, 整数型, , , 横X
    .成员 纵, 整数型, , , 纵Y

.数据类型 点阵, 公开
    .成员 点, 整数型, , "1", 低16位X,高16位Y

.数据类型 精易_位置和大小, 公开
    .成员 左边, 整数型, , , 左边，相当于左上角的x
    .成员 顶边, 整数型, , , 顶边，相当于左上角的y
    .成员 宽度, 整数型, , , 窗口的宽度
    .成员 高度, 整数型, , , 窗口的高度

.数据类型 精易_矩形, 公开
    .成员 左边, 整数型, , , 左边，相当于左上角的x
    .成员 顶边, 整数型, , , 顶边，相当于左上角的y
    .成员 右边, 整数型, , , 右边，相当于右下角的x
    .成员 底边, 整数型, , , 底边，相当于右下角的y

.数据类型 表项结构信息, 公开
    .成员 横向, 整数型
    .成员 纵向, 整数型
    .成员 flags, 整数型
    .成员 行, 整数型
    .成员 列, 整数型

.数据类型 精易_内存属性, 公开, MEMORY_BASIC_INFORMATION
    .成员 区域地址, 整数型, , , BaseAddress
    .成员 分配地址, 整数型, , , AllocationBase
    .成员 初始属性, 整数型, , , AllocationProtect
    .成员 区域长度, 整数型, , , RegionSize
    .成员 保留值, 整数型, , , 已提交值,保留值,自由值State
    .成员 当前属性, 整数型, , , Protect
    .成员 页类型, 整数型, , , lType

.数据类型 程序延时
    .成员 成员_时间, 长整数型, , , 占用8个字节

.数据类型 ADSL拨号0
    .成员 结构的大小, 整数型, , , 该结构的大小（以字节为单位）
    .成员 访问的入口名, 字节型, , "257", 表示一个远程访问的入口名,拨号网络中的连接图标小的文字,空表示仅与第一个有效的MODEM建立远程连接
    .成员 呼叫的号码, 字节型, , "129", 表示呼叫的号码,szEntryName为空时,该元素不能为空
    .成员 回叫号码, 字节型, , "129", 表示回叫号码,一般都设为空
    .成员 指定用户名称, 字节型, , "257", 指定用户名称
    .成员 指定用户密码, 字节型, , "257", 指定用户密码
    .成员 指定域, 字节型, , "16", 指定域

.数据类型 取连接信息用结构, , ADSL拨号1
    .成员 内存大小, 整数型, , , 该结构占内存大小
    .成员 拨号连接名称, 字节型, , "255", 拨号连接名称
    .成员 缓冲区的大小, 字节型, , , 缓冲区的大小
    .成员 连接的个数, 文本型, , , 实际的连接的个数

.数据类型 ADSL拨号2
    .成员 data1, 整数型
    .成员 data2, 短整数型
    .成员 data3, 短整数型
    .成员 data4, 字节型, , "8"

.数据类型 ADSL拨号3
    .成员 a, 字节型
    .成员 b, 字节型
    .成员 c, 字节型
    .成员 d, 字节型

.数据类型 LSA_UNICODE_STRING
    .成员 长度, 短整数型
    .成员 最大长度, 短整数型
    .成员 缓冲区, 字节集

.数据类型 创建连接所用结构, , ADSL拨号4
    .成员 dwSize, 整数型
    .成员 dwfOptions, 整数型
    .成员 dwCountryID, 整数型
    .成员 dwCountryCode, 整数型
    .成员 szAreaCode, 字节型, , "8"
    .成员 szLocalPhoneNumber, 字节型, , "132"
    .成员 dwAlternateOffset, 整数型
    .成员 ipaddr, ADSL拨号3
    .成员 ipaddrDns, ADSL拨号3
    .成员 dbury, ADSL拨号3
    .成员 ipaddrWins, ADSL拨号3
    .成员 ipaddrWinsAlt, ADSL拨号3
    .成员 dwFrameSize, 整数型
    .成员 hr57hfb, 整数型
    .成员 dwFramingProtocol, 整数型
    .成员 szScript, 字节型, , "260"
    .成员 szAutodialDll, 字节型, , "260"
    .成员 d75hdrb, 字节型, , "260"
    .成员 szDeviceType, 字节型, , "16"
    .成员 szDeviceName, 字节型, , "132"
    .成员 szX25PadType, 字节型, , "32"
    .成员 sd5h7rd, 字节型, , "200"
    .成员 szX25Facilities, 字节型, , "200"
    .成员 szX25UserData, 字节型, , "204"
    .成员 dwChannels, 整数型
    .成员 sd5rybh, 整数型
    .成员 dwReserved2, 整数型
    .成员 dwSubEntries, 整数型
    .成员 dwDialMode, 整数型
    .成员 dwDialExtraPercent, 整数型
    .成员 dbh5uy, 整数型
    .成员 dwHangUpExtraPercent, 整数型
    .成员 dwHangUpExtraSampleSeconds, 整数型
    .成员 dburgy, 整数型
    .成员 dwType, 整数型
    .成员 sdr5uyhbd, 整数型
    .成员 dwCustomAuthKey, 整数型
    .成员 guidId, ADSL拨号2
    .成员 szCustomDialDll, 字节型, , "260"
    .成员 sbyhrs, 整数型
    .成员 dwfOptions2, 整数型
    .成员 dwfOptions3, 整数型
    .成员 szDnsSuffix, 字节型, , "256"
    .成员 dwTcpWindowSize, 整数型
    .成员 szPrerequisitePbk, 字节型, , "260"
    .成员 szPrerequisiteEntry, 字节型, , "260"
    .成员 dwRedialCount, 整数型
    .成员 dwRedialPause, 整数型

.数据类型 设置拨号所以结构, , ADSL拨号5
    .成员 dsubr, 整数型, , , 该结构的大小（以字节为单位）
    .成员 dwMask, 整数型
    .成员 szUserName, 字节型, , "257"
    .成员 szPassword, 字节型, , "257"
    .成员 szDomain, 字节型, , "16"

.数据类型 IP_ADAPTER_INFO
    .成员 Next, 整数型
    .成员 ComboIndex, 整数型
    .成员 AdapterName, 字节型, , "260", 名称
    .成员 Description, 字节型, , "132", 描述
    .成员 AddressLength, 整数型
    .成员 Address, 字节型, , "8"
    .成员 Index, 整数型
    .成员 Type, 整数型, , , 类型
    .成员 DhcpEnabled, 整数型
    .成员 CurrentIpAddress, 整数型
    .成员 IpAddressList, IP_ADDR_STRING
    .成员 GatewayList, IP_ADDR_STRING
    .成员 DhcpServer, IP_ADDR_STRING
    .成员 HaveWins, 逻辑型
    .成员 PrimaryWinsServer, IP_ADDR_STRING
    .成员 SecondaryWinsServer, IP_ADDR_STRING
    .成员 LeaseObtained, 整数型
    .成员 LeaseExpires, 整数型

.数据类型 IP_PER_ADAPTER_INFO_彗星
    .成员 AutoconfigEnabled, 整数型, , , UINT。AutoconfigEnabled
    .成员 AutoconfigActive, 整数型, , , UINT。AutoconfigActive
    .成员 CurrentDnsServer, 整数型, , , PIP_ADDR_STRING。CurrentDnsServer
    .成员 DnsServerList, IP_ADDR_STRING, , , IP_ADDR_STRING。DnsServerList

.数据类型 IP_PER_ADAPTER_INFO
    .成员 tmp, 整数型, , "3"
    .成员 CurrentDnsServer, IP_ADDR_STRING
    .成员 DnsServerList, IP_ADDR_STRING

.数据类型 OPENFILENAME, 公开, 打开文件名结构
    .成员 结构大小, 整数型, , , win2k以上为88，以下为76  1
    .成员 窗口句柄, 整数型, , , 2
    .成员 实例句柄, 整数型, , , 3
    .成员 过滤器, 字节集, , , 4
    .成员 自定义过滤器, 文本型, , , 5
    .成员 自定义过滤器最大长度, 整数型, , , 6
    .成员 过滤器索引, 整数型, , , 7
    .成员 文件名, 字节集, , , 8
    .成员 文件名最大长度, 整数型, , , 9
    .成员 文件标题, 文本型, , , 10
    .成员 文件标题最大长度, 整数型, , , 11
    .成员 初始目录, 文本型, , , 12
    .成员 标题, 文本型, , , 13
    .成员 标志, 整数型, , , 14
    .成员 文件偏移量, 短整数型, , , 15
    .成员 文件扩展名, 短整数型, , , 16
    .成员 默认扩展名, 文本型, , , 17
    .成员 自定义数据, 整数型, , , 18
    .成员 回调函数地址, 整数型, , , 19
    .成员 模板名, 整数型, , , 20

.数据类型 PNG窗口类数据结构_1
    .成员 PNG窗口类数据结构_成员C7, 整数型
    .成员 PNG窗口类数据结构_成员C8, 整数型
    .成员 PNG窗口类数据结构_成员C9, 整数型
    .成员 PNG窗口类数据结构_成员CA, 整数型

.数据类型 PNG窗口类数据结构_2
    .成员 PNG窗口类数据结构_成员CB, 整数型
    .成员 PNG窗口类数据结构_成员CC, 整数型
    .成员 PNG窗口类数据结构_成员CD, 整数型
    .成员 PNG窗口类数据结构_成员CE, 整数型

.数据类型 HP_TNVPair, 公开, 描述：字符串名值对结构体
    .成员 名称, 文本型
    .成员 值, 文本型

.数据类型 HP_WSABUF, 公开
    .成员 len, 整数型
    .成员 buf, 字节集

.数据类型 HP_TIPAddr, 公开, IP 地址条目结构体
    .成员 type, 整数型, , , #IPT_ 开头常量
    .成员 address, 文本型

.数据类型 HP_TSocketTask, 公开, Socket 任务结构体,封装 Socket 任务相关数据结构
    .成员 任务入口函数, 整数型, , , 任务入口函数
    .成员 通信句柄, 整数型, , , 发起对象的通信句柄
    .成员 连接ID, 整数型, , , 连接ID
    .成员 数据指针, 整数型, , , 数据缓冲区
    .成员 数据长度, 整数型, , , 数据缓冲区长度
    .成员 数据类型, 逻辑型, , , 缓冲区类型
    .成员 自定义参数1, 整数型, , , 自定义参数
    .成员 自定义参数2, 整数型, , , 自定义参数

.数据类型 HP_SYSTEM_INFO
    .成员 dwOemID, 整数型
    .成员 dwPageSize, 整数型
    .成员 lpMinimumApplicationAddress, 整数型
    .成员 lpMaximumApplicationAddress, 整数型
    .成员 dwActiveProcessorMask, 整数型
    .成员 dwNumberOrfProcessors, 整数型
    .成员 dwProcessorType, 整数型
    .成员 dwAllocationGranularity, 整数型
    .成员 dwReserved, 整数型

.数据类型 PNG窗口类数据结构_3
    .成员 PNG窗口类数据结构_成员CF, 整数型
    .成员 PNG窗口类数据结构_成员D0, 整数型
    .成员 PNG窗口类数据结构_成员D1, 整数型
    .成员 PNG窗口类数据结构_成员D2, 短整数型
    .成员 PNG窗口类数据结构_成员D3, 短整数型
    .成员 PNG窗口类数据结构_成员D4, 整数型
    .成员 PNG窗口类数据结构_成员D5, 整数型
    .成员 PNG窗口类数据结构_成员D6, 整数型
    .成员 PNG窗口类数据结构_成员D7, 整数型
    .成员 PNG窗口类数据结构_成员D8, 整数型
    .成员 PNG窗口类数据结构_成员D9, 整数型
    .成员 PNG窗口类数据结构_成员DA, 字节型
    .成员 PNG窗口类数据结构_成员DB, 字节型
    .成员 PNG窗口类数据结构_成员DC, 字节型
    .成员 PNG窗口类数据结构_成员DD, 字节型

.数据类型 PNG窗口类数据结构_4
    .成员 PNG窗口类数据结构_成员DE, 整数型
    .成员 PNG窗口类数据结构_成员DF, 整数型

.数据类型 PNG窗口类数据结构_5
    .成员 PNG窗口类数据结构_成员E0, 整数型
    .成员 PNG窗口类数据结构_成员E1, 整数型

.数据类型 PNG窗口类数据结构_6
    .成员 PNG窗口类数据结构_成员E2, 字节型
    .成员 PNG窗口类数据结构_成员E3, 字节型
    .成员 PNG窗口类数据结构_成员E4, 字节型
    .成员 PNG窗口类数据结构_成员E5, 字节型

.数据类型 PLASTINPUTINFO, , 取系统空闲时间
    .成员 cbSize, 整数型
    .成员 dwTime, 整数型

.数据类型 数据_APIHOOK类
    .成员 区域地址, 整数型
    .成员 API命令名, 文本型
    .成员 继续暂停, 文本型
    .成员 原函数地址, 整数型
    .成员 新函数地址, 字节集
    .成员 原保护值, 整数型
    .成员 原字节, 字节集
    .成员 命令标识, 文本型, , , 动态链接库名+API命令名

.数据类型 精易_时间, 公开, , SYSTEMTIME
    .成员 年, 短整数型, , , wYear
    .成员 月, 短整数型, , , wMonth
    .成员 星期, 短整数型
    .成员 日, 短整数型, , , wDay
    .成员 时, 短整数型, , , wHour
    .成员 分, 短整数型, , , wMinute
    .成员 秒, 短整数型, , , wSecond
    .成员 毫, 短整数型, , , wMilliseconds

.数据类型 LSA_OBJECT_ATTRIBUTES
    .成员 Length, 整数型
    .成员 RootDirectory, 整数型
    .成员 ObjectName, LSA_UNICODE_STRING, , , 未知类型：PLSA_UNICODE_STRING。
    .成员 Attributes, 整数型
    .成员 SecurityDescriptor, 整数型, 传址, , 此参数需传址。
    .成员 SecurityQualityOfService, 整数型, 传址, , 此参数需传址。

.数据类型 OSVERSIONINFOEX, 公开, 系统_取操作系统类别
    .成员 dwOSVersionInfoSize, , , , 结构的大小
    .成员 dwMajorVersion, , , , 主版本号
    .成员 dwMinorVersion, , , , 次版本号
    .成员 dwBuildNumber, , , , 构建号
    .成员 dwPlatformId, , , , 支持的平台
    .成员 szCSDVersion, 字节型, , "128", 补丁包的名称
    .成员 wServicePackMajor, 短整数型, , , 补丁包的主版本
    .成员 wServicePackMinor, 短整数型, , , 补丁包的次版本
    .成员 wSuiteMask, 短整数型, , , 系统上的程序组
    .成员 wProductType, 字节型, , , 系统类型
    .成员 wReserved, 字节型, , , 保留

.数据类型 OSVersionInfo
    .成员 版本信息大小, 整数型
    .成员 主版本, 整数型
    .成员 次版本, 整数型
    .成员 构造版本, 整数型
    .成员 平台标识符, 整数型
    .成员 CSD版本, 文本型

.数据类型 RasEntry
    .成员 dwSize, 整数型
    .成员 dwfOptions, 整数型
    .成员 dwCountryID, 整数型
    .成员 dwCountryCode, 整数型
    .成员 szAreaCode, 字节型, , "8"
    .成员 szLocalPhoneNumber, 字节型, , "132"
    .成员 dwAlternatesOffset, 整数型
    .成员 ipaddr, ADSL拨号3, , , 未知类型：TRasIPAddr。
    .成员 ipaddrDns, ADSL拨号3, , , 未知类型：TRasIPAddr。
    .成员 ipaddrDnsAlt, ADSL拨号3, , , 未知类型：TRasIPAddr。
    .成员 ipaddrWins, ADSL拨号3, , , 未知类型：TRasIPAddr。
    .成员 ipaddrWinsAlt, ADSL拨号3, , , 未知类型：TRasIPAddr。
    .成员 dwFrameSize, 整数型
    .成员 dwfNetProtocols, 整数型
    .成员 dwFramingProtocol, 整数型
    .成员 szScript, 字节型, , "260", 数组：MAX_PATH - 1+1。
    .成员 szAutodialDll, 字节型, , "260", 数组：MAX_PATH - 1+1。
    .成员 szAutodialFunc, 字节型, , "260", 数组：MAX_PATH - 1+1。
    .成员 szDeviceType, 字节型, , "16"
    .成员 szDeviceName, 字节型, , "132"
    .成员 szX25PadType, 字节型, , "32"
    .成员 szX25Address, 字节型, , "200"
    .成员 szX25Facilities, 字节型, , "200"
    .成员 szX25UserData, 字节型, , "204"
    .成员 dwChannels, 整数型
    .成员 dwReserved1, 整数型
    .成员 dwReserved2, 整数型
    .成员 dwSubEntries, 整数型
    .成员 dwDialMode, 整数型
    .成员 dwDialExtraPercent, 整数型
    .成员 dwDialExtraSampleSeconds, 整数型
    .成员 dwHangUpExtraPercent, 整数型
    .成员 dwHangUpExtraSampleSeconds, 整数型
    .成员 dwIdleDisconnectSeconds, 整数型

.数据类型 Stroks
    .成员 名字, 文本型
    .成员 条目名字, 文本型
    .成员 用户, 文本型
    .成员 值, 文本型

.数据类型 RARHeaderData, , RAR 档案文件头数据结构
    .成员 ArcName, 字节型, , "260", 输出，返回当前档案文件名，可用于检测是否为正确的分卷名。
    .成员 FileName, 字节型, , "260", 输出，返回 OEM (DOS) 编码的文件名
    .成员 Flags, 整数型, , , 输出，文件标志（&H1-文件继承自前卷; &H2-文件延续至后卷; &H4-文件使用密码加密; &H8-文件包含注释文本; &H10-先前文件使用了压缩[固实标志]）
    .成员 PackSize, 整数型, , , 输出，返回打包文件或分卷大小（如果使用了分卷压缩）
    .成员 UnpSize, 整数型, , , 输出，返回解包后的文件大小
    .成员 HostOS, 整数型, , , 输出，返回执行的操作系统（(0-MS DOS; 1-0S/2; 2-Win32; 3-Unix)）
    .成员 FileCRC, 整数型, , , 输出，返回解包文件的 CRC 校验信息. 如果文件被分卷,只有最后分卷部分包含了正确的 CRC 信息并且只有使用了 RAR_OM_LIST_INCSPLIT 模式才可正常读取.
    .成员 FileTime, 整数型, , , 输出，返回标准 MS DOS 格式的日期和时间
    .成员 UnpVer, 整数型, , , 输出，返回提取文件所需的 RAR 版本，返回格式为： 10*主版本号+副版本号
    .成员 Method, 整数型, , , 输出，返回打包方法。
    .成员 FileAttr, 整数型, , , 输出，返回文件属性。
    .成员 CmtBuf, 整数型, , , 输入/输出，本应为档案注释文本，文本型数据，但新版本的 DLL 将不再执行该功能，CmtState 一直为 0。
    .成员 CmtBufSize, 整数型, , , 输入，返回缓冲大小,新版本中不必再设置(见上)
    .成员 CmtSize, 整数型, , , 输出，返回实际缓冲大小,新版本中无效(见上)
    .成员 CmtState, 整数型, , , 输出，返回注释获取状态,新版本中无效(将始终返回无注释状态, 见上)

.数据类型 SHELLEXECUTEINFOA
    .成员 cbSize, 整数型
    .成员 fMask, 整数型
    .成员 hwnd, 整数型
    .成员 lpVerb, 文本型
    .成员 lpFile, 文本型
    .成员 lpParameters, 文本型
    .成员 lpDirectory, 文本型
    .成员 nShow, 整数型
    .成员 hInstApp, 整数型
    .成员 lpIDList, 整数型
    .成员 lpClass, 文本型
    .成员 hkeyClass, 整数型
    .成员 dwHotKey, 整数型
    .成员 hIcon, 整数型
    .成员 hProcess, 整数型

.数据类型 SHELLEXECUTEINFOW
    .成员 cbSize, 整数型
    .成员 fMask, 整数型
    .成员 hwnd, 整数型
    .成员 lpVerb, 字节集
    .成员 lpFile, 字节集
    .成员 lpParameters, 字节集
    .成员 lpDirectory, 字节集
    .成员 nShow, 整数型
    .成员 hInstApp, 整数型
    .成员 lpIDList, 整数型
    .成员 lpClass, 字节集
    .成员 hkeyClass, 整数型
    .成员 dwHotKey, 整数型
    .成员 hIcon, 整数型
    .成员 hProcess, 整数型

.数据类型 RAROpenArchiveDataEx, , RAR 档案打开数据结构
    .成员 ArcName, 文本型, , , 输入，指定档案文件名。
    .成员 ArcNameW, 字节集, , , 输入，指定档案文件名的 Unicode 字符串，未指定 Unicode 名称时设为空。
    .成员 OpenMode, 整数型, , , 输入，指定打开方式，为 RAR_OM_* 常数之一。
    .成员 OpenResult, 整数型, , , 输出，返回 0 表示执行成功，其他值参见 ERAR_* 常数[仅 11-15 部分]。
    .成员 CmtBuf, 文本型, , , 输入/输出，可选。档案注释文本缓冲区，最大缓冲长度为 64 Kb；缓冲过小时超出部分被截断，本成员为空时表示不获取注释文本。
    .成员 CmtBufSize, 整数型, , , 输入，指定 CmtBuf 成员的缓冲区大小。
    .成员 CmtSize, 整数型, , , 输出，返回实际读取到档案注释文本的缓冲大小， 该值不会超过 CmtBufSize 成员。
    .成员 CmtState, 整数型, , , 输出，返回档案注释文本读取结果(0 表示未设置注释;1 表示注释读取完成, 其他返回值见 ERAR_* 常数[仅 11,12,14,20])
    .成员 Flags, 整数型, , , 输出，位标记组合。(&H1-分卷属性; &H2-包含档案注释; &H4-档案锁定属性; &H8-固实档案属性; &H10-新式分卷命名方案[volname.partN.rar]; &H20-包含校验信息; &H40-包含恢复记录; &H80-区块头被加密; &H100-首个分卷[需 RAR 3.0 以上版本])

.数据类型 SECURITY_ATTRIBUTES, , 系统_取DOS执行结果
    .成员 nLength, 整数型
    .成员 lpSecurityDescriptor, 整数型
    .成员 bInheritHandle, 逻辑型

.数据类型 注册表_键, 公开
    .成员 键名称, 文本型
    .成员 键值, 字节集
    .成员 类型, 整数型, , , 类型对照请看"REG_"开头的常量

.数据类型 PROCESS_INFORMATION
    .成员 hProcess, 整数型
    .成员 hThread, 整数型
    .成员 dwProcessId, 整数型
    .成员 dwThreadId, 整数型

.数据类型 STARTUPINFO, 公开
    .成员 cb, 整数型
    .成员 lpReserved, 整数型
    .成员 lpDesktop, 整数型
    .成员 lpTitle, 整数型
    .成员 dwX, 整数型
    .成员 dwY, 整数型
    .成员 dwXSize, 整数型
    .成员 dwYSize, 整数型
    .成员 dwXCountChars, 整数型
    .成员 dwYCountChars, 整数型
    .成员 dwFillAttribute, 整数型
    .成员 dwFlags, 整数型
    .成员 wShowWindow, 短整数型
    .成员 cbReserved2, 短整数型
    .成员 lpReserved2, 整数型
    .成员 hStdInput, 整数型
    .成员 hStdOutput, 整数型
    .成员 hStdError, 整数型
    .成员 lpAttributeList, 整数型, , , STARTUPINFOEX

.数据类型 RESTOREPTINFO, , 系统还原_创建还原点
    .成员 dwEventType
    .成员 dwRestorePtType
    .成员 llSequenceNumber, 长整数型
    .成员 szDescription, 字节型, , "64"

.数据类型 SMGRSTATUS, , 系统还原_创建还原点
    .成员 nStatus
    .成员 llSequenceNumber, 长整数型

.数据类型 FONT_RESOURCE, , 系统_取字体名
    .成员 dwDup, 整数型, , "7"
    .成员 wszFontName, 短整数型, , "1024"

.数据类型 SYSTEM_INFO, , 系统_取CPU占用率
    .成员 wProcessorArchitecture, 整数型
    .成员 dwPageSize, 整数型
    .成员 lpMinimumApplicationAddress, 整数型
    .成员 lpMaximumApplicationAddress, 整数型
    .成员 dwActiveProcessorMask, 整数型
    .成员 dwNumberOrfProcessors, 整数型
    .成员 dwProcessorType, 整数型
    .成员 dwAllocationGranularity, 整数型
    .成员 dwReserved, 整数型

.数据类型 PFLASHWINFO, , 窗口_闪动Ex
    .成员 cbSize, 整数型
    .成员 hwnd, 整数型
    .成员 dwFlags, 整数型
    .成员 uCount, 整数型
    .成员 dwTimeout, 整数型

.数据类型 GUID, 公开
    .成员 Data1, 整数型
    .成员 Data2, 短整数型
    .成员 Data3, 短整数型
    .成员 Data4, 字节型, , "8"

.数据类型 时区信息_, , 系统_取系统时区
    .成员 Bias, 整数型
    .成员 StandardName, 字节型, , "63"
    .成员 系统时间年, 短整数型
    .成员 系统时间月, 短整数型
    .成员 系统时间星期, 短整数型
    .成员 系统时间天, 短整数型
    .成员 系统时间时, 短整数型
    .成员 系统时间分, 短整数型
    .成员 系统时间秒, 短整数型
    .成员 系统时间毫秒, 短整数型
    .成员 StandardBias, 整数型
    .成员 DaylightName, 短整数型, , "32"
    .成员 时区时间年, 短整数型
    .成员 时区时间月, 短整数型
    .成员 时区时间星期, 短整数型
    .成员 时区时间天, 短整数型
    .成员 时区时间时, 短整数型
    .成员 时区时间分, 短整数型
    .成员 时区时间秒, 短整数型
    .成员 时区时间毫秒, 短整数型
    .成员 DaylightBias, 整数型

.数据类型 WINDOWINFO, , 窗口_是否激活
    .成员 cbSize, 整数型
    .成员 rcWindow, 精易_矩形
    .成员 rcClient, 精易_矩形
    .成员 dwStyle, 整数型
    .成员 dwExStyle, 整数型
    .成员 dwWindowStatus, 整数型
    .成员 cxWindowBorders, 整数型
    .成员 cyWindowBorders, 整数型
    .成员 atomWindowType, 短整数型
    .成员 wCreatorVersion, 短整数型

.数据类型 IO_STATUS_BLOCK, , 文件_句柄取路径
    .成员 Status
    .成员 Information

.数据类型 FILE_NAME_INFORMATION, , 文件_句柄取路径
    .成员 FileNameLength
    .成员 FileName

.数据类型 BY_HANDLE_FILE_INFORMATION, , 文件_句柄取路径
    .成员 dwFileAttributes, 整数型
    .成员 ftCreationTime, FILETIME
    .成员 ftLastAccessTime, FILETIME
    .成员 ftLastWriteTime, FILETIME
    .成员 dwVolumeSerialNumber, 整数型
    .成员 nFileSizeHigh, 整数型
    .成员 nFileSizeLow, 整数型
    .成员 nNumberOfLinks, 整数型
    .成员 nFileIndexHigh, 整数型
    .成员 nFileIndexLow, 整数型

.数据类型 IO_COUNTERS, , 进程_取IO读取字节 进程_取IO其它计数
    .成员 读取操作数量, 长整数型, , , ReadOperationCount
    .成员 写入操作数量, 长整数型, , , WriteOperationCount
    .成员 其它读写操作数量, 长整数型, , , OtherOperationCount
    .成员 读取字节数, 长整数型, , , ReadTransferCount
    .成员 写入字节数, 长整数型, , , WriteTransferCount
    .成员 其它读写操作字节, 长整数型, , , OtherTransferCount

.数据类型 MINMAXINFO, , 窗口_限定尺寸
    .成员 ptReserved, 精易_坐标
    .成员 ptMaxSize, 精易_坐标
    .成员 ptMaxPosition, 精易_坐标
    .成员 ptMinTrackSize, 精易_坐标
    .成员 ptMaxTrackSize, 精易_坐标

.数据类型 MD5_CTX
    .成员 i, 整数型, , "2"
    .成员 buf, 整数型, , "4"
    .成员 in, 字节型, , "64"
    .成员 digest, 字节型, , "16"

.数据类型 URL_COMPONENTS, 公开
    .成员 dwStructSize, , , , 本结构长度，注：60
    .成员 lpszScheme, , , , 协议类型
    .成员 dwSchemeLength, , , , 协议类型缓冲区长度
    .成员 nScheme, , , , 链接类型，1=http，2=https。（INTERNET_SCHEME_HTTP=1，INTERNET_SCHEME_HTTPS=2）
    .成员 lpszHostName, , , , 主机域名(Host)
    .成员 dwHostNameLength, , , , 主机域名缓冲区长度
    .成员 nPort, , , , 端口
    .成员 lpszUserName, , , , 帐号
    .成员 dwUserNameLength, , , , 帐号缓冲区长度
    .成员 lpszPassword, , , , 密码
    .成员 dwPasswordLength, , , , 密码缓冲区长度
    .成员 lpszUrlPath, , , , 路径(页面地址)
    .成员 dwUrlPathLength, , , , 路径缓冲区长度
    .成员 lpszExtraInfo, , , , 额外信息，比如“?”或“#”之后的参数字符串。
    .成员 dwExtraInfoLength, , , , 额外信息长度

.数据类型 LOGFONT, 公开, 定义字体的属性
    .成员 lfHeight, 整数型, , , 字体单元格或字符的高度（以逻辑单位表示）。字符高度值（也称为em高度）是字符单元格高度值减去内部前导值。
    .成员 lfWidth, 整数型, , , 字体中字符的平均宽度（以逻辑单位表示）。如果lfWidth为零，则设备的宽高比与可用字体的数字化宽高比相匹配，以找到最接近的匹配，由差值的绝对值确定。
    .成员 lfEscapement, 整数型, , , 设备x轴之间的角度，以十分之一度为单位
    .成员 lfOrientation, 整数型, , , 每个字符的基线和设备的x轴之间的角度，以十分之一度为单位。
    .成员 lfWeight, 整数型, , , 字体的权重范围为0到1000.例如，400表示正常，700表示粗体。如果此值为零，则使用默认权重。
    .成员 lfItalic, 字节型, , , 斜体
    .成员 lfUnderline, 字节型, , , 下划线
    .成员 lfStrikeOut, 字节型, , , 删除线
    .成员 lfCharSet, 字节型, , , 字符集
    .成员 lfOutPrecision, 字节型, , , 输出精度。输出精度定义输出必须与请求的字体的高度，宽度，字符方向，擒纵，音高和字体类型匹配的程度。
    .成员 lfClipPrecision, 字节型, , , 剪裁精度。裁剪精度定义了如何剪辑部分位于裁剪区域之外的字符。
    .成员 lfQuality, 字节型, , , 输出质量。输出质量定义了图形设备接口（GDI）必须如何仔细地将逻辑字体属性与实际物理字体的属性相匹配。
    .成员 lfPitchAndFamily, 字节型, , , 字体族
    .成员 lfFaceName, 字节型, , "32", W版为64个成员的字节数组或者32个成员的短整数数组,以null结尾的字符串，用于指定字体的字体名称。此字符串的长度不得超过32个TCHAR值，包括终止NULL。该EnumFontFamiliesEx函数可用于枚举所有当前可用字体的字体名称。如果lfFaceName是空字符串，则GDI使用与其他指定属性匹配的第一个字体。

.数据类型 CHOOSEFONT, , 对话框_选择字体
    .成员 结构大小, 整数型
    .成员 窗口句柄, 整数型
    .成员 设备场景句柄, 整数型
    .成员 字体结构指针, 整数型
    .成员 点大小, 整数型
    .成员 标志, 整数型
    .成员 颜色值, 整数型
    .成员 自定义数据, 整数型
    .成员 回调函数地址, 整数型
    .成员 模板名称, 文本型
    .成员 实例句柄, 整数型
    .成员 字体风格, 文本型
    .成员 字体类型, 短整数型
    .成员 空白队列, 短整数型
    .成员 最小尺寸, 整数型
    .成员 最大尺寸, 整数型

.数据类型 NOTIFYICONDATA
    .成员 cbSize, 整数型, , , 结构大小
    .成员 hWnd, 整数型, , , 窗口句柄
    .成员 uID, 整数型, , , 标识符
    .成员 uFlags, 整数型, , , 标志
    .成员 uCallbackMessage, 整数型, , , 返回信息
    .成员 hIcon, 整数型, , , 图标句柄
    .成员 szTip, 字节型, , "128", 提示文本
    .成员 dwState, 整数型
    .成员 dwStateMask, 整数型
    .成员 szInfo, 字节型, , "256", 提示信息
    .成员 uTimeoutAndVersion, 整数型
    .成员 szInfoTitle, 字节型, , "64", 标题
    .成员 dwInfoFlags, 整数型, , , 提示图标

.数据类型 IconDirEntry, , 16
    .成员 bWidth, 字节型, , , 图标图片的显示宽度
    .成员 bHeight, 字节型, , , 图标图片的显示高度
    .成员 bColorCount, 字节型, , , 图标图片的颜色数
    .成员 bReserved, 字节型, , , 保留域总是 0
    .成员 wPlanes, 短整数型, , , 图标图片的位面数
    .成员 wBitCount, 短整数型, , , 图标图片的颜色深度
    .成员 dwBytesInRes, 整数型, , , 图标图片占用的数据量
    .成员 dwImageOffset, 整数型, , , 图标图片的开始位置

.数据类型 hostent
    .成员 h_name
    .成员 h_aliases
    .成员 h_addrtype, 短整数型
    .成员 h_length, 短整数型
    .成员 h_addr_list

.数据类型 ICMP_ECHO_REPLY
    .成员 address, 整数型, , ,  ‘包含正回复的IP地址
    .成员 Status, 整数型, , ,   ‘包含回复的状态（参看后面的常量部分）
    .成员 RoundTripTime, 整数型, , , ‘往返时间RTT(毫秒)
    .成员 DataSize, 整数型, , , ‘回复数据大小(字节)
    .成员 Reserved, 短整数型, , ,  ‘保留
    .成员 ptrData, 短整数型, , , ‘指向回复数据的指针
    .成员 Options, IP_OPTION_INFORMATION, , , 回复选项
    .成员 Data, 字节型, , "250"

.数据类型 IP_OPTION_INFORMATION
    .成员 Ttl, 字节型, , ,  ‘生存时间
    .成员 Tos, 字节型, , , ‘服务类型
    .成员 Flags, 字节型, , ,  ‘IP头标志
    .成员 OptionsSize, 字节型, , ,  ‘选项数据的大小，字节
    .成员 OptionsData, 整数型, , , ‘指向选项数据的指针

.数据类型 WAVEOUTCAPS
    .成员 wMid, 短整数型
    .成员 wPid, 短整数型
    .成员 vDriverVersion, 整数型
    .成员 szPname, 字节型, , "32"
    .成员 dwFormats, 整数型
    .成员 wChannels, 短整数型
    .成员 dwSupport, 整数型

.数据类型 配置节数据, 公开
    .成员 节名称, 文本型
    .成员 项, 配置项数据, , "1"

.数据类型 配置项数据, 公开
    .成员 配置项名称, 文本型
    .成员 值, 文本型

.数据类型 ULARGE_INTEGER, , 进程_取父ID
    .成员 LowPart
    .成员 HighPart

.数据类型 UNICODE_STRING, , 进程_取父ID
    .成员 长度, 短整数型, , , Length
    .成员 最大长度, 短整数型, , , MaximumLength
    .成员 缓冲区, 整数型, , , Buffer

.数据类型 SYSTEM_PROCESS_INFORMATION, 公开, 进程_取父ID
    .成员 NextEntryDelta, 整数型
    .成员 ThreadCount, 整数型
    .成员 Reserved1, LARGE_INTEGER, , "3"
    .成员 CreateTime, LARGE_INTEGER
    .成员 UserTime, LARGE_INTEGER
    .成员 KernelTime, LARGE_INTEGER
    .成员 ImageName, UNICODE_STRING
    .成员 BasePriority, 整数型, , , KPRIORITY               
    .成员 ProcessId, 整数型
    .成员 InheritedFromProcessId, 整数型
    .成员 HandleCount, 整数型
    .成员 Reserved2, 整数型, , "2"
    .成员 VirtualMemoryCounters, VM_COUNTERS, , , VM_COUNTERS             
    .成员 IoCounters, IO_COUNTERS, , , IO_COUNTERS             

.数据类型 OVERLAPPED
    .成员 Internal, 整数型
    .成员 InternalHigh, 整数型
    .成员 offset, 整数型
    .成员 OffsetHigh, 整数型
    .成员 hEvent, 整数型

.数据类型 精易_系统服务列表, 公开, 系统服务_枚举系统服务
    .成员 服务名称, 文本型
    .成员 显示名称, 文本型
    .成员 描述, 文本型
    .成员 文件路径, 文本型
    .成员 启动类型, 文本型
    .成员 服务状态, 文本型
    .成员 登陆为, 文本型

.数据类型 精易_系统服务列表Ex, 公开, 系统服务_枚举系统服务
    .成员 服务名称, 文本型
    .成员 显示名称, 文本型
    .成员 描述, 文本型
    .成员 进程ID
    .成员 文件路径, 文本型
    .成员 启动类型, 文本型
    .成员 服务状态, 文本型
    .成员 登陆为, 文本型

.数据类型 ENUM_SERVICE_STATUS_PROCESS
    .成员 lpServiceName
    .成员 lpDisplayName
    .成员 ServiceStatusProcess, SERVICE_STATUS_PROCESS

.数据类型 SERVICE_STATUS_PROCESS
    .成员 dwServiceType
    .成员 dwCurrentState
    .成员 dwControlsAccepted
    .成员 dwWin32ExitCode
    .成员 dwServiceSpecificExitCode
    .成员 dwCheckPoint
    .成员 dwWaitHint
    .成员 dwProcessId
    .成员 dwServiceFlags

.数据类型 ENUM_SERVICE_STATUS, , 枚举服务
    .成员 lpServiceName
    .成员 lpDisplayName
    .成员 ServiceStatus, SERVICE_STATUS

.数据类型 SYSTEMTIME
    .成员 wYear, 短整数型
    .成员 wMonth, 短整数型
    .成员 wDayOfWeek, 短整数型
    .成员 wDay, 短整数型
    .成员 wHour, 短整数型
    .成员 wMinute, 短整数型
    .成员 wSecond, 短整数型
    .成员 wMilliseconds, 短整数型

.数据类型 Cookie, 公开, cookie类型
    .成员 健, 文本型
    .成员 值, 文本型

.数据类型 NetworkCardMapName
    .成员 Index, 整数型
    .成员 strMapName, 文本型
    .成员 strFriendName, 文本型
    .成员 strGUID, 文本型

.数据类型 IP_ADAPTER_INFO_彗星
    .成员 Next, 整数型, , , _IP_ADAPTER_INFO* Next
    .成员 ComboIndex, 整数型, , , DWORD。ComboIndex
    .成员 AdapterName, 字节型, , "260", Char AdapterName[MAX_ADAPTER_NAME_LENGTH + 4];MAX_ADAPTER_NAME_LENGTH = 256
    .成员 Description, 字节型, , "132", char Description[MAX_ADAPTER_DESCRIPTION_LENGTH + 4];MAX_ADAPTER_DESCRIPTION_LENGTH = 128
    .成员 AddressLength, 整数型, , , UINT。AddressLength
    .成员 Address, 字节型, , "8", BYTE Address[MAX_ADAPTER_ADDRESS_LENGTH];MAX_ADAPTER_ADDRESS_LENGTH=8
    .成员 Index, 整数型, , , DWORD。Index
    .成员 Type, 整数型, , , UINT。Type
    .成员 DhcpEnabled, 整数型, , , UINT。DhcpEnabled
    .成员 CurrentIpAddress, 整数型, , , PIP_ADDR_STRING。CurrentIpAddress
    .成员 IpAddressList, IP_ADDR_STRING, , , IP_ADDR_STRING。IpAddressList
    .成员 GatewayList, IP_ADDR_STRING, , , IP_ADDR_STRING。GatewayList
    .成员 DhcpServer, IP_ADDR_STRING, , , IP_ADDR_STRING。DhcpServer
    .成员 HaveWins, 整数型, , , BOOL。HaveWins
    .成员 PrimaryWinsServer, IP_ADDR_STRING, , , IP_ADDR_STRING。PrimaryWinsServer
    .成员 SecondaryWinsServer, IP_ADDR_STRING, , , IP_ADDR_STRING。SecondaryWinsServer
    .成员 LeaseObtained, 长整数型, , , time_t。LeaseObtained
    .成员 LeaseExpires, 长整数型, , , time_t。LeaseExpires

.数据类型 IP_INTERFACE_INFO
    .成员 NumAdapters, 整数型, , , LONG。NumAdapters
    .成员 Adapter, IP_ADAPTER_INDEX_MAP, , , IP_ADAPTER_INDEX_MAP。Adapter[1]

.数据类型 精易_网卡信息_彗星, 公开, 网卡信息
    .成员 网卡名称, 文本型, , , 网卡名称
    .成员 网卡描述, 文本型, , , 网卡描述
    .成员 连接名称, 文本型, , , 友好名称，本地连接
    .成员 网卡类型n, 整数型
    .成员 网卡类型, 文本型, , , 网卡类型
    .成员 MAC地址, 文本型, , , MAC地址
    .成员 IP地址, 文本型, , , IP地址
    .成员 子网掩码, 文本型, , , 子网掩码
    .成员 网关地址, 文本型, , , 网关地址
    .成员 首选DNS服务器, 文本型, , , 首选DNS服务器
    .成员 备用DNS服务器, 文本型, , , 备用DNS服务器
    .成员 是否启用DHCP, 逻辑型

.数据类型 IP_ADAPTER_INDEX_MAP
    .成员 Index, 整数型, , , ULONG。Index
    .成员 Name, 字节型, , "256", WCHAR。Name。[MAX_ADAPTER_NAME];MAX_ADAPTER_NAME=128

.数据类型 精易_IP归属地, 公开
    .成员 IP, 文本型
    .成员 国家, 文本型
    .成员 省份, 文本型
    .成员 城市, 文本型
    .成员 运营商, 文本型

.数据类型 模糊属性, 公开, _DWM_BLURBEHIND
    .成员 dwFlags, 整数型, , , DWM Blur Behind常量值的按位组合，指示已设置此结构的哪些成员。
    .成员 fEnable, 逻辑型, , , TRUE将窗口句柄注册到DWM模糊后面; FALSE从DWM注销的窗口句柄模糊后面。
    .成员 hRgnBlur, 整数型, , , 客户区内将应用模糊的区域。一个NULL值将应用于整个客户区域的模糊。
    .成员 fTransitionOnMaximized, 整数型, , , 如果窗口的着色应转换为与最大化窗口匹配，则为TRUE ; 否则，FALSE。

.数据类型 EncoderParameter
    .成员 Guid, 字节型, , "16", 为了方便使用了字节型数组，本来应该是GUID类型。
    .成员 NumberOfValues, 整数型
    .成员 Type, 整数型
    .成员 Value, 整数型, , , Value *

.数据类型 缩略图属性, 公开, _DWM_THUMBNAIL_PROPERTIES
    .成员 dwFlags, 整数型, , , 按位组合DWM略缩图常数值，该值指示设置了此结构的哪些成员。1=源矩形，2=显示矩形，4=透明度，8=可视，16=仅工作区
    .成员 目标矩形, 精易_矩形, , , rcDestination         1.略缩图将显示到目标窗口中的矩形区域。
    .成员 源矩形, 精易_矩形, , , rcSource              2.要用作略缩图的源窗口的区域。默认情况下，整个窗口用作略缩图。
    .成员 透明度, 字节型, , , opacity               4.渲染略缩图的不透明度。取值0-255。0是完全透明的，而255是完全不透明的。默认值为255。
    .成员 可视, 逻辑型, , , fVisible              8.可视
    .成员 仅工作区, 逻辑型, , , fSourceClientAreaOnly 16.仅使用略缩图源的工作区

.数据类型 EncoderParameters
    .成员 Count, 整数型
    .成员 Parameter, EncoderParameter, , "1"

.数据类型 SCROLLINFO
    .成员 cbSize, 整数型
    .成员 fMask, 整数型
    .成员 nMin, 整数型
    .成员 nMax, 整数型
    .成员 nPage, 整数型
    .成员 nPos, 整数型
    .成员 nTrackPos, 整数型

.数据类型 SCROLLBARINFO
    .成员 cbSize, 整数型
    .成员 rcScrollBar, RECT
    .成员 dxyLineButton, 整数型
    .成员 xyThumbTop, 整数型
    .成员 xyThumbBottom, 整数型
    .成员 reserved, 整数型
    .成员 rgstate, 整数型, , "6"

.数据类型 COMBOBOXINFO, 公开
    .成员 cbSize, 整数型, , , 结构大小
    .成员 rcItem, RECT, , , 条目矩形
    .成员 rcButton, RECT, , , 按钮矩形
    .成员 stateButton, 整数型, , , 按钮状态
    .成员 hwndCombo, 整数型, , , 超级组合框句柄
    .成员 hwndItem, 整数型, , , 编辑框句柄
    .成员 hwndList, 整数型, , , 列表框句柄

.数据类型 MIB_TCPTABLE_OWNER_PID, , https://msdn.microsoft.com/en-us/library/aa366921.aspx
    .成员 dwNumEntries, 整数型, , , 表中MIB_TCPROW_OWNER_PID元素的数量。
    .成员 TCP_TABLE_CLASS, MIB_TCPROW_OWNER_PID, , "255", MIB_TCPROW_OWNER_PID数组。

.数据类型 MIB_TCPROW_OWNER_PID, , https://msdn.microsoft.com/en-us/library/aa366913.aspx
    .成员 dwState, 整数型, , , //连接状态
    .成员 dwLocalAddr, 整数型, , , //本地 IP地址,值为零表示TCP侦听器愿意接受与本地计算机相关联的任何IP接口的数据报。
    .成员 dwLocalPort, 整数型, , , //本地端口,本地计算机上TCP端点的端口号。该成员以网络字节顺序存储。
    .成员 dwRemoteAddr, 整数型, , , //远程 IP 地址
    .成员 dwRemotePort, 整数型, , , //远程端口
    .成员 dwOwningPid, 整数型, , , //关联的进程ID,发出UDP端点绑定功能的进程的PID 。当PID不可用时，该成员设置为0。

.数据类型 MIB_UDPTABLE_OWNER_PID, , https://msdn.microsoft.com/en-us/library/aa366932.aspx
    .成员 dwNumEntries, 整数型, , , 表中MIB_UDPROW_OWNER_PID元素的数量。
    .成员 UDP_TABLE_CLASS, MIB_UDPROW_OWNER_PID, , "255", MIB_UDPTABLE_OWNER_PID数组。

.数据类型 MIB_UDPROW_OWNER_PID, , https://msdn.microsoft.com/en-us/library/aa366928.aspx
    .成员 dwLocalAddr, 整数型, , , //本地 IP地址,值为零表示UDP侦听器愿意接受与本地计算机相关联的任何IP接口的数据报。
    .成员 dwLocalPort, 整数型, , , //本地端口,本地计算机上UDP端点的端口号。该成员以网络字节顺序存储。
    .成员 dwOwningPid, 整数型, , , //关联的进程ID,发出UDP端点绑定功能的进程的PID 。当PID不可用时，该成员设置为0。

.数据类型 HotKeyData
    .成员 hWnd, 整数型
    .成员 nModifiers, 整数型, , , #MOD_CONTROL #MOD_SHIFT #MOD_ALT
    .成员 nVirtKey, 整数型
    .成员 hProc, 整数型
    .成员 nType, 整数型
    .成员 bChar, 逻辑型

.数据类型 WINDOWCOMPOSITIONATTRIBDATA
    .成员 Attrib, 整数型
    .成员 pvData, ACCENT_POLICY, 传址
    .成员 cbData, 整数型

.数据类型 ACCENT_POLICY
    .成员 AccentState, 整数型
    .成员 AccentFlags, 整数型
    .成员 GradientColor, 整数型
    .成员 AnimationId, 整数型

.数据类型 STORAGE_DEVICE_DESCRIPTOR, , 输出参数
    .成员 Version, 整数型
    .成员 Size, 整数型
    .成员 DeviceType, 字节型
    .成员 DeviceTypeModifier, 字节型
    .成员 RemovableMedia, 字节型
    .成员 CommandQueueing, 字节型
    .成员 VendorIdOffset, 整数型
    .成员 ProductIdOffset, 整数型
    .成员 ProductRevisionOffset, 整数型
    .成员 SerialNumberOffset, 整数型
    .成员 BusType, 整数型, , , STORAGE_BUS_TYPE
    .成员 RawPropertiesLength, 整数型
    .成员 RawDeviceProperties, 字节型, , "1"

.数据类型 STORAGE_PROPERTY_QUERY, , 输入参数
    .成员 PropertyId, 长整数型
    .成员 QueryType, 长整数型
    .成员 AdditionalParameters, 字节型, , "1"

.数据类型 WINDOWPLACEMENT, 公开
    .成员 Length, 整数型, , , 结构的长度
    .成员 flags, 整数型, , , 控制最小化窗口的位置和恢复窗口的方法(#WPF_xxx)
    .成员 showCmd, 整数型, , , 窗口的当前显示状态(#SW_xxx)
    .成员 ptMinPosition, POINT, , , 窗口最小化时窗口左上角的坐标
    .成员 ptMaxPosition, POINT, , , 窗口最大化时窗口左上角的坐标
    .成员 rcNormalPosition, RECT, , , 当窗口处于恢复位置时窗口的坐标

.数据类型 PROCESSENTRY32W
    .成员 dwSize, 整数型
    .成员 cntUsage, 整数型
    .成员 th32ProcessID, 整数型
    .成员 th32DefaultHeapID, 整数型
    .成员 th32ModuleID, 整数型
    .成员 cntThreads, 整数型
    .成员 th32ParentProcessID, 整数型
    .成员 pcPriClassBase, 整数型
    .成员 dwFlags, 整数型
    .成员 szExeFile, 字节型, , "520"

.数据类型 WIN32_FIND_DATAW, 公开
    .成员 dwFileAttributes, 整数型
    .成员 ftCreationTime, FILETIME
    .成员 ftLastAccessTime, FILETIME
    .成员 ftLastWriteTime, FILETIME
    .成员 nFileSizeHigh, 整数型
    .成员 nFileSizeLow, 整数型
    .成员 dwReserved0, 整数型
    .成员 dwReserved1, 整数型
    .成员 cFileName, 字节型, , "520"
    .成员 cAlternateFileName, 字节型, , "28"

.数据类型 KBDLLHOOKSTRUCT
    .成员 vkCode, 整数型
    .成员 scanCode, 整数型
    .成员 flags, 整数型
    .成员 time, 整数型
    .成员 dwExtraInfo, 整数型

.数据类型 精易_时区信息, 公开
    .成员 时区, 文本型
    .成员 时区名, 文本型
    .成员 时区代码, 文本型

.数据类型 精易_显卡信息, 公开
    .成员 显卡名称, 文本型, , , Name
    .成员 驱动程序版本号, 文本型, , , DriverVersion
    .成员 内存大小, 长整数型, , , AdapterRAM
    .成员 描述, 文本型, , , Caption
    .成员 详细描述, 文本型, , , Description

.数据类型 精易_回收站中的文件信息, 公开
    .成员 当前的路径, 文本型
    .成员 原路径, 文本型
    .成员 删除时间, 日期时间型

.数据类型 BROWSEINFOW
    .成员 hwndOwner, 整数型
    .成员 pidlRoot, 整数型
    .成员 pszDisplayName, 整数型
    .成员 lpszTitle, 整数型
    .成员 ulFlags, 整数型
    .成员 lpfn, 整数型
    .成员 lParam, 整数型
    .成员 iImage, 整数型

.数据类型 精易_网络适配器配置, 公开
    .成员 状态, 整数型, , , #IfOperStatus**
    .成员 描述, 文本型
    .成员 适配器名称, 文本型
    .成员 物理地址, 文本型
    .成员 启用DHCP, 逻辑型
    .成员 IPv4地址, 文本型
    .成员 IPv4子网掩码, 文本型
    .成员 IPv4默认网关, 文本型
    .成员 DHCP服务器, 文本型
    .成员 IPv4DNS服务器, 文本型
    .成员 本地IPv6地址, 文本型
    .成员 IPv6索引, 整数型
    .成员 IPv6默认网关, 文本型
    .成员 IPv6DNS服务器, 文本型

.数据类型 JsonError, 公开
    .成员 Number, 整数型, , , 错误号
    .成员 Source, 文本型, , , 错误的来源
    .成员 Description, 文本型, , , 错误的描述
    .成员 HelpFile, 文本型, , , 可以在其中找到错误帮助的文件
    .成员 HelpContext, 整数型, , , 包含错误信息主题的上下文ID
    .成员 Text, 文本型, , , 发生错误的源代码行
    .成员 Line, 整数型, , , 发生错误的源代码行号
    .成员 Column, 整数型, , , 发生错误的源代码列位置

.数据类型 进程_模块信息, 公开
    .成员 模块句柄, 长整数型
    .成员 模块文件名, 文本型
    .成员 模块完整路径, 文本型

.数据类型 HOOKPROC
    .成员 lpfn, 子程序指针
    .成员 HHOOK, 整数型
    .成员 lpAddress, 整数型

.数据类型 MSLLHOOKSTRUCT
    .成员 pt, POINT
    .成员 mouseData, 整数型
    .成员 flags, 整数型
    .成员 time, 整数型
    .成员 dwExtraInfo, 整数型

.数据类型 NUMBERFMTA
    .成员 NumDigits, 整数型
    .成员 LeadingZero, 整数型
    .成员 Grouping, 整数型
    .成员 lpDecimalSep, 文本型
    .成员 lpThousandSep, 文本型
    .成员 NegativeOrder, 整数型

.数据类型 INPUT, 公开
    .成员 type, 整数型
    .成员 wVk, 短整数型
    .成员 wScan, 短整数型
    .成员 dwFlags, 整数型
    .成员 time, 整数型
    .成员 dwExtraInfo, 整数型
    .成员 uMsg, 整数型
    .成员 wParamL, 短整数型
    .成员 wParamH, 短整数型

.数据类型 精易_任务列表项目, 公开
    .成员 目标, 字节集
    .成员 命令行, 字节集
    .成员 图标路径, 字节集, , , icon
    .成员 起始位置, 字节集
    .成员 标题, 字节集
    .成员 描述, 字节集

.数据类型 SYSTEM_POWER_STATUS, 公开, 包含有关系统电源状态的信息。
    .成员 ACLineStatus, 字节型, , , 交流电源状态。
    .成员 BatteryFlag, 字节型, , , 电池充电状态。
    .成员 BatteryLifePercent, 字节型, , , 剩余电量的百分比。
    .成员 SystemStatusFlag, 字节型, , , 省电模式的状态。
    .成员 BatteryLifeTime, 整数型, , , 剩余的电池寿命秒数。
    .成员 BatteryFullLifeTime, 整数型, , , 完全充电时的电池寿命秒数。

.数据类型 OPENASINFO
    .成员 pcszFile, 字节集
    .成员 pcszClass, 整数型
    .成员 oaifInFlags, 整数型

.数据类型 PERFORMANCE_INFORMATION
    .成员 cb, 整数型
    .成员 CommitTotal, 整数型
    .成员 CommitLimit, 整数型
    .成员 CommitPeak, 整数型
    .成员 PhysicalTotal, 整数型
    .成员 PhysicalAvailable, 整数型
    .成员 SystemCache, 整数型
    .成员 KernelTotal, 整数型
    .成员 KernelPaged, 整数型
    .成员 KernelNonpaged, 整数型
    .成员 PageSize, 整数型
    .成员 HandleCount, 整数型
    .成员 ProcessCount, 整数型
    .成员 ThreadCount, 整数型

.数据类型 精易_线程信息, 公开
    .成员 线程ID, 整数型
    .成员 进程ID, 整数型
    .成员 模块路径, 文本型
    .成员 线程入口, 整数型

.数据类型 CREDUI_INFOW
    .成员 cbSize, 整数型
    .成员 hwndParent, 整数型
    .成员 pszMessageText, 字节集
    .成员 pszCaptionText, 字节集
    .成员 hbmBanner, 整数型

.数据类型 自定义排序数组, , 用于自定义数组排序  文本_分割文本排序（）
    .成员 整数, 整数型, , , 整数型排序字段
    .成员 小数, 双精度小数型, , , 小数型排序字段
    .成员 日期时间, 日期时间型, , , 日期时间型排序字段
    .成员 文本, 文本型, , , 文本型排序字段
    .成员 原数据, 文本型, , , 单行文本内容

.数据类型 WIN32_FILE_SIZE, 公开
    .成员 dwSizeLow, 整数型
    .成员 dwSizeHigh, 整数型

.数据类型 Apk文件头
    .成员 标志, 文本型
    .成员 文件名头地址, 整数型
    .成员 文件数量, 整数型
    .成员 文件长度, 整数型
    .成员 校验和, 整数型
    .成员 保留, 整数型
    .成员 文件描述, 文本型

.数据类型 axp文件头
    .成员 头部数据, 整数型, , "98314", 头部0x60028字节
    .成员 列表数据, 整数型, , "262144", 列表数据 0x100000字节

.数据类型 axp子文件信息, , axp子文件信息
    .成员 是否有效, 逻辑型
    .成员 a1, 整数型
    .成员 a2, 整数型
    .成员 a3, 整数型
    .成员 头部编号, 整数型
    .成员 列表编号, 整数型
    .成员 数据地址, 整数型
    .成员 数据大小, 整数型
    .成员 数据类型, 整数型

.数据类型 Apk文件信息
    .成员 文件名长度, 整数型
    .成员 文件名, 文本型
    .成员 分隔符, 字节型
    .成员 文件内容地址, 整数型
    .成员 文件内容长度, 整数型
    .成员 文件名描述, 字节集
    .成员 文件数据, 字节集

.数据类型 INTERNET_BUFFERSA
    .成员 dwStructSize, 整数型
    .成员 Next, 整数型
    .成员 lpcszHeader, 整数型
    .成员 dwHeadersLength, 整数型
    .成员 dwHeadersTotal, 整数型
    .成员 lpvBuffer, 整数型
    .成员 dwBufferLength, 整数型
    .成员 dwBufferTotal, 整数型
    .成员 dwOffsetLow, 整数型
    .成员 dwOffsetHigh, 整数型

.数据类型 tagExtractingInfoEx, 公开
    .成员 exinfo, tagExtractingInfo
    .成员 dwCompressedSize, 整数型
    .成员 dwCRC, 整数型
    .成员 uOSType, 整数型
    .成员 wRatio, 整数型
    .成员 wDate, 整数型
    .成员 wTime, 整数型
    .成员 szAttribute, 字节型, , "8"
    .成员 szMode, 字节型, , "8"

.数据类型 tagExtractingInfo, 公开
    .成员 dwFileSize, 整数型
    .成员 dwWriteSize, 整数型
    .成员 szSourceFileName, 字节型, , "513"
    .成员 dummy1, 字节型, , "3"
    .成员 szDestFileName, 字节型, , "513"
    .成员 dummy, 字节型, , "3"

.版本 2

.DLL命令 取系统版本号_ZR, 逻辑型, "kernel32.dll", "GetVersionExA", ,  
    .参数 系统版本结构, 系统版本结构, 传址

.DLL命令 GetSystemDirectory_HOOK, 整数型, "kernel32", "GetSystemDirectoryA", , , 这个函数能取得Windows系统目录（System目录）的完整路径名。在这个目录中，包含了所有必要的系统文件。根据微软的标准，其他定制控件和一些共享组件也可放到这个目录。通常应避免在这个目录里创建文件。在网络环境中，往往需要管理员权限才可对这个目录进行写操作  装载到lpBuffer缓冲区的字符数量。如lpBuffer不够大，不能容下文件名，则返回要求的缓冲区长度
    .参数 lpBuffer, 文本型, , 用于装载系统目录路径名的一个字串缓冲区。它应事先初始化成nSize+1个字符的长度。通常至少要为这个缓冲区分配MAX_PATH个字符的长度
    .参数 nSize, 整数型, , lpBuffer字串的最大长度;

.DLL命令 ReadProcessMemory_HOOK, 整数型, "kernel32", "ReadProcessMemory", , , 在进程中读内存
    .参数 hProcess, 整数型
    .参数 lpBaseAddress, 整数型
    .参数 lpBuffer, 字节集
    .参数 nSize, 整数型
    .参数 lpNumberOfBytesWritten, 整数型

.DLL命令 RtlMoveMemory_IMAGE_DOS_HEADER_HOOK, , , "RtlMoveMemory"
    .参数 Destination, IMAGE_DOS_HEADER
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_IMAGE_NT_HEADERS32_HOOK, , , "RtlMoveMemory"
    .参数 Destination, IMAGE_NT_HEADERS32
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_IMAGE_SECTION_HEADER_HOOK, , , "RtlMoveMemory"
    .参数 Destination, IMAGE_SECTION_HEADER, 数组
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_IMAGE_EXPORT_DIRECTORY_HOOK, , , "RtlMoveMemory"
    .参数 Destination, IMAGE_EXPORT_DIRECTORY
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 WriteProcessMemory_HOOK, 整数型, "kernel32", "WriteProcessMemory", , , 在指定进程中写内存
    .参数 hProcess, 整数型
    .参数 lpBaseAddress, 整数型
    .参数 lpBuffer, 字节集
    .参数 nSize, 整数型
    .参数 lpNumberOfBytesWritten, 整数型

.DLL命令 VirtualQueryEx_HOOK, 整数型, "kernel32", "VirtualQueryEx", , , 返回虚拟保护
    .参数 hProcess, 整数型
    .参数 lpAddress, 整数型
    .参数 lpBuffer, MEMORY_BASIC_INFORMATION_
    .参数 dwLength, 整数型

.DLL命令 VirtualProtectEx_HOOK, 整数型, "kernel32", "VirtualProtectEx", , , 修改虚拟保护
    .参数 hProcess, 整数型
    .参数 lpAddress, 整数型
    .参数 dwSize, 整数型
    .参数 flNewProtect, 整数型
    .参数 lpflOldProtect, 整数型, 传址

.DLL命令 lstrcpyn_字节集_HOOK, 整数型, "kernel32", "lstrcpynA"
    .参数 lpString1, 字节集
    .参数 lpString2, 字节集
    .参数 iMaxLength, 整数型

.DLL命令 GetModuleHandle_HOOK, 整数型, "kernel32", "GetModuleHandleA", , 获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 lpModuleName, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD;

.DLL命令 LoadLibrary_HOOK, 整数型, "kernel32", "LoadLibraryA", , 载入指定的动态链接库，并将它映射到当前进程使用的地址空间。一旦载入，即可访问库内保存的资源  成功则返回库模块的句柄，零表示失败。会设置GetLastError
    .参数 lpLibFileName, 文本型, , 指定要载入的动态链接库的名称。采用与CreateProcess函数的lpCommandLine参数指定的同样的搜索顺序;

.DLL命令 GetProcAddress_HOOK, 整数型, "kernel32", "GetProcAddress", , 返回函数地址
    .参数 hModule, 整数型
    .参数 lpProcName, 文本型

.DLL命令 FreeLibrary_HOOK, 整数型, "kernel32", "FreeLibrary", , 释放指定的动态链接库，它们早先是用LoadLibrary ;    API函数装载的  非零表示成功，零表示失败。会设置GetLastError
    .参数 hLibModule, 整数型, , 要释放的一个库句柄在VB里使用只能用这个函数释放那些由应用程序明确装载的DLL。对LoadLibrary的每一次调用都应该有一个对应的FreeLibrary调用;

.DLL命令 RtlMoveMemory_16_HOOK, , "kernel32", "RtlMoveMemory", , ,
    .参数 参数_1, 长整数型, 传址
    .参数 参数_2, 整数型, 传址
    .参数 参数_3, 整数型

.DLL命令 读取线程环境_ZR, 整数型, "ntdll.dll", "RtlMoveMemory"
    .参数 线程环境, 线程环境
    .参数 读取地址, 整数型
    .参数 读取长度, 整数型, , 204,716

.DLL命令 投递线程消息_ZR, 逻辑型, "user32.dll", "PostThreadMessageA"
    .参数 线程ID, 整数型
    .参数 消息ID, 整数型, , WM_COPYDATA=消息值2:消息数据=74
    .参数 消息值1, 整数型
    .参数 消息值2, 整数型

.DLL命令 读取模块区段_ZR, 整数型, "ntdll.dll", "RtlMoveMemory"
    .参数 模块区段, PE_区段, 传址 数组
    .参数 读取地址, 整数型
    .参数 读取长度, 整数型, , 段数*40

.DLL命令 读取导出函数_ZR, 整数型, "ntdll.dll", "RtlMoveMemory"
    .参数 导出函数, 导出函数, 传址
    .参数 数据地址, 整数型
    .参数 读取长度, 整数型, , 40

.DLL命令 GetCurrentProcessId_ZR, 整数型, "kernel32.dll", "GetCurrentProcessId", , 取自进程ID

.DLL命令 取temp目录_ZR, 逻辑型, "kernel32.dll", "GetTempPathA", , 成功=长度,失败=0
    .参数 内存长度, 整数型
    .参数 目录路径, 文本型, 传址, \结尾

.DLL命令 注册消息_ZR, 整数型, "user32.dll", "RegisterWindowMessageA", , 返回  &C000 到 &FFFF 间的一个消息编号,失败返回0
    .参数 消息名称, 文本型

.DLL命令 取system目录_ZR, 整数型, "kernel32.dll", "GetSystemDirectoryA", , 成功=长度,失败=0
    .参数 目录路径, 文本型, 传址, 无\结尾
    .参数 内存长度, 整数型

.DLL命令 取自线程ID_zr, 整数型, "kernel32.dll", "GetCurrentThreadId"

.DLL命令 读取模块映像_ZR, 整数型, "ntdll.dll", "RtlMoveMemory"
    .参数 模块映像, PE_映像, 传址
    .参数 读取地址, 整数型
    .参数 读取长度, 整数型, , 映像=96 + 目录=128 共 224字节

.DLL命令 载入DLL_NT_ZR, 整数型, "ntdll.dll", "LdrLoadDll", , LoadLibraryA  LoadLibraryExA
    .参数 文件路径, 整数型, , IN PWCHAR               PathToFile OPTIONAL
    .参数 加载方式, 整数型, 传址, IN ULONG                Flags OPTIONAL  0=加载并执行DLL,8=指定此DLL需连载其它DLL时优先搜索本DLL所在的目录，2＝只装载不执行DLLMAIN，1＝不初始化DLL(NT有效)
    .参数 模块文件, 整数型, , IN PUNICODE_STRING      ModuleFileName  WIN7宽文长度绝对不能含有0.0..内存长度含0.0
    .参数 模块句柄, 整数型, 传址, OUT PHANDLE             ModuleHandle 

.DLL命令 到宽字节集_ZR, 整数型, "kernel32.dll", "MultiByteToWideChar", , 返回成功转换出来的U码字符数目.失败返回-1
    .参数 代码页, 整数型, , CP_*,CP_ACP=0=A,CP_UTF7=65000,CP_UTF8=650001,UTF-16=1200,简体＝936=GB2312，繁体＝950=BIG5
    .参数 标志, 整数型, , MB_*,0
    .参数 源窄文本, 文本型, , 源A码文本数据
    .参数 文本长度, 整数型, , 源A码字节长度.-1=到{0}结尾
    .参数 保存宽文, 字节集, 传址, 需要先初始化字数长度*2内存
    .参数 宽文字数, 整数型, , 要转换保存的宽文本字符数目,0=返回取回U码字符数目

.DLL命令 读取系统进程_ZR, 逻辑型, "kernel32.dll", "ReadProcessMemory"
    .参数 进程句柄, 整数型
    .参数 读取指针, 整数型
    .参数 保存数据, 系统进程, 传址
    .参数 读取长度, 整数型, , 240
    .参数 实读长度, 整数型, 传址

.DLL命令 读取系统线程_ZR, 逻辑型, "kernel32.dll", "ReadProcessMemory"
    .参数 进程句柄, 整数型
    .参数 读取指针, 整数型
    .参数 保存数据, 枚举线程结构, 传址 数组
    .参数 读取长度, 整数型, , 64
    .参数 实读长度, 整数型, 传址

.DLL命令 复制所有对象结构_ZR, 整数型, "ntdll.dll", "RtlMoveMemory"
    .参数 目标地址, 所有对象信息, 传址 数组
    .参数 源地址, 整数型
    .参数 复制长度, 整数型

.DLL命令 等待消息对象_ZR, 整数型, "user32.dll", "MsgWaitForMultipleObjects", , 本函数会间接调用 等待多线象()
    .参数 对象数目, 整数型
    .参数 对象数组, 整数型, 传址 数组
    .参数 全部对象, 逻辑型
    .参数 等待时间, 整数型, , -1=无限等待 毫秒级
    .参数 消息类型, 整数型, , QS_* -1=任何消息

.DLL命令 到窄字节集_ZR, 整数型, "kernel32.dll", "WideCharToMultiByte", , 返回成功转换出来的A码字节长度,失败返回-1
    .参数 代码页, 整数型, , CP_*,CP_ACP=0=A,CP_UTF7=65000,CP_UTF8=650001,UTF-16=1200,简体＝936=GB2312，繁体＝950=BIG5
    .参数 标志, 整数型, , MB_*,0
    .参数 源宽数据, 字节集, , 源U码文本数据
    .参数 源宽字数, 整数型, , 源A码字符数目.-1=到{0,0}结尾
    .参数 保存窄文, 字节集, 传址, 需要先初始化A码文本字节长度内存
    .参数 内存长度, 整数型, , A码文本字节长度内存
    .参数 默认文本, 整数型, , LPCSTR lpDefaultChar,     // default for unmappable chars 默认映射的字符
    .参数 默认设置, 逻辑型, , LPBOOL lpUsedDefaultChar  // set when default char used   使用的默认字符设置

.DLL命令 等待进程初始化, 整数型, "user32.dll", "WaitForInputIdle", , 0=成功,258=超时,-1=句柄出错.调用 NtUserYieldTask(进程ID,等待时间,0) .只做一次等待进程空闲
    .参数 进程句柄, 整数型, , 测试指定进程是否已初始化后输入线程.MSDOS无效.可与创建进程配合用来判断是否已初始化好
    .参数 等待时间, 整数型, , -1=永久等待

.DLL命令 GetWindowThreadProcessId_ZR, 整数型, "user32.dll", "GetWindowThreadProcessId", , 线程_取ID
    .参数 hWnd, 整数型, , 指定窗口句柄
    .参数 lpdwProcessId, 整数型, 传址, 用于装载进程ID的变量

.DLL命令 OpenProcess_ZR, 整数型, "kernel32.dll", "OpenProcess", , 打开进程
    .参数 进程对象, 整数型
    .参数 继承句柄, 整数型
    .参数 进程标识符, 整数型

.DLL命令 VirtualAllocEx_ZR, 整数型, "Kernel32.dll", "VirtualAllocEx"
    .参数 进程句柄, 整数型, , IN HANDLE               ProcessHandle
    .参数 内存地址, 整数型, , IN OUT PVOID            *BaseAddress   NULL=自由分配地址
    .参数 分配长度, 整数型, , IN PULONG               RegionSize
    .参数 分配类型, 整数型, , IN ULONG                AllocationType 4096=申请提交内存,8192=申请保留内存
    .参数 保护属性, 整数型, , IN ULONG                Protect 

.DLL命令 创建远线程_ZRA, 整数型, "kernel32.dll", "CreateRemoteThread"
    .参数 进程句柄, 整数型
    .参数 安全结构, 整数型
    .参数 堆栈大小, 整数型
    .参数 线程入口, 整数型, , 存在 EAX
    .参数 线程参数, 整数型, , 存在 EBX
    .参数 是否执行, 整数型, , 0=执行，4=挂起
    .参数 线程ID, 整数型, 传址

.DLL命令 到窄文本型_ZR, 整数型, "kernel32.dll", "WideCharToMultiByte", , 返回成功转换出来的A码字节长度,失败返回-1
    .参数 代码页, 整数型, , CP_*,CP_ACP=0=A,CP_UTF7=65000,CP_UTF8=650001,UTF-16=1200,简体＝936=GB2312，繁体＝950=BIG5
    .参数 标志, 整数型, , MB_*,0
    .参数 源宽数据, 整数型, , 源U码文本数据
    .参数 源宽字数, 整数型, , 源A码字符数目.-1=到{0,0}结尾
    .参数 保存窄文, 文本型, 传址, 需要先初始化A码文本字节长度内存
    .参数 内存长度, 整数型, , A码文本字节长度内存
    .参数 默认文本, 整数型, , LPCSTR lpDefaultChar,     // default for unmappable chars 默认映射的字符
    .参数 默认设置, 逻辑型, , LPBOOL lpUsedDefaultChar  // set when default char used   使用的默认字符设置

.DLL命令 写出线程环境_ZR, 整数型, "ntdll.dll", "RtlMoveMemory"
    .参数 写到地址, 整数型
    .参数 线程环境, 线程环境
    .参数 写出长度, 整数型, , 204,716

.DLL命令 读取导入函数_ZR, 整数型, "ntdll.dll", "RtlMoveMemory", , 符号文件PDB格式 http://msdn.microsoft.com/en-us/library/x93ctkx8.aspx
    .参数 导入函数, 导入函数, 传址
    .参数 数据地址, 整数型
    .参数 读取长度, 整数型, , 20

.DLL命令 取短文件名_ZR, 文本型, "Shlwapi.dll", "PathFindFileNameA", , 提供 c:\windows\aa.exe 将返回 aa.exe 文件名
    .参数 文件名, 文本型

.DLL命令 取所有逻辑驱动器盘符_ZR, 整数型, "kernel32.dll", "GetLogicalDriveStringsA", , 返回长度
    .参数 内存长度, 整数型
    .参数 盘符名称, 字节集, , 每个盘符以 {0} 分隔 例如 C:\{0}D:\{0}E:\{0,0}

.DLL命令 IsWindow_ZR, 整数型, "user32.dll", "IsWindow", , 窗口_句柄是否有效  判断一个窗口句柄是否有效(非零表示成功，零表示失败)
    .参数 hwnd, 整数型

.DLL命令 取DOS设备名称_ZR, 整数型, "kernel32.dll", "QueryDosDeviceA"
    .参数 设备名称, 字节集, , c:
    .参数 盘符名称, 文本型, 传址, \Device\HarddiskVolume1
    .参数 盘符长度, 整数型

.DLL命令 ZwQueryInformationProcess_ZR, 整数型, "ntdll.dll", "ZwQueryInformationProcess", , ,0
    .参数 ProcessHandle, 整数型
    .参数 ProcessInformationClass, 整数型
    .参数 ProcessInformation, 进程基本信息
    .参数 ProcessInformationLength, 整数型
    .参数 ReturnLength, 整数型, 传址

.DLL命令 ZwWow64ReadVirtualMemory64, 整数型, "ntdll.dll", "ZwWow64ReadVirtualMemory64"
    .参数 ProcessHandle, 整数型, , 对象句柄
    .参数 BaseAddress, 长整数型, , 内存地址
    .参数 Buffer, 字节集, , 返回缓冲区
    .参数 BufferSize, 长整数型, , 写入大小
    .参数 NumberOfBytesRead, 长整数型, 传址, 实际写入大小

.DLL命令 ZwWow64WriteVirtualMemory64, 整数型, "ntdll.dll", "ZwWow64WriteVirtualMemory64"
    .参数 ProcessHandle, 整数型, , 对象句柄
    .参数 BaseAddress, 长整数型, , 内存地址
    .参数 Buffer, 字节集, , 返回缓冲区
    .参数 BufferSize, 长整数型, , 写入大小
    .参数 NumberOfBytesRead, 长整数型, 传址, 实际写入大小

.DLL命令 CopyMemory_DRAWITEMSTRUCT, , "kernel32.dll", "RtlMoveMemory"
    .参数 pDest, DRAWITEMSTRUCT
    .参数 pSrc, 整数型
    .参数 ByteLen, 整数型

.DLL命令 SendMessage_HDITEM, 整数型, "user32.dll", "SendMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。
    .参数 hwnd, 整数型, , 要接收消息的那个窗口的句柄
    .参数 wMsg, 整数型, , 消息的标识符
    .参数 wParam, 整数型, , 具体取决于消息
    .参数 lParam, HDITEM, , 具体取决于消息;

.DLL命令 HeapSize, 整数型, "kernel32.dll", "HeapSize", 公开, 返回堆对象的大小
    .参数 hHeap, 整数型
    .参数 dwFlags, 整数型
    .参数 lpMem, 整数型

.DLL命令 GetOEMCP, 整数型, "kernel32.dll", "GetOEMCP", 公开, 判断在OEM和ANSI字符集间转换的windows代码页

.DLL命令 GdipDeleteBrush, 整数型, "GdiPlus.dll", "GdipDeleteBrush", 公开
    .参数 brush, 整数型

.DLL命令 SendMessageWINDOWPOS, 整数型, "user32.dll", "SendMessageA"
    .参数 hWnd, 整数型
    .参数 Msg, 整数型
    .参数 wParam, 整数型
    .参数 lParam, WINDOWPOS

.DLL命令 SetConsoleMode, 逻辑型, "kernel32.dll", "SetConsoleMode", 公开, 对输入句柄的工作模式进行设置
    .参数 hConsoleHandle, 整数型, , 控制台句柄
    .参数 dwMode, 整数型

.DLL命令 GetConsoleMode, 逻辑型, "kernel32.dll", "GetConsoleMode", 公开
    .参数 hConsoleHandle, 整数型, , 0
    .参数 lpMode, 整数型, , 0

.DLL命令 InvalidateRect_逻辑型, 逻辑型, "user32.dll", "InvalidateRect"
    .参数 hWnd, 整数型
    .参数 lpRect, 整数型
    .参数 bErase, 逻辑型

.DLL命令 InvalidateRect, 整数型, "user32.dll", "InvalidateRect", 公开, 这个函数屏蔽一个窗口客户区的全部或部分区域。这会导致窗口在事件期间部分重画  非零表示成功，零表示失败
    .参数 hWnd, 整数型, , 待屏蔽窗口的句柄
    .参数 lpRect, 整数型, , RECT，用于描述待屏蔽矩形部分的一个矩形结构。可用InvalidateRectBynum函数，同时将lpRect设为零（Long数据类型），从而屏蔽（或禁用）整个窗口
    .参数 bErase, 整数型, , TRUE（非零）导致指定的区域在重画前先删除;

.DLL命令 GdipSaveImageToStream, 整数型, "gdiplus.dll", "GdipSaveImageToStream"
    .参数 image, 整数型
    .参数 stream, 整数型
    .参数 clsidEncoder, 字节集
    .参数 encoderParams, EncoderParameters

.DLL命令 CLSIDFromString_字节集传址2, 整数型, "ole32.dll", "CLSIDFromString"
    .参数 lpsz, 字节集
    .参数 pclsid, 字节集, 传址

.DLL命令 CLSIDFromString_字节, 整数型, "ole32.dll", "CLSIDFromString"
    .参数 lpsz, 字节集
    .参数 pclsid, 字节型, 传址 数组

.DLL命令 CLSIDFromString_GUID, 整数型, "ole32.dll", "CLSIDFromString"
    .参数 lpsz, 字节集
    .参数 pclsid, GUID

.DLL命令 CopyMemory_SYSTEM_PROCESSES, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, SYSTEM_PROCESSES
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 CoInternetSetFeatureEnabled, , "urlmon.dll", "CoInternetSetFeatureEnabled", 公开, 初始化浏览器属性
    .参数 FeatureEntry, 整数型
    .参数 dwFlags, 整数型
    .参数 Enable, 逻辑型

.DLL命令 GetVolumeInformationA, 逻辑型, "kernel32.dll", "GetVolumeInformationA", 公开
    .参数 lpRootPathName, 文本型, , 0
    .参数 lpVolumeNameBuffer, 文本型, , 0
    .参数 nVolumeNameSize, 整数型, , 0
    .参数 lpVolumeSerialNumber, 整数型, 传址, 0
    .参数 lpMaximumComponentLength, 整数型, 传址, 0
    .参数 lpFileSystemFlags, 整数型, 传址, 0
    .参数 lpFileSystemNameBuffer, 文本型, 传址, 0
    .参数 nFileSystemNameSize, 整数型, , 0

.DLL命令 GetFileAttributesA, 整数型, "kernel32.dll", "GetFileAttributesA", 公开
    .参数 lpFileName, 文本型, , 0

.DLL命令 StringFromGUID2, 整数型, "ole32.dll", "StringFromGUID2"
    .参数 rguid, 字节集
    .参数 lpsz, 字节集
    .参数 cchMax, 整数型

.DLL命令 CreateIconFromResourceEx, 整数型, "user32.dll", "CreateIconFromResourceEx"
    .参数 presbits, 整数型
    .参数 dwResSize, 整数型
    .参数 fIcon, 整数型
    .参数 dwVer, 整数型
    .参数 cxDesired, 整数型
    .参数 cyDesired, 整数型
    .参数 Flags, 整数型

.DLL命令 RtlMoveMemory_IconDirEntry, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, IconDirEntry
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 DefWindowProc, 整数型, "user32.dll", "DefWindowProcA"
    .参数 hwnd, 整数型
    .参数 wMsg, 整数型
    .参数 wParam, 整数型
    .参数 lParam, 整数型

.DLL命令 SetRect, 整数型, "user32.dll", "SetRect"
    .参数 lpRect, 整数型
    .参数 X1, 整数型
    .参数 Y1, 整数型
    .参数 X2, 整数型
    .参数 Y2, 整数型

.DLL命令 RtlMoveMemory_bytes, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, 字节型, 数组
    .参数 Source, 字节集
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_THUMBBUTTON2ptr, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, 整数型
    .参数 Source, THUMBBUTTON
    .参数 Length, 整数型

.DLL命令 RegisterWindowMessage, 整数型, "user32.dll", "RegisterWindowMessageA"
    .参数 lpString, 文本型

.DLL命令 LocalSize_IP_ADDR_STRING, 整数型, "kernel32.dll", "LocalSize", 公开
    .参数 hMem, IP_ADDR_STRING, 传址

.DLL命令 DestroyIcon, 逻辑型, "User32.dll", "DestroyIcon"
    .参数 hIcon, 整数型

.DLL命令 CopyMemory_IP_ADDR_STRING, , "kernel32.dll", "RtlMoveMemory", 公开
    .参数 Destination, IP_ADDR_STRING, 传址
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 CopyMemory_P2IP_ADAPTER_INFO, , "kernel32.dll", "RtlMoveMemory"
    .参数 pDest, IP_ADAPTER_INFO_彗星
    .参数 pSrc, 整数型
    .参数 ByteLen, 整数型

.DLL命令 LocalSize_IP_ADAPTER_INFO, 整数型, "kernel32.dll", "LocalSize", 公开, 返回本地内存块大小,类似sizeof
    .参数 hMem, IP_ADAPTER_INFO_彗星, 传址

.DLL命令 GetPtr_IP_ADAPTER_INFO, 整数型, "kernel32.dll", "lstrcpynA", 公开, , 取指针
    .参数 lpString1, IP_ADAPTER_INFO_彗星, 传址
    .参数 lpString2, IP_ADAPTER_INFO_彗星, 传址
    .参数 iMaxLength, 整数型, , 传递0

.DLL命令 lstrcpynA_Bin, 整数型, "kernel32.dll", "lstrcpynA"
    .参数 lpString1, 字节集
    .参数 lpString2, 字节集
    .参数 iMaxLength, 整数型

.DLL命令 GetPtr_Bin, 整数型, "kernel32.dll", "lstrcpynA", 公开, 取指针
    .参数 lpString1, 字节集, 传址
    .参数 lpString2, 字节集, 传址
    .参数 iMaxLength, 整数型, , 传递0

.DLL命令 EnumDisplayDevicesA, 逻辑型, "user32.dll", "EnumDisplayDevicesA"
    .参数 lpDevice, 整数型
    .参数 iDevNum, 整数型
    .参数 lpDisplayDevice, DISPLAY_DEVICEA
    .参数 DWORD, 整数型

.DLL命令 SetSecurityInfo, 整数型, "advapi32.dll", "SetSecurityInfo"
    .参数 handle, 整数型
    .参数 ObjectType, 整数型, , SE_KERNEL_OBJECT
    .参数 SecurityInfo, 整数型, , DACL_SECURITY_INformATION
    .参数 ppsidOwner, 整数型
    .参数 ppsidGrou, 整数型
    .参数 ppDacl, 字节集
    .参数 ppSacl, 整数型

.DLL命令 InitializeAcl, 逻辑型, "Advapi32.dll", "InitializeAcl"
    .参数 pAcl, 字节集
    .参数 nAclLength, 短整数型
    .参数 dwAclRevision, 短整数型

.DLL命令 SetProcessDPIAware, 逻辑型, "user32.dll", "SetProcessDPIAware", 公开, user32.dll的一个API函数,可用于防止UI自动放大

.DLL命令 StrToIntExA_整数, 整数型, "shlwapi.dll", "StrToIntExA"
    .参数 pszString, 整数型
    .参数 dwFlags, 整数型
    .参数 piRet, 整数型, 传址

.DLL命令 strrchr, 整数型, "ntdll.dll", "@strrchr", 公开
    .参数 s, 整数型
    .参数 c, 字节型

.DLL命令 strchr, 整数型, "ntdll.dll", "@strchr", 公开
    .参数 s, 整数型
    .参数 c, 字节型

.DLL命令 RtlMoveMemory_LDR_DATA_TABLE_ENTRY64, , "kernel32.dll", "RtlMoveMemory"
    .参数 目的地址, LDR_DATA_TABLE_ENTRY64, , any
    .参数 源地址, 字节集, , any
    .参数 复制尺寸, 整数型

.DLL命令 wvsprintfA_整数型, 整数型, "user32.dll", "wvsprintfA"
    .参数 lpstr, 整数型
    .参数 lpcstr, 文本型
    .参数 OptionalArguments, 整数型, 传址

.DLL命令 wvsprintf, 整数型, "user32.dll", "wvsprintfA"
    .参数 lpstr, 文本型
    .参数 lpcstr, 文本型
    .参数 OptionalArguments, 长整数型, 传址

.DLL命令 RtlMoveMemory_BITMAPFILEHEADER_整数1, , "kernel32.dll", "RtlMoveMemory", , 　
    .参数 pBlock, 整数型
    .参数 缓冲区, BITMAPFILEHEADER
    .参数 尺寸, 整数型

.DLL命令 RtlMoveMemory_BITMAPINFOHEADER_整数, , "kernel32.dll", "RtlMoveMemory", , 　
    .参数 pBlock, 整数型
    .参数 缓冲区, BITMAPINFOHEADER
    .参数 尺寸, 整数型

.DLL命令 LoadString, 整数型, "user32.dll", "LoadStringA", , 装入字符串资源
    .参数 hInstance, 整数型
    .参数 wID, 整数型
    .参数 lpBuffer, 文本型
    .参数 nBufferMax, 整数型

.DLL命令 LoadStringW, 整数型, "user32.dll", "LoadStringW"
    .参数 hInstance, 整数型
    .参数 uID, 整数型
    .参数 lpBuffer, 整数型
    .参数 cchBufferMax, 整数型

.DLL命令 获取设备GammaRamp, 逻辑型, "gdi32.dll", "GetDeviceGammaRamp", 公开
    .参数 hdc, 整数型
    .参数 lpv, 短整数型, 数组

.DLL命令 设置设备GammaRamp, 逻辑型, "gdi32.dll", "SetDeviceGammaRamp", 公开
    .参数 hdc, 整数型
    .参数 lpv, 短整数型, 数组

.DLL命令 Beep, 逻辑型, "kernel32.dll", "Beep", 公开
    .参数 dwFreq, 整数型
    .参数 dwDuration, 整数型

.DLL命令 ReadProcessMemory_TRAYDATA, 整数型, "kernel32.dll", "ReadProcessMemory", , 在进程中读内存
    .参数 hProcess, 整数型
    .参数 lpBaseAddress, 整数型
    .参数 lpBuffer, TRAYDATA, 传址
    .参数 nSize, 整数型
    .参数 lpNumberOfBytesWritten, 整数型, 传址

.DLL命令 ReadProcessMemory_Bin, 整数型, "kernel32.dll", "ReadProcessMemory", , 在进程中读内存
    .参数 hProcess, 整数型
    .参数 lpBaseAddress, 整数型
    .参数 lpBuffer, 字节集, 传址
    .参数 nSize, 整数型
    .参数 lpNumberOfBytesWritten, 整数型, 传址

.DLL命令 ReadProcessMemory_BButton, 整数型, "kernel32.dll", "ReadProcessMemory", , 在进程中读内存
    .参数 hProcess, 整数型
    .参数 lpBaseAddress, 整数型
    .参数 lpBuffer, TBBUTTON, 传址
    .参数 nSize, 整数型
    .参数 lpNumberOfBytesWritten, 整数型, 传址

.DLL命令 ZwQuerySystemInformation_x, 整数型, "ntdll.dll", "ZwQuerySystemInformation"
    .参数 SystemInformationClass, 整数型, , 未知类型：SYSTEM_INFORMATION_CLASS。
    .参数 SystemInformation, 字节集, , any
    .参数 SystemInformationLength, 整数型
    .参数 ReturnLength, 整数型, 传址

.DLL命令 取指针_字节集, 整数型, "Kernel32.dll", "lstrcpyn", 公开, 常规API
    .参数 欲取其指针, 字节集, 传址
    .参数 欲取其指针, 字节集, 传址
    .参数 保留, 整数型, , 0

.DLL命令 RtlMoveMemory_整数传址1, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 常规API,从地址读一个整数
    .参数 dest, 整数型, 传址
    .参数 Source, 整数型
    .参数 len, 整数型, , 4

.DLL命令 ZwOpenProcess, 整数型, "ntdll.dll", "ZwOpenProcess", 公开
    .参数 hProcess, 整数型, 传址
    .参数 DesiredAccess, 整数型
    .参数 ObjectAttributes, OBJECT_ATTRIBUTES
    .参数 ClientId, CLIENT_ID

.DLL命令 RtlMoveMemory_SYSTEM_HANDLE_TABLE_ENTRY_INFO, 整数型, "kernel32.dll", "RtlMoveMemory", , SYSTEM_HANDLE_TABLE_ENTRY_INFO
    .参数 dest, SYSTEM_HANDLE_TABLE_ENTRY_INFO
    .参数 Source, 整数型
    .参数 len, 整数型, , 284

.DLL命令 ZwDuplicateObject, 整数型, "ntdll.dll", "ZwDuplicateObject", 公开
    .参数 SourceProcessHandle, 整数型
    .参数 SourceHandle, 整数型
    .参数 TargetProcessHandle, 整数型
    .参数 TargetHandle, 整数型, 传址
    .参数 DesiredAccess, 整数型
    .参数 HandleAttributes, 整数型
    .参数 Options, 整数型

.DLL命令 ZwCreateJobObject, 整数型, "ntdll.dll", "ZwCreateJobObject", 公开
    .参数 JobHandle, 整数型, 传址
    .参数 DesiredAccess, 整数型
    .参数 ObjectAttributes, OBJECT_ATTRIBUTES

.DLL命令 ZwAssignProcessToJobObject, 整数型, "ntdll.dll", "ZwAssignProcessToJobObject", 公开
    .参数 JobHandle, 整数型
    .参数 ProcessHandle, 整数型

.DLL命令 ZwTerminateJobObject, 整数型, "ntdll.dll", "ZwTerminateJobObject", 公开
    .参数 JobHandle, 整数型
    .参数 ExitStatus, 整数型

.DLL命令 ZwTerminateProcess, 整数型, "ntdll.dll", "ZwTerminateProcess", 公开
    .参数 ProcessHandle, 整数型
    .参数 ExitStatus, 整数型

.DLL命令 ZwClose, 整数型, "ntdll.dll", "ZwClose", 公开
    .参数 hnd

.DLL命令 GetProcessImageFileNameA, 整数型, "psapi.dll", "GetProcessImageFileNameA", 公开
    .参数 hProcess, 整数型
    .参数 lpImageFileName, 文本型
    .参数 nSize, 整数型

.DLL命令 关闭内核对象_, 整数型, "kernel32.dll", "CloseHandle", 公开, $(b)非零表示成功，零表示失败
    .参数 对象句柄, 整数型, , hObject，欲关闭的一个对象的句柄

.DLL命令 QueryDosDeviceA, 整数型, "kernel32.dll", "QueryDosDeviceA", 公开
    .参数 lpDeviceName, 文本型
    .参数 lpTargetPath, 文本型
    .参数 ucchMax, 整数型

.DLL命令 RtlMoveMemory_IP_PER_ADAPTER_INFO, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, IP_PER_ADAPTER_INFO, 传址
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 GetPerAdapterInfo, 整数型, "IPHlpApi.dll", "GetPerAdapterInfo"
    .参数 IfIndex, 整数型
    .参数 pPerAdapterInfo, 字节集
    .参数 pOutBufLen, 整数型, 传址

.DLL命令 RtlMoveMemory_IP_ADAPTER_INFO, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, IP_ADAPTER_INFO, 传址
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 取变量地址_字节集, 整数型, "kernel32.dll", "lstrcpynA"
    .参数 变量, 字节集, 传址
    .参数 变量, 字节集, 传址
    .参数 保留, 整数型, , 0

.DLL命令 SetThreadContext, 整数型, "kernel32.dll", "SetThreadContext"
    .参数 hThread, 整数型
    .参数 lpContext, CONTEXT86, 传址

.DLL命令 Len_ish, 整数型, "kernel32.dll", "LocalSize"
    .参数 hMem, IMAGE_SECTION_HEADER, 传址

.DLL命令 RtlMoveMemory_IMAGE_SECTION_HEADER, , "kernel32.dll", "RtlMoveMemory"
    .参数 Dest, IMAGE_SECTION_HEADER, 传址
    .参数 Src, 字节型, 传址
    .参数 L, 整数型

.DLL命令 ZwUnmapViewOfSection, 整数型, "ntdll.dll", "ZwUnmapViewOfSection"
    .参数 hProcess, 整数型
    .参数 BaseAddress, 整数型, 传址

.DLL命令 ReadProcessMemory, 整数型, "kernel32.dll", "ReadProcessMemory"
    .参数 hProcess, 整数型
    .参数 lpBaseAddress, 整数型
    .参数 lpBuffer, 整数型, 传址
    .参数 nSize, 整数型
    .参数 lpNumberOfBytesWritten, 整数型, 传址

.DLL命令 WriteProcessMemory_整数35, 整数型, "kernel32.dll", "WriteProcessMemory"
    .参数 hProcess, 整数型
    .参数 lpBaseAddress, 整数型
    .参数 lpBuffer, 整数型, 传址
    .参数 nSize, 整数型
    .参数 lpNumberOfBytesWritten, 整数型, 传址

.DLL命令 WriteProcessMemory, 整数型, "kernel32.dll", "WriteProcessMemory"
    .参数 hProcess, 整数型
    .参数 lpBaseAddress, 整数型
    .参数 lpBuffer, 字节型, 传址
    .参数 nSize, 整数型
    .参数 lpNumberOfBytesWritten, 整数型, 传址

.DLL命令 GetThreadContext, 整数型, "kernel32.dll", "GetThreadContext"
    .参数 hThread, 整数型
    .参数 lpContext, CONTEXT86, 传址

.DLL命令 Len_inh, 整数型, "kernel32.dll", "LocalSize"
    .参数 hMem, IMAGE_NT_HEADERS, 传址

.DLL命令 RtlMoveMemory_IMAGE_NT_HEADERS, , "kernel32.dll", "RtlMoveMemory"
    .参数 Dest, IMAGE_NT_HEADERS, 传址
    .参数 Src, 字节型, 传址
    .参数 L, 整数型

.DLL命令 Len_idh, 整数型, "kernel32.dll", "LocalSize"
    .参数 hMem, IMAGE_DOS_HEADER, 传址

.DLL命令 RtlMoveMemory_IMAGE_DOS_HEADER, , "kernel32.dll", "RtlMoveMemory", 公开
    .参数 Dest, IMAGE_DOS_HEADER, 传址
    .参数 Src, 字节型, 传址
    .参数 L, 整数型

.DLL命令 CoCreateGuid, , "ole32.dll", "CoCreateGuid", 公开
    .参数 guid, 字节集

.DLL命令 RtlMoveMemory_字节集传址1, , "kernel32.dll", "RtlMoveMemory", 公开, 内存拷贝
    .参数 Destination, 字节集, 传址
    .参数 字节集指针, 整数型
    .参数 数据长度, 整数型

.DLL命令 HeapDestroy, 逻辑型, "Kernel32.dll", "HeapDestroy", 公开, 释放堆
    .参数 hHeap, 整数型, , 堆句柄

.DLL命令 HeapCreate, 整数型, "kernel32.dll", "HeapCreate", 公开, 创建一个堆
    .参数 dwFlags, 整数型, , 创建方式 内存块标志。 为1 不检测独占
    .参数 len, 整数型, , 默认大小
    .参数 Exlen, 整数型, , 扩展大小 0为无限制

.DLL命令 InitializeCriticalSection_临界许可, , "kernel32.dll", "InitializeCriticalSection", 公开, 创建许可证
    .参数 lpCriticalSection, 临界许可, 传址

.DLL命令 DeleteCriticalSection_临界许可, 整数型, "kernel32.dll", "DeleteCriticalSection", 公开, 销毁许可证
    .参数 lpCriticalSection, 临界许可, 传址

.DLL命令 EnterCriticalSection_临界许可, , "kernel32.dll", "EnterCriticalSection", 公开, 进入许可区
    .参数 lpCriticalSection, 临界许可, 传址

.DLL命令 LeaveCriticalSection_临界许可, , "kernel32.dll", "LeaveCriticalSection", 公开, 退出许可区
    .参数 lpCriticalSection, 临界许可, 传址

.DLL命令 RtlMoveMemory_Eint_int, 逻辑型, "kernel32.dll", "RtlMoveMemory", 公开, 移动内存
    .参数 Dest, 整数型, , 目标地址
    .参数 Src, 整数型, 传址, 原地址
    .参数 length, 整数型, , 长度

.DLL命令 RtlMoveMemory_Ebin_int, 逻辑型, "kernel32.dll", "RtlMoveMemory", 公开, 移动内存
    .参数 Dest, 整数型, , 目标地址
    .参数 Src, 字节集, 传址, 原地址
    .参数 length, 整数型, , 长度

.DLL命令 RtlMoveMemory_Estr_int, 逻辑型, "kernel32.dll", "RtlMoveMemory", 公开, 移动内存
    .参数 Dest, 整数型, , 目标地址
    .参数 Src, 文本型, 传址, 原地址
    .参数 length, 整数型, , 长度

.DLL命令 AccessibleChildren, 整数型, "OLEACC.DLL", "AccessibleChildren", 公开
    .参数 paccContainer, 整数型
    .参数 iChildStart, 整数型
    .参数 cChildren, 整数型
    .参数 rgvarChildren, 变体型, 数组
    .参数 pcObtained, 整数型, 传址

.DLL命令 AccessibleObjectFromWindow, 整数型, "OLEACC.DLL", "AccessibleObjectFromWindow", 公开
    .参数 hwnd, 整数型
    .参数 dwId, 整数型
    .参数 riid, 字节集
    .参数 ppvObject, 整数型

.DLL命令 RtlMoveMemory_obj2pint, , "kernel32.dll", "RtlMoveMemory", 公开
    .参数 Destination, 整数型, 传址
    .参数 Source, 对象
    .参数 Length, 整数型

.DLL命令 GetStateText, 整数型, "OLEACC.DLL", "GetStateTextA", 公开
    .参数 lStateBit, 整数型
    .参数 lpszState, 文本型
    .参数 cchState, 整数型

.DLL命令 GetStateText_int, 整数型, "OLEACC.DLL", "GetStateTextA", 公开
    .参数 lStateBit, 整数型
    .参数 lpszState, 整数型
    .参数 cchState, 整数型

.DLL命令 GetRoleText, 整数型, "OLEACC.DLL", "GetRoleTextA", 公开
    .参数 lRole, 整数型
    .参数 lpszRole, 文本型
    .参数 cchRoleMax, 整数型

.DLL命令 GetRoleText_int, 整数型, "OLEACC.DLL", "GetRoleTextA", 公开
    .参数 lRole, 整数型
    .参数 lpszRole, 整数型
    .参数 cchRoleMax, 整数型

.DLL命令 WindowFromAccessibleObject, , "OLEACC.DLL", "WindowFromAccessibleObject", 公开
    .参数 TIAccessible, 整数型
    .参数 phwnd, 整数型, 传址

.DLL命令 AccessibleObjectFromPoint, 整数型, "OLEACC.DLL", "AccessibleObjectFromPoint", 公开
    .参数 ptScreenx, 整数型
    .参数 ptScreeny, 整数型
    .参数 ppacc, 整数型
    .参数 pvarChild, 变体型, 传址

.DLL命令 BlockInput, 整数型, "user32.dll", "BlockInput", 公开
    .参数 fBlock, , , 1.锁定，0.解除

.DLL命令 GetShortPathName, 整数型, "kernel32.dll", "GetShortPathNameA", 公开
    .参数 lpszLongPath, 文本型
    .参数 lpszShortPath, 文本型
    .参数 cchBuffer, 整数型

.DLL命令 mciSendString, 整数型, "winmm.dll", "mciSendStringA"
    .参数 lpstrCommand, 文本型
    .参数 lpstrReturnString, 文本型
    .参数 uReturnLength, 整数型
    .参数 hwndCallback, 整数型

.DLL命令 CryptDecrypt_x, 逻辑型, "advapi32.dll", "CryptDecrypt"
    .参数 hKey, 整数型
    .参数 hHash, 整数型
    .参数 Final, 逻辑型
    .参数 dwFlags, 整数型
    .参数 pbData, 字节集, 传址
    .参数 pdwDataLen, 整数型, 传址

.DLL命令 CryptEncrypt_x, 逻辑型, "advapi32.dll", "CryptEncrypt"
    .参数 hKey, 整数型
    .参数 hHash, 整数型
    .参数 Final, 逻辑型
    .参数 dwFlags, 整数型
    .参数 pbData, 字节集, 传址
    .参数 pdwDataLen, 整数型, 传址
    .参数 dwBufLen, 整数型

.DLL命令 CryptGetHashParam_x, 逻辑型, "advapi32.dll", "CryptGetHashParam"
    .参数 hHash, 整数型
    .参数 dwParam, 整数型
    .参数 pByte, 整数型
    .参数 pdwDataLen, 整数型, 传址
    .参数 dwFlags, 整数型

.DLL命令 CryptHashData_x, 逻辑型, "advapi32.dll", "CryptHashData", 公开
    .参数 hHash, 整数型
    .参数 pbData, 字节集, 传址
    .参数 dwDataLen, 整数型
    .参数 dwFlags, 整数型

.DLL命令 CryptReleaseContext_x, 逻辑型, "advapi32.dll", "CryptReleaseContext", 公开
    .参数 hProv, 整数型
    .参数 dwFlags, 整数型

.DLL命令 CryptCreateHash_x, 逻辑型, "advapi32.dll", "CryptCreateHash", 公开
    .参数 hProv, 整数型
    .参数 Algid, 整数型
    .参数 hKey, 整数型
    .参数 dwFlags, 整数型
    .参数 phHash, 整数型, 传址

.DLL命令 CryptAcquireContext_x, 逻辑型, "advapi32.dll", "CryptAcquireContextA", 公开
    .参数 phProv, 整数型, 传址
    .参数 pszContainer, 文本型
    .参数 pszProvider, 文本型
    .参数 dwProvType, 整数型
    .参数 dwFlags, 整数型

.DLL命令 CryptGetKeyParam, 逻辑型, "advapi32.dll", "CryptGetKeyParam"
    .参数 hKey, 整数型
    .参数 dwParam, 整数型
    .参数 pbData, 字节集, 传址
    .参数 pdwDataLen, 整数型, 传址
    .参数 dwFlags, 整数型

.DLL命令 CryptSetKeyParam, 逻辑型, "advapi32.dll", "CryptSetKeyParam"
    .参数 hKey, 整数型
    .参数 dwParam, 整数型
    .参数 pbData, 字节集
    .参数 dwFlags, 整数型

.DLL命令 取得物理字体信息_, 整数型, "gdi32.dll", "GetTextMetricsA"
    .参数 设备场景, 整数型
    .参数 属性信息, 物理字体属性信息_

.DLL命令 CryptImportKey, 逻辑型, "advapi32.dll", "CryptImportKey"
    .参数 hProv, 整数型
    .参数 pbData, 字节集
    .参数 dwDataLen, 整数型
    .参数 hPubKey, 整数型
    .参数 dwFlags, 整数型
    .参数 phKey, 整数型, 传址

.DLL命令 SetMapMode, 整数型, "gdi32.dll", "SetMapMode", , 设置指定设备场景的映射模式  执行成功为设备场景原来的映射模式，失败为0
    .参数 hdc, 整数型, , 设备场景句柄
    .参数 nMapMode, 整数型, , 下列常数之一：;MM_ANISOTROPIC：视口和窗口范围可完全任意;MM_HIENGLISH：逻辑单元为0.001 inch，起点在左下角;MM_HIMETRIC：逻辑单元为0.01 millimeter，起点在左下角;MM_ISOTROPIC：视口和窗口范围任意，只是x和y逻辑单元尺寸要相同;MM_LOENGLISH：逻辑单元为0.01 inch，起点在左下角;MM_HIMETRIC：逻辑单元为0.1 millimeter，起点在左下角;MM_TEXT：逻辑单元为一个像素;MM_TWIPS：逻辑单元为1 twip (1/1440 inch)，起点在左下角;

.DLL命令 取屏幕句柄_, 整数型, "user32.dll", "GetDesktopWindow"

.DLL命令 取窗口全部设备场景_, 整数型, "user32.dll", "GetWindowDC"
    .参数 窗口句柄, 整数型

.DLL命令 释放设备场景_, 整数型, "user32.dll", "ReleaseDC", , ReleaseDC
    .参数 窗口句柄, 整数型, , hwnd，要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , hdc，要释放的设备场景句柄

.DLL命令 NtReadVirtualMemory_Bin, 整数型, "ntdll.dll", "NtReadVirtualMemory", 公开
    .参数 句柄, 整数型
    .参数 地址, 整数型
    .参数 缓冲区, 字节集
    .参数 读取长度, 整数型
    .参数 实际读取长度, 整数型, 传址

.DLL命令 ZwQueryInformationProcess, 整数型, "NTDLL.DLL", "ZwQueryInformationProcess"
    .参数 ProcessHandle, 整数型
    .参数 ProcessInformationClass, 整数型
    .参数 ProcessInformation, PROCESS_BASIC_INFORMATION
    .参数 ProcessInformationLength, 整数型
    .参数 ReturnLength, 整数型, 传址

.DLL命令 LookupAccountSidA, 逻辑型, "Advapi32.dll", "LookupAccountSidA"
    .参数 lpSystemName, 整数型
    .参数 Sid, 整数型
    .参数 Name, 整数型
    .参数 cchName, 整数型, 传址
    .参数 ReferencedDomainName, 整数型
    .参数 cchReferencedDomainName, 整数型, 传址
    .参数 peUse, 整数型, 传址

.DLL命令 WinStationGetProcessSid, 整数型, "Winsta.dll", "WinStationGetProcessSid"
    .参数 hServer, 整数型
    .参数 ProcessId, 整数型
    .参数 ProcessStartTime, 长整数型
    .参数 pProcessUserSid, 整数型
    .参数 dwSidSize, 整数型, 传址

.DLL命令 RtlMoveMemory_SYSTEM_PROCESSES, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, SYSTEM_PROCESS_INFORMATION_ex
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 NtWow64QueryInformationProcess64_Basic, 整数型, "ntdll.dll", "NtWow64QueryInformationProcess64"
    .参数 hProcess, 整数型
    .参数 ProcessInfoclass, 整数型
    .参数 pBuffer, PROCESS_BASIC_INFORMATION64
    .参数 nSize, 整数型
    .参数 nReturnSize, 整数型

.DLL命令 NtWow64ReadVirtualMemory64_LDR, 整数型, "ntdll.dll", "NtWow64ReadVirtualMemory64"
    .参数 hProcess, 整数型
    .参数 pMemAddress, 长整数型
    .参数 pBuffer, PEB_LDR_DATA
    .参数 nSize, 长整数型
    .参数 nReturnSize, 整数型

.DLL命令 NtWow64ReadVirtualMemory64_Process, 整数型, "ntdll.dll", "NtWow64ReadVirtualMemory64"
    .参数 hProcess, 整数型
    .参数 pMemAddress, 长整数型
    .参数 pBuffer, RTL_USER_PROCESS_PARAMETERS
    .参数 nSize, 长整数型
    .参数 nReturnSize, 整数型

.DLL命令 NtWow64ReadVirtualMemory64_bin, 整数型, "ntdll.dll", "NtWow64ReadVirtualMemory64"
    .参数 hProcess, 整数型
    .参数 pMemAddress, 长整数型
    .参数 pBuffer, 字节集
    .参数 nSize, 长整数型
    .参数 nReturnSize, 整数型

.DLL命令 lms520_SendMessageTimeout, 整数型, "user32.dll", "SendMessageTimeoutA", , SendMessageTimeout，Long，成功时返回TRUE，失败时返回FALSE。会设置GetLastError
    .参数 窗口句柄, 整数型, , hwnd，要接收消息的一个窗口的句柄
    .参数 标识符, 整数型, , msg，消息的标识符
    .参数 消息1, 整数型, , wparam，由消息决定
    .参数 消息2, 整数型, , lparam，由消息决定
    .参数 类型, 整数型, , fuflags，下述常数的一个或多个SMTO_ABORTIFHUNG如目标进程挂起，则函数立即返回
    .参数 超时值, 整数型, , utimeout，超时值，采用毫秒为单位
    .参数 结果, 整数型, , lpdwresult，用于装载函数结果的一个变量

.DLL命令 GetQueuedCompletionStatus, 整数型, "kernel32.dll", "GetQueuedCompletionStatus", 公开, 函数有个OVERLAPPED结构，很多资料上都采用不同的结构体来扩展该结构，比如有的资料定义：
    .参数 CompletionPort, 整数型
    .参数 lpNumberOfBytesTransferred, 整数型, 传址
    .参数 lpCompletionKey, 整数型, 传址
    .参数 lpOverlapped, 整数型, 传址
    .参数 dwMilliseconds, 整数型

.DLL命令 SHChangeNotify, , "shell32.dll", "SHChangeNotify", 公开, 刷新关联图标
    .参数 SHCNE_ASSOCCHANGED, 整数型, , 134217728
    .参数 SHCNF_IDLIST, 整数型, , 0
    .参数 nil, 整数型, , 0
    .参数 nil, 整数型, , 0

.DLL命令 ScreenToClient, 整数型, "user32.dll", "ScreenToClient", , 该函数把屏幕上指定点的屏幕坐标转换成用户坐标。 判断屏幕上一个指定点的客户区坐标　非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 一个窗口的句柄，该窗口定义了要使用的客户区坐标系统
    .参数 lpPoint, 精易_坐标, , POINTAPI，屏幕坐标系统中包含了屏幕点的结构。这个函数会随同相应的客户区坐标（由hwnd决定）载入结构;

.DLL命令 ChildWindowFromPointEx, 整数型, "user32.dll", "ChildWindowFromPointEx", , 返回父窗口中包含了指定点的第一个子窗口的句柄   
    .参数 hWnd, 整数型, , 说明 http://topic.csdn.net/t/20021107/17/1157529.html
    .参数 x, 整数型
    .参数 y, 整数型
    .参数 un, 整数型, , CWP_ALL(0) = 测试所有窗口

.DLL命令 GetFileTitleA, 整数型, "Comdlg32.dll", "GetFileTitleA", 公开
    .参数 lpszFile, 文本型
    .参数 lpszTitle, 文本型
    .参数 cbBuf, 整数型

.DLL命令 CreateIoCompletionPort, 整数型, "kernel32.dll", "CreateIoCompletionPort", 公开, 函数关联一个已打开的文件实例和新建的或已存在的I/0完成端口，或者创建一个未关联任何文件的I/O完成端口。
    .参数 Handle, 整数型
    .参数 ExistingCompletionPort, 整数型
    .参数 CompletionKey, 整数型
    .参数 NumberOfConcurrentThreads, 整数型

.DLL命令 PostQueuedCompletionStatus, 整数型, "kernel32.dll", "PostQueuedCompletionStatus", 公开, 在进行重叠I/O操作的同时，强行释放一个OVERLAPPED结构，最好的方法是针对每一个套接字句柄，调用CloseSocket函数。任何尚未进行的重叠I/O操作都会完成。一旦所有套接字关闭，便需在完成端口上，终止所有工作者线程。这时候需要使用PostQueuedCompletionStatus 。
    .参数 CompletionPort, 整数型
    .参数 dwNumberOfBytesTransferred, 整数型
    .参数 dwCompletionKey, 整数型
    .参数 lpOverlapped, 整数型

.DLL命令 RemovePropA, 整数型, "user32.dll", "RemovePropA", 公开, 该函数从指定的窗口的属性表中删除一项。指定的字符串标识了要删除的项。 
    .参数 hWnd, 整数型, , 指向要改变属性项的窗口的句柄。
    .参数 lpString, 文本型, , 指向以null结尾的字符串指针，或者包含一个标识字符串的原子。如果该参数是一个原子，那么它必须是使用AddAtom函数创建的。原子是16位的数据值，它必须是放置在lpString参数的低位字中， 

.DLL命令 SetPropA, 逻辑型, "user32.dll", "SetPropA", 公开, 该函数在指定窗口的属性表中增加一个新项，或者修改一个现有项。如果指定的字符串不在属性表中，那么就增加该新的项，新项中包含该字符串和句柄，否则就用指定的句柄替换该字符串的全前句柄。 
    .参数 hWnd, 整数型, , 指向窗口的句柄，该窗口的属性表要接收一个新项。 
    .参数 lpString, 文本型, , 指向以null结尾的字符串指针，或者包含一个标识字符串的原子。如果该参数是一个原子，么它必须是以前使用GlobalAddAtom函数创建的。原子是16位的数据值，它必须是放置在lpstring参数低位字中，而高位字必须为O。 
    .参数 hData, 整数型, , 指向要拷贝到属性表中的数据的句柄。该数据句柄可以标识任何对应用程序有用的值。 

.DLL命令 GetPropA, 整数型, "user32.dll", "GetPropA", 公开, 该函数从给定窗口的属性列表中检索数据句柄。给定的字符串标识了要检索的句柄。该字符串和句柄必须在前一次调用SetProp函数时已经加到属性表中。 
    .参数 hWnd, 整数型, , 指向要搜索属性表的窗口。 返回值：如果属性表中包含了给定的字符串，那么返回值为相关的数据句柄。否则，返回值为NULL。
    .参数 lpString, 文本型, , 指向以null结尾的字符串指针，或者包含一个标识字符串的原子。如果该参数是一个原子，那么它必须是使用GlobalAddAtom函数创建的。原子是16位的数据值，它必须是放置在lpstring参数的低位率中，而高位字必须为O。 

.DLL命令 WriteFile, 逻辑型, "kernel32.dll", "WriteFile", 公开
    .参数 hFile, 整数型, , 一个文件的句柄
    .参数 lpBuffer, 字节集, , 要写入的一个数据缓冲区
    .参数 nNumberOfBytesToWrite, 整数型, , 要写入数据的字节数量。如写入零字节，表示什么都不写入，但会更新文件的“上一次修改时间”。针对位于远程系统的命名管道，限制在65535个字节以内
    .参数 lpNumberOfBytesWritten, 整数型, 传址, 实际写入文件的字节数量
    .参数 lpOverlapped, 整数型

.DLL命令 GetScrollPos, 整数型, "user32.dll", "GetScrollPos", 公开
    .参数 hWnd, 整数型
    .参数 nBar, 整数型

.DLL命令 DeleteUrlCacheEntry, , "wininet.dll", "DeleteUrlCacheEntry", 公开, ,删除Url缓存入口_
    .参数 Url名称, 文本型, , lpszUrlName

.DLL命令 FindFirstUrlCacheEntryA, 整数型, "wininet.dll", "FindFirstUrlCacheEntryA", 公开, 寻找第一个Url缓存入口_
    .参数 寻找样式, 文本型, , lpszUrlSearchPattern
    .参数 第一个Url缓存入口信息, 字节集, , lpFirstCacheEntryInfo
    .参数 第一个Url缓存入口信息大小, 整数型, 传址, lpdwFirstCacheEntryInfoBufferSize

.DLL命令 FindNextUrlCacheEntryA, 整数型, "wininet.dll", "FindNextUrlCacheEntryA", 公开, 寻找下一个Url缓存入口_
    .参数 下一个Url缓存入口信息, 整数型, , lpNextCacheEntryInfo
    .参数 lpNextCacheEntryInfo, 字节集, , Any型,根据需要可以设置成不同的类型
    .参数 下一个Url缓存入口信息大小, 整数型, 传址, lpdwNextCacheEntryInfoBufferSize

.DLL命令 FindCloseUrlCache, 整数型, "wininet.dll", "FindCloseUrlCache", 公开, 关闭寻找缓存_
    .参数 枚举句柄, 整数型, , hEnumHandle

.DLL命令 SHFileOperationA, 整数型, "Shell32.dll", "SHFileOperationA", 公开
    .参数 文件参数, SHFILEOPSTRUCT

.DLL命令 SHFileOperationW, 整数型, "Shell32.dll", "SHFileOperationW"
    .参数 lpFileOp, SHFILEOPSTRUCT

.DLL命令 gethostbyname, 整数型, "ws2_32.dll", "gethostbyname", 公开, 成功返回内存指针
    .参数 name, 文本型, , 机器名称

.DLL命令 UpdateWindow, 整数型, "user32.dll", "UpdateWindow", 公开, 强制立即更新窗口，窗口中以前屏蔽的所有区域都会重画（在vb里使用：如vb窗体或控件的任何部分需要更新，可考虑直接使用refresh方法  非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 欲更新窗口的句柄;

.DLL命令 gethostname, 整数型, "ws2_32.dll", "gethostname", 公开, 取本机名，失败返回-1，成功返回0。
    .参数 name, 文本型, 传址, 给变量，用于存放名称
    .参数 namelen, 整数型, , 上一个参数的长度

.DLL命令 sendto, 整数型, "ws2_32.dll", "sendto", 公开, 发送数据(UDP)
    .参数 s, 整数型, , 套接字描述符
    .参数 buf, 字节集, 传址, 数据
    .参数 len, 整数型, , 数据长度
    .参数 flags, 整数型, , 0
    .参数 to, 套接字地址, 传址, 目标地址信息
    .参数 tolen, 整数型, , 地址信息长度

.DLL命令 recvfrom, 整数型, "ws2_32.dll", "recvfrom", , 接收数据(UDP)
    .参数 s, 整数型, , 套接字描述符
    .参数 buf, 字节集, 传址, 数据(提供变量)
    .参数 len, 整数型, , 数据长度
    .参数 flags, 整数型, , 0
    .参数 from, 套接字地址, 传址, 来源地址信息(提供变量)
    .参数 fromlen, 整数型, 传址, 地址信息长度(提供变量)

.DLL命令 connect, 整数型, "ws2_32.dll", "connect", 公开, 连接到服务器(TCP)
    .参数 s, 整数型, , 网络通讯标识符
    .参数 name, 整数型, , 名称结构
    .参数 namelen, 整数型, , 名称结构长度

.DLL命令 select, 整数型, "ws2_32.dll", "select", 公开
    .参数 nfds, 整数型
    .参数 readfds, fd_set, 传址, 指向一组等待可读性检查的套接口
    .参数 writefds, fd_set, 传址, 指向一组等待可写性检查的套接口
    .参数 exceptfds, fd_set, 传址, 指向一组等待错误检查的套接口
    .参数 timeout, 整数型, 传址

.DLL命令 InternetOpenUrlA, 整数型, "wininet.dll", "InternetOpenUrlA", 公开
    .参数 Internet句柄, 整数型
    .参数 Url地址, 文本型
    .参数 头文本, 文本型
    .参数 头文本长度, 整数型
    .参数 标志, 整数型
    .参数 定义值, 整数型

.DLL命令 WSAAsyncSelect, 整数型, "ws2_32.dll", "WSAAsyncSelect", 公开, 异步选择_ 本函数自动将套接口设置为非阻塞模式  0  表明是成功的
    .参数 网络通讯标识符, 整数型, , s标识一个需要事件通知的套接口的描述符
    .参数 窗口句柄, 整数型, , hWnd标识一个在网络事件发生时需要接收消息的窗口句柄
    .参数 消息值, 整数型, , wMsg在网络事件发生时要接收的消息
    .参数 事件, 整数型, , lEvent位屏蔽码,用于指明应用程序感兴趣的网络事件集合.

.DLL命令 getpeername, 整数型, "ws2_32.dll", "getpeername", 公开, 获取远端信息（已连接对方IP和端口）。成功返回0
    .参数 句柄, 整数型
    .参数 name, 套接字地址, 传址, 地址信息
    .参数 namelen, 整数型, 传址, name长度,Sockaddr_in长度为16

.DLL命令 GetsockName, 整数型, "ws2_32.dll", "getsockname", 公开, 获取本地接口的地址信息（IP和端口）。成功返回0
    .参数 s, 整数型, , 句柄
    .参数 name, 套接字地址, 传址, 地址信息
    .参数 namelen, 整数型, 传址, name长度,Sockaddr_in长度为16

.DLL命令 recv_字节集, 整数型, "ws2_32.dll", "recv", 公开, 接收字节集数据(TCP，当数据这次未接收完时返回剩余字节数)
    .参数 网络通讯标识符, 整数型, , s
    .参数 缓冲区, 字节集, 传址, buf数据(提供变量)
    .参数 缓冲区长度, 整数型, , lLen
    .参数 标志, 整数型, , flags

.DLL命令 recv_文本型, 整数型, "ws2_32.dll", "recv", , 接收字节集数据(TCP，当数据这次未接收完时返回剩余字节数)
    .参数 网络通讯标识符, 整数型, , s
    .参数 缓冲区, 文本型, 传址, buf数据(提供变量)
    .参数 缓冲区长度, 整数型, , lLen
    .参数 标志, 整数型, , flags

.DLL命令 send, 整数型, "ws2_32.dll", "send", 公开, 已发送长度
    .参数 s, 整数型, , 套接字
    .参数 buf, 整数型, , 封包指针
    .参数 len, 整数型, , 封包长度
    .参数 flags, 整数型, , 标志0

.DLL命令 ntohs, 短整数型, "ws2_32.dll", "ntohs", 公开, 转换为端口号-网络转换到本机
    .参数 十六位网络端口, 短整数型, , netshort欲转换值

.DLL命令 inet_ntoa, 整数型, "ws2_32.dll", "inet_ntoa", 公开, 将整数格式IP地址转换为点数格式（返回值是内存地址指针）
    .参数 网络地址, 整数型, , lIn欲转换整数格式IP地址

.DLL命令 accept, 整数型, "ws2_32.dll", "accept", 公开, 等待用户进入并接受连接
    .参数 s, 整数型, , 套接字描述符
    .参数 addr, 套接字地址, 传址, 地址信息
    .参数 addrlen, 整数型, 传址, 地址信息长度（长度为16）

.DLL命令 HP_Create_HP_TcpServer, 整数型, "ISocket.dll", "Create_HP_TcpServer", 公开, 创建 HP_TcpServer 对象
    .参数 pListener, 整数型

.DLL命令 HP_Create_HP_TcpAgent, 整数型, "ISocket.dll", "Create_HP_TcpAgent", 公开, 创建 HP_TcpAgent 对象
    .参数 pListener, 整数型

.DLL命令 HP_Create_HP_TcpClient, 整数型, "ISocket.dll", "Create_HP_TcpClient", 公开, 创建 HP_TcpClient 对象
    .参数 pListener, 整数型

.DLL命令 HP_Create_HP_TcpPullServer, 整数型, "ISocket.dll", "Create_HP_TcpPullServer", 公开, 创建 HP_TcpPullServer 对象
    .参数 pListener, 整数型

.DLL命令 HP_Create_HP_TcpPullAgent, 整数型, "ISocket.dll", "Create_HP_TcpPullAgent", 公开, 创建 HP_TcpPullAgent 对象
    .参数 pListener, 整数型

.DLL命令 HP_Create_HP_TcpPullClient, 整数型, "ISocket.dll", "Create_HP_TcpPullClient", 公开, 创建 HP_TcpPullClient 对象
    .参数 pListener, 整数型

.DLL命令 HP_Create_HP_TcpPackServer, 整数型, "ISocket.dll", "Create_HP_TcpPackServer", 公开, 创建 HP_TcpPackServer 对象
    .参数 pListener, 整数型

.DLL命令 HP_Create_HP_TcpPackAgent, 整数型, "ISocket.dll", "Create_HP_TcpPackAgent", 公开, 创建 HP_TcpPackAgent 对象
    .参数 pListener, 整数型

.DLL命令 HP_Create_HP_TcpPackClient, 整数型, "ISocket.dll", "Create_HP_TcpPackClient", 公开, 创建 HP_TcpPackClient 对象
    .参数 pListener, 整数型

.DLL命令 HP_Destroy_HP_TcpServer, , "ISocket.dll", "Destroy_HP_TcpServer", 公开, 销毁 HP_TcpServer 对象
    .参数 pServer, 整数型

.DLL命令 HP_Destroy_HP_TcpAgent, , "ISocket.dll", "Destroy_HP_TcpAgent", 公开, 销毁 HP_TcpAgent 对象
    .参数 pAgent, 整数型

.DLL命令 HP_Destroy_HP_TcpClient, , "ISocket.dll", "Destroy_HP_TcpClient", 公开, 销毁 HP_TcpClient 对象
    .参数 pClient, 整数型

.DLL命令 HP_Destroy_HP_TcpPullServer, , "ISocket.dll", "Destroy_HP_TcpPullServer", 公开, 销毁 HP_TcpPullServer 对象
    .参数 pServer, 整数型

.DLL命令 HP_Destroy_HP_TcpPullAgent, , "ISocket.dll", "Destroy_HP_TcpPullAgent", 公开, 销毁 HP_TcpPullAgent 对象
    .参数 pAgent, 整数型

.DLL命令 HP_Destroy_HP_TcpPullClient, , "ISocket.dll", "Destroy_HP_TcpPullClient", 公开, 销毁 HP_TcpPullClient 对象
    .参数 pClient, 整数型

.DLL命令 HP_Destroy_HP_TcpPackServer, , "ISocket.dll", "Destroy_HP_TcpPackServer", 公开, 销毁 HP_TcpPackServer 对象
    .参数 pServer, 整数型

.DLL命令 HP_Destroy_HP_TcpPackAgent, , "ISocket.dll", "Destroy_HP_TcpPackAgent", 公开, 销毁 HP_TcpPackAgent 对象
    .参数 pAgent, 整数型

.DLL命令 HP_Destroy_HP_TcpPackClient, , "ISocket.dll", "Destroy_HP_TcpPackClient", 公开, 销毁 HP_TcpPackClient 对象
    .参数 pClient, 整数型

.DLL命令 HP_Create_HP_TcpServerListener, 整数型, "ISocket.dll", "Create_HP_TcpServerListener", 公开, 创建 HP_TcpServerListener 对象

.DLL命令 HP_Create_HP_TcpAgentListener, 整数型, "ISocket.dll", "Create_HP_TcpAgentListener", 公开, 创建 HP_TcpAgentListener 对象

.DLL命令 HP_Create_HP_TcpClientListener, 整数型, "ISocket.dll", "Create_HP_TcpClientListener", 公开, 创建 HP_TcpClientListener 对象

.DLL命令 HP_Create_HP_TcpPullServerListener, 整数型, "ISocket.dll", "Create_HP_TcpPullServerListener", 公开, 创建 HP_TcpPullServerListener 对象

.DLL命令 HP_Create_HP_TcpPullAgentListener, 整数型, "ISocket.dll", "Create_HP_TcpPullAgentListener", 公开, 创建 HP_TcpPullAgentListener 对象

.DLL命令 HP_Create_HP_TcpPullClientListener, 整数型, "ISocket.dll", "Create_HP_TcpPullClientListener", 公开, 创建 HP_TcpPullClientListener 对象

.DLL命令 HP_Create_HP_TcpPackServerListener, 整数型, "ISocket.dll", "Create_HP_TcpPackServerListener", 公开, 创建 HP_TcpPackServerListener 对象

.DLL命令 HP_Create_HP_TcpPackAgentListener, 整数型, "ISocket.dll", "Create_HP_TcpPackAgentListener", 公开, 创建 HP_TcpPackAgentListener 对象

.DLL命令 HP_Create_HP_TcpPackClientListener, 整数型, "ISocket.dll", "Create_HP_TcpPackClientListener", 公开, 创建 HP_TcpPackClientListener 对象

.DLL命令 HP_Destroy_HP_TcpServerListener, , "ISocket.dll", "Destroy_HP_TcpServerListener", 公开, 销毁 HP_TcpServerListener 对象
    .参数 pListener, 整数型

.DLL命令 HP_Destroy_HP_TcpAgentListener, , "ISocket.dll", "Destroy_HP_TcpAgentListener", 公开, 销毁 HP_TcpAgentListener 对象
    .参数 pListener, 整数型

.DLL命令 HP_Destroy_HP_TcpClientListener, , "ISocket.dll", "Destroy_HP_TcpClientListener", 公开, 销毁 HP_TcpClientListener 对象
    .参数 pListener, 整数型

.DLL命令 HP_Destroy_HP_TcpPullServerListener, , "ISocket.dll", "Destroy_HP_TcpPullServerListener", 公开, 销毁 HP_TcpPullServerListener 对象
    .参数 pListener, 整数型

.DLL命令 HP_Destroy_HP_TcpPullAgentListener, , "ISocket.dll", "Destroy_HP_TcpPullAgentListener", 公开, 销毁 HP_TcpPullAgentListener 对象
    .参数 pListener, 整数型

.DLL命令 HP_Destroy_HP_TcpPullClientListener, , "ISocket.dll", "Destroy_HP_TcpPullClientListener", 公开, 销毁 HP_TcpPullClientListener 对象
    .参数 pListener, 整数型

.DLL命令 HP_Destroy_HP_TcpPackServerListener, , "ISocket.dll", "Destroy_HP_TcpPackServerListener", 公开, 销毁 HP_TcpPackServerListener 对象
    .参数 pListener, 整数型

.DLL命令 HP_Destroy_HP_TcpPackAgentListener, , "ISocket.dll", "Destroy_HP_TcpPackAgentListener", 公开, 销毁 HP_TcpPackAgentListener 对象
    .参数 pListener, 整数型

.DLL命令 HP_Destroy_HP_TcpPackClientListener, , "ISocket.dll", "Destroy_HP_TcpPackClientListener", 公开, 销毁 HP_TcpPackClientListener 对象
    .参数 pListener, 整数型

.DLL命令 HP_Set_FN_Server_OnPrepareListen, , "ISocket.dll", "HP_Set_FN_Server_OnPrepareListen", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Server_OnAccept, , "ISocket.dll", "HP_Set_FN_Server_OnAccept", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Server_OnHandShake, , "ISocket.dll", "HP_Set_FN_Server_OnHandShake", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Server_OnSend, , "ISocket.dll", "HP_Set_FN_Server_OnSend", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Server_OnReceive, , "ISocket.dll", "HP_Set_FN_Server_OnReceive", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Server_OnPullReceive, , "ISocket.dll", "HP_Set_FN_Server_OnPullReceive", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Server_OnClose, , "ISocket.dll", "HP_Set_FN_Server_OnClose", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Server_OnShutdown, , "ISocket.dll", "HP_Set_FN_Server_OnShutdown", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Agent_OnPrepareConnect, , "ISocket.dll", "HP_Set_FN_Agent_OnPrepareConnect", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Agent_OnConnect, , "ISocket.dll", "HP_Set_FN_Agent_OnConnect", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Agent_OnHandShake, , "ISocket.dll", "HP_Set_FN_Agent_OnHandShake", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Agent_OnSend, , "ISocket.dll", "HP_Set_FN_Agent_OnSend", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Agent_OnReceive, , "ISocket.dll", "HP_Set_FN_Agent_OnReceive", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Agent_OnPullReceive, , "ISocket.dll", "HP_Set_FN_Agent_OnPullReceive", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Agent_OnClose, , "ISocket.dll", "HP_Set_FN_Agent_OnClose", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Agent_OnShutdown, , "ISocket.dll", "HP_Set_FN_Agent_OnShutdown", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Client_OnPrepareConnect, , "ISocket.dll", "HP_Set_FN_Client_OnPrepareConnect", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Client_OnConnect, , "ISocket.dll", "HP_Set_FN_Client_OnConnect", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Client_OnHandShake, , "ISocket.dll", "HP_Set_FN_Client_OnHandShake", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Client_OnSend, , "ISocket.dll", "HP_Set_FN_Client_OnSend", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Client_OnReceive, , "ISocket.dll", "HP_Set_FN_Client_OnReceive", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Client_OnPullReceive, , "ISocket.dll", "HP_Set_FN_Client_OnPullReceive", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_Client_OnClose, , "ISocket.dll", "HP_Set_FN_Client_OnClose", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_UdpNode_OnPrepareListen, , "ISocket.dll", "HP_Set_FN_UdpNode_OnPrepareListen", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_UdpNode_OnSend, , "ISocket.dll", "HP_Set_FN_UdpNode_OnSend", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_UdpNode_OnReceive, , "ISocket.dll", "HP_Set_FN_UdpNode_OnReceive", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_UdpNode_OnError, , "ISocket.dll", "HP_Set_FN_UdpNode_OnError", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Set_FN_UdpNode_OnShutdown, , "ISocket.dll", "HP_Set_FN_UdpNode_OnShutdown", 公开
    .参数 pListener, 整数型
    .参数 fn, 子程序指针

.DLL命令 HP_Server_Start, 逻辑型, "ISocket.dll", "HP_Server_Start", 公开, 名称：启动通信组件 描述：启动服务端通信组件，启动完成后可开始接收客户端连接并收发数据,TRUE-- 成功,FALSE-- 失败，可通过 HP_Server_GetLastError() 获取错误代码,/
    .参数 pServer, 整数型
    .参数 lpszBindAddress, 文本型, , 监听地址
    .参数 usPort, 短整数型, , 监听端口

.DLL命令 HP_Server_Stop, 逻辑型, "ISocket.dll", "HP_Server_Stop", 公开, 名称：关闭通信组件 描述：关闭服务端通信组件，关闭完成后断开所有客户端连接并释放所有资源,TRUE-- 成功,FALSE-- 失败，可通过 HP_Server_GetLastError() 获取错误代码,/
    .参数 pServer, 整数型

.DLL命令 HP_Server_Wait, 逻辑型, "ISocket.dll", "HP_Server_Wait", 公开, 名称：等待 描述：等待通信组件停止运行
    .参数 pServer, 整数型
    .参数 dwMilliseconds, 整数型, , 超时时间（毫秒，默认：-1，永不超时）

.DLL命令 HP_Server_Send, 逻辑型, "ISocket.dll", "HP_Server_Send", 公开, 名称：发送数据 描述：向指定连接发送数据,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pBuffer, 整数型, , 发送缓冲区
    .参数 iLength, 整数型, , 发送缓冲区长度

.DLL命令 HP_Server_SendPart, 逻辑型, "ISocket.dll", "HP_Server_SendPart", 公开, 名称：发送数据 描述：向指定连接发送数据,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pBuffer, 整数型, , 发送缓冲区
    .参数 iLength, 整数型, , 发送缓冲区长度
    .参数 iOffset, 整数型, , 发送缓冲区指针偏移量

.DLL命令 HP_Server_SendPackets, 逻辑型, "ISocket.dll", "HP_Server_SendPackets", 公开, 名称：发送多组数据 描述：向指定连接发送多组数据,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pBuffers, HP_WSABUF, 传址 数组, 发送缓冲区数组
    .参数 iCount, 整数型, , 发送缓冲区数目

.DLL命令 HP_Server_Disconnect, 逻辑型, "ISocket.dll", "HP_Server_Disconnect", 公开, 名称：断开连接 描述：断开与某个客户端的连接,TRUE-- 成功,FALSE-- 失败,/
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 bForce, 逻辑型, , 是否强制断开连接

.DLL命令 HP_Server_DisconnectLongConnections, 逻辑型, "ISocket.dll", "HP_Server_DisconnectLongConnections", 公开, 名称：断开超时连接 描述：断开超过指定时长的连接,TRUE-- 成功,FALSE-- 失败,/
    .参数 pServer, 整数型
    .参数 dwPeriod, 整数型, , 时长（毫秒）
    .参数 bForce, 逻辑型, , 是否强制断开连接

.DLL命令 HP_Server_DisconnectSilenceConnections, 逻辑型, "ISocket.dll", "HP_Server_DisconnectSilenceConnections", 公开, 名称：断开静默连接 描述：断开超过指定时长的静默连接,TRUE-- 成功,FALSE-- 失败,/
    .参数 pServer, 整数型
    .参数 dwPeriod, 整数型, , 时长（毫秒）
    .参数 bForce, 逻辑型, , 是否强制断开连接

.DLL命令 HP_Server_SetConnectionExtra, 逻辑型, "ISocket.dll", "HP_Server_SetConnectionExtra", 公开, 名称：设置连接的附加数据 描述：是否为连接绑定附加数据或者绑定什么样的数据，均由应用程序只身决定,TRUE-- 成功,FALSE-- 失败（无效的连接 ID）,/
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pExtra, 整数型

.DLL命令 HP_Server_GetConnectionExtra, 逻辑型, "ISocket.dll", "HP_Server_GetConnectionExtra", 公开, 名称：获取连接的附加数据 描述：是否为连接绑定附加数据或者绑定什么样的数据，均由应用程序只身决定,TRUE-- 成功,FALSE-- 失败（无效的连接 ID）,/
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 ppExtra, 整数型, 传址

.DLL命令 HP_Server_HasStarted, 逻辑型, "ISocket.dll", "HP_Server_HasStarted", 公开, 检查通信组件是否已启动
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetState, 整数型, "ISocket.dll", "HP_Server_GetState", 公开, 查看通信组件当前状态
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetLastError, 整数型, "ISocket.dll", "HP_Server_GetLastError", 公开, 获取最近一次失败操作的错误代码
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetLastErrorDesc, 文本型, "ISocket.dll", "HP_Server_GetLastErrorDesc", 公开, 获取最近一次失败操作的错误描述
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetPendingDataLength, 逻辑型, "ISocket.dll", "HP_Server_GetPendingDataLength", 公开, 获取连接中未发出数据的长度
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型
    .参数 piPending, 整数型, 传址

.DLL命令 HP_Server_GetConnectionCount, 整数型, "ISocket.dll", "HP_Server_GetConnectionCount", 公开, 获取客户端连接数
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetAllConnectionIDs, 逻辑型, "ISocket.dll", "HP_Server_GetAllConnectionIDs", 公开, 获取所有连接的 HP_CONNID
    .参数 pServer, 整数型
    .参数 pIDs, 整数型, 传址 数组
    .参数 pdwCount, 整数型, 传址

.DLL命令 HP_Server_GetConnectPeriod, 逻辑型, "ISocket.dll", "HP_Server_GetConnectPeriod", 公开, 获取某个客户端连接时长（毫秒）
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型
    .参数 pdwPeriod, 整数型, 传址

.DLL命令 HP_Server_GetSilencePeriod, 逻辑型, "ISocket.dll", "HP_Server_GetSilencePeriod", 公开, 获取某个连接静默时间（毫秒）
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型
    .参数 pdwPeriod, 整数型, 传址

.DLL命令 HP_Server_GetListenAddress, 逻辑型, "ISocket.dll", "HP_Server_GetListenAddress", 公开, 获取监听 Socket 的地址信息
    .参数 pServer, 整数型
    .参数 lpszAddress, 文本型
    .参数 piAddressLen, 整数型, 传址
    .参数 pusPort, 短整数型, 传址

.DLL命令 HP_Server_GetLocalAddress, 逻辑型, "ISocket.dll", "HP_Server_GetLocalAddress", 公开, 获取某个连接的本地地址信息
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型
    .参数 lpszAddress, 文本型
    .参数 piAddressLen, 整数型, 传址
    .参数 pusPort, 短整数型, 传址

.DLL命令 HP_Server_GetRemoteAddress, 逻辑型, "ISocket.dll", "HP_Server_GetRemoteAddress", 公开, 获取某个连接的远程地址信息
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型
    .参数 lpszAddress, 文本型
    .参数 piAddressLen, 整数型, 传址
    .参数 pusPort, 短整数型, 传址

.DLL命令 HP_Server_SetReuseAddressPolicy, , "ISocket.dll", "HP_Server_SetReuseAddressPolicy", 公开, 设置地址重用选项
    .参数 pServer, 整数型
    .参数 enReusePolicy, 整数型, , #RAP_ 开头常量

.DLL命令 HP_Server_SetSendPolicy, , "ISocket.dll", "HP_Server_SetSendPolicy", 公开, 设置数据发送策略
    .参数 pServer, 整数型
    .参数 enSendPolicy, 整数型

.DLL命令 HP_Server_SetOnSendSyncPolicy, , "ISocket.dll", "HP_Server_SetOnSendSyncPolicy", 公开, 设置 OnSend 事件同步策略（默认：#OSSP_NONE，不同步）
    .参数 pServer, 整数型
    .参数 enSyncPolicy, 整数型, , #OSSP_ 开头常量

.DLL命令 HP_Server_SetFreeSocketObjLockTime, , "ISocket.dll", "HP_Server_SetFreeSocketObjLockTime", 公开, 设置 Socket 缓存对象锁定时间（毫秒，在锁定期间该 Socket 缓存对象不能被获取使用）
    .参数 pServer, 整数型
    .参数 dwFreeSocketObjLockTime, 整数型

.DLL命令 HP_Server_SetFreeSocketObjPool, , "ISocket.dll", "HP_Server_SetFreeSocketObjPool", 公开, 设置 Socket 缓存池大小（通常设置为平均并发连接数量的 1/3 - 1/2）
    .参数 pServer, 整数型
    .参数 dwFreeSocketObjPool, 整数型

.DLL命令 HP_Server_SetFreeBufferObjPool, , "ISocket.dll", "HP_Server_SetFreeBufferObjPool", 公开, 设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
    .参数 pServer, 整数型
    .参数 dwFreeBufferObjPool, 整数型

.DLL命令 HP_Server_SetFreeSocketObjHold, , "ISocket.dll", "HP_Server_SetFreeSocketObjHold", 公开, 设置 Socket 缓存池回收阀值（通常设置为 Socket 缓存池大小的 3 倍）
    .参数 pServer, 整数型
    .参数 dwFreeSocketObjHold, 整数型

.DLL命令 HP_Server_SetFreeBufferObjHold, , "ISocket.dll", "HP_Server_SetFreeBufferObjHold", 公开, 设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
    .参数 pServer, 整数型
    .参数 dwFreeBufferObjHold, 整数型

.DLL命令 HP_Server_SetMaxConnectionCount, , "ISocket.dll", "HP_Server_SetMaxConnectionCount", 公开, 设置最大连接数（组件会根据设置值预分配内存，因此需要根据实际情况设置，不宜过大）
    .参数 pServer, 整数型
    .参数 dwMaxConnectionCount, 整数型

.DLL命令 HP_Server_SetWorkerThreadCount, , "ISocket.dll", "HP_Server_SetWorkerThreadCount", 公开, 设置工作线程数量（通常设置为 2 * CPU + 2）
    .参数 pServer, 整数型
    .参数 dwWorkerThreadCount, 整数型

.DLL命令 HP_Server_SetMarkSilence, , "ISocket.dll", "HP_Server_SetMarkSilence", 公开, 设置是否标记静默时间（设置为 TRUE 时 DisconnectSilenceConnections() 和 GetSilencePeriod() 才有效，默认：TRUE）
    .参数 pServer, 整数型
    .参数 bMarkSilence, 逻辑型

.DLL命令 HP_Server_GetReuseAddressPolicy, 整数型, "ISocket.dll", "HP_Server_GetReuseAddressPolicy", 公开, 获取地址重用选项 #RAP_ 开头常量
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetSendPolicy, 整数型, "ISocket.dll", "HP_Server_GetSendPolicy", 公开, 获取数据发送策略
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetOnSendSyncPolicy, 整数型, "ISocket.dll", "HP_Server_GetOnSendSyncPolicy", 公开, 获取 OnSend 事件同步策略,返回#OSSP_ 开头常量
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetFreeSocketObjLockTime, 整数型, "ISocket.dll", "HP_Server_GetFreeSocketObjLockTime", 公开, 获取 Socket 缓存对象锁定时间
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetFreeSocketObjPool, 整数型, "ISocket.dll", "HP_Server_GetFreeSocketObjPool", 公开, 获取 Socket 缓存池大小
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetFreeBufferObjPool, 整数型, "ISocket.dll", "HP_Server_GetFreeBufferObjPool", 公开, 获取内存块缓存池大小
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetFreeSocketObjHold, 整数型, "ISocket.dll", "HP_Server_GetFreeSocketObjHold", 公开, 获取 Socket 缓存池回收阀值
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetFreeBufferObjHold, 整数型, "ISocket.dll", "HP_Server_GetFreeBufferObjHold", 公开, 获取内存块缓存池回收阀值
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetMaxConnectionCount, 整数型, "ISocket.dll", "HP_Server_GetMaxConnectionCount", 公开, 获取最大连接数
    .参数 pServer, 整数型

.DLL命令 HP_Server_GetWorkerThreadCount, 整数型, "ISocket.dll", "HP_Server_GetWorkerThreadCount", 公开, 获取工作线程数量
    .参数 pServer, 整数型

.DLL命令 HP_Server_IsMarkSilence, 逻辑型, "ISocket.dll", "HP_Server_IsMarkSilence", 公开, 检测是否标记静默时间
    .参数 pServer, 整数型

.DLL命令 HP_TcpServer_SendSmallFile, 逻辑型, "ISocket.dll", "HP_TcpServer_SendSmallFile", 公开, 名称：发送小文件 描述：向指定连接发送 4096 KB 以下的小文件,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 lpszFileName, 文本型, , 文件路径
    .参数 pHead, HP_WSABUF, , 头部附加数据
    .参数 pTail, HP_WSABUF, , 尾部附加数据

.DLL命令 HP_TcpServer_SetSocketListenQueue, , "ISocket.dll", "HP_TcpServer_SetSocketListenQueue", 公开, 设置监听 Socket 的等候队列大小（根据并发连接数量调整设置）
    .参数 pServer, 整数型
    .参数 dwSocketListenQueue, 整数型

.DLL命令 HP_TcpServer_SetAcceptSocketCount, , "ISocket.dll", "HP_TcpServer_SetAcceptSocketCount", 公开, 设置 Accept 预投递数量（根据负载调整设置，Accept 预投递数量越大则支持的并发连接请求越多）
    .参数 pServer, 整数型
    .参数 dwAcceptSocketCount, 整数型

.DLL命令 HP_TcpServer_SetSocketBufferSize, , "ISocket.dll", "HP_TcpServer_SetSocketBufferSize", 公开, 设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为 1024 的倍数）
    .参数 pServer, 整数型
    .参数 dwSocketBufferSize, 整数型

.DLL命令 HP_TcpServer_SetKeepAliveTime, , "ISocket.dll", "HP_TcpServer_SetKeepAliveTime", 公开, 设置正常心跳包间隔（毫秒，0 则不发送心跳包，默认：60 * 1000）
    .参数 pServer, 整数型
    .参数 dwKeepAliveTime, 整数型

.DLL命令 HP_TcpServer_SetKeepAliveInterval, , "ISocket.dll", "HP_TcpServer_SetKeepAliveInterval", 公开, 设置异常心跳包间隔（毫秒，0 不发送心跳包，，默认：20 * 1000，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
    .参数 pServer, 整数型
    .参数 dwKeepAliveInterval, 整数型

.DLL命令 HP_TcpServer_GetAcceptSocketCount, 整数型, "ISocket.dll", "HP_TcpServer_GetAcceptSocketCount", 公开, 获取 Accept 预投递数量
    .参数 pServer, 整数型

.DLL命令 HP_TcpServer_GetSocketBufferSize, 整数型, "ISocket.dll", "HP_TcpServer_GetSocketBufferSize", 公开, 获取通信数据缓冲区大小
    .参数 pServer, 整数型

.DLL命令 HP_TcpServer_GetSocketListenQueue, 整数型, "ISocket.dll", "HP_TcpServer_GetSocketListenQueue", 公开, 获取监听 Socket 的等候队列大小
    .参数 pServer, 整数型

.DLL命令 HP_TcpServer_GetKeepAliveTime, 整数型, "ISocket.dll", "HP_TcpServer_GetKeepAliveTime", 公开, 获取正常心跳包间隔
    .参数 pServer, 整数型

.DLL命令 HP_TcpServer_GetKeepAliveInterval, 整数型, "ISocket.dll", "HP_TcpServer_GetKeepAliveInterval", 公开, 获取异常心跳包间隔
    .参数 pServer, 整数型

.DLL命令 HP_Agent_Start, 逻辑型, "ISocket.dll", "HP_Agent_Start", 公开, 名称：启动通信组件 描述：启动通信代理组件，启动完成后可开始连接远程服务器,TRUE-- 成功,FALSE-- 失败，可通过 HP_Agent_GetLastError() 获取错误代码,/
    .参数 pAgent, 整数型
    .参数 lpszBindAddress, 文本型, , 绑定地址（默认：nullptr，绑定 0.0.0.0）
    .参数 bAsyncConnect, 逻辑型, , 是否采用异步 Connect

.DLL命令 HP_Agent_Stop, 逻辑型, "ISocket.dll", "HP_Agent_Stop", 公开, 名称：关闭通信组件 描述：关闭通信组件，关闭完成后断开所有连接并释放所有资源,TRUE-- 成功,FALSE-- 失败，可通过 HP_Agent_GetLastError() 获取错误代码,/
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_Wait, 逻辑型, "ISocket.dll", "HP_Agent_Wait", 公开, 名称：等待 描述：等待通信组件停止运行
    .参数 pAgent, 整数型
    .参数 dwMilliseconds, 整数型, , 超时时间（毫秒，默认：-1，永不超时）

.DLL命令 HP_Agent_Connect, 逻辑型, "ISocket.dll", "HP_Agent_Connect", , 名称：连接服务器 描述：连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() / OnHandShake() 事件,TRUE-- 成功,FALSE-- 失败，可通过函数 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pAgent, 整数型
    .参数 lpszRemoteAddress, 文本型, , 服务端地址
    .参数 usPort, 短整数型, , 服务端端口
    .参数 pdwConnID, 整数型, , 连接 ID（默认：nullptr，不获取连接 ID）

.DLL命令 HP_Agent_Send, 逻辑型, "ISocket.dll", "HP_Agent_Send", , 名称：发送数据 描述：向指定连接发送数据,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pBuffer, 整数型, , 发送缓冲区
    .参数 iLength, 整数型, , 发送缓冲区长度

.DLL命令 HP_Agent_SendPart, 逻辑型, "ISocket.dll", "HP_Agent_SendPart", , 名称：发送数据 描述：向指定连接发送数据,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pBuffer, 整数型, , 发送缓冲区
    .参数 iLength, 整数型, , 发送缓冲区长度
    .参数 iOffset, 整数型, , 发送缓冲区指针偏移量

.DLL命令 HP_Agent_SendPackets, 逻辑型, "ISocket.dll", "HP_Agent_SendPackets", , 名称：发送多组数据 描述：向指定连接发送多组数据,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pBuffers, HP_WSABUF, 传址 数组, 发送缓冲区数组
    .参数 iCount, 整数型, , 发送缓冲区数目

.DLL命令 HP_Agent_Disconnect, 逻辑型, "ISocket.dll", "HP_Agent_Disconnect", , 名称：断开连接 描述：断开某个连接,TRUE-- 成功,FALSE-- 失败,/
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 bForce, 逻辑型, , 是否强制断开连接

.DLL命令 HP_Agent_DisconnectLongConnections, 逻辑型, "ISocket.dll", "HP_Agent_DisconnectLongConnections", , 名称：断开超时连接 描述：断开超过指定时长的连接,TRUE-- 成功,FALSE-- 失败,/
    .参数 pAgent, 整数型
    .参数 dwPeriod, 整数型, , 时长（毫秒）
    .参数 bForce, 逻辑型, , 是否强制断开连接

.DLL命令 HP_Agent_DisconnectSilenceConnections, 逻辑型, "ISocket.dll", "HP_Agent_DisconnectSilenceConnections", , 名称：断开静默连接 描述：断开超过指定时长的静默连接,TRUE-- 成功,FALSE-- 失败,/
    .参数 pAgent, 整数型
    .参数 dwPeriod, 整数型, , 时长（毫秒）
    .参数 bForce, 逻辑型, , 是否强制断开连接

.DLL命令 HP_Agent_SetConnectionExtra, 逻辑型, "ISocket.dll", "HP_Agent_SetConnectionExtra", , 名称：设置连接的附加数据 描述：是否为连接绑定附加数据或者绑定什么样的数据，均由应用程序只身决定,TRUE-- 成功,FALSE-- 失败（无效的连接 ID）,/
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pExtra, 整数型

.DLL命令 HP_Agent_GetConnectionExtra, 逻辑型, "ISocket.dll", "HP_Agent_GetConnectionExtra", , 名称：获取连接的附加数据 描述：是否为连接绑定附加数据或者绑定什么样的数据，均由应用程序只身决定,TRUE-- 成功,FALSE-- 失败（无效的连接 ID）,/
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 ppExtra, 整数型, 传址

.DLL命令 HP_Agent_HasStarted, 逻辑型, "ISocket.dll", "HP_Agent_HasStarted", , 检查通信组件是否已启动
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetState, 整数型, "ISocket.dll", "HP_Agent_GetState", , 查看通信组件当前状态
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetConnectionCount, 整数型, "ISocket.dll", "HP_Agent_GetConnectionCount", , 获取连接数
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetAllConnectionIDs, 逻辑型, "ISocket.dll", "HP_Agent_GetAllConnectionIDs", , 获取所有连接的 HP_CONNID
    .参数 pAgent, 整数型
    .参数 pIDs, 整数型, 传址 数组
    .参数 pdwCount, 整数型, 传址

.DLL命令 HP_Agent_GetConnectPeriod, 逻辑型, "ISocket.dll", "HP_Agent_GetConnectPeriod", , 获取某个连接时长（毫秒）
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型
    .参数 pdwPeriod, 整数型, 传址

.DLL命令 HP_Agent_GetSilencePeriod, 逻辑型, "ISocket.dll", "HP_Agent_GetSilencePeriod", , 获取某个连接静默时间（毫秒）
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型
    .参数 pdwPeriod, 整数型, 传址

.DLL命令 HP_Agent_GetLocalAddress, 逻辑型, "ISocket.dll", "HP_Agent_GetLocalAddress", , 获取某个连接的本地地址信息
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型
    .参数 lpszAddress, 文本型
    .参数 piAddressLen, 整数型, 传址
    .参数 pusPort, 短整数型, 传址

.DLL命令 HP_Agent_GetRemoteAddress, 逻辑型, "ISocket.dll", "HP_Agent_GetRemoteAddress", , 获取某个连接的远程地址信息
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型
    .参数 lpszAddress, 文本型
    .参数 piAddressLen, 整数型, 传址
    .参数 pusPort, 短整数型, 传址

.DLL命令 HP_Agent_GetRemoteHost, 逻辑型, "ISocket.dll", "HP_Agent_GetRemoteHost", , 获取某个连接的远程主机信息
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型
    .参数 lpszHost, 文本型
    .参数 piHostLen, 整数型, 传址
    .参数 pusPort, 短整数型, 传址

.DLL命令 HP_Agent_GetLastError, 整数型, "ISocket.dll", "HP_Agent_GetLastError", , 获取最近一次失败操作的错误代码
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetLastErrorDesc, 文本型, "ISocket.dll", "HP_Agent_GetLastErrorDesc", , 获取最近一次失败操作的错误描述
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetPendingDataLength, 逻辑型, "ISocket.dll", "HP_Agent_GetPendingDataLength", , 获取连接中未发出数据的长度
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型
    .参数 piPending, 整数型, 传址

.DLL命令 HP_Agent_SetSendPolicy, , "ISocket.dll", "HP_Agent_SetSendPolicy", , 设置数据发送策略
    .参数 pAgent, 整数型
    .参数 enSendPolicy, 整数型

.DLL命令 HP_Agent_SetOnSendSyncPolicy, , "ISocket.dll", "HP_Agent_SetOnSendSyncPolicy", , 设置 OnSend 事件同步策略（默认：#OSSP_NONE，不同步）
    .参数 pAgent, 整数型
    .参数 enSyncPolicy, 整数型, , #OSSP_ 开头常量

.DLL命令 HP_Agent_SetFreeSocketObjLockTime, , "ISocket.dll", "HP_Agent_SetFreeSocketObjLockTime", , 设置 Socket 缓存对象锁定时间（毫秒，在锁定期间该 Socket 缓存对象不能被获取使用）
    .参数 pAgent, 整数型
    .参数 dwFreeSocketObjLockTime, 整数型

.DLL命令 HP_Agent_SetFreeSocketObjPool, , "ISocket.dll", "HP_Agent_SetFreeSocketObjPool", , 设置 Socket 缓存池大小（通常设置为平均并发连接数量的 1/3 - 1/2）
    .参数 pAgent, 整数型
    .参数 dwFreeSocketObjPool, 整数型

.DLL命令 HP_Agent_SetFreeBufferObjPool, , "ISocket.dll", "HP_Agent_SetFreeBufferObjPool", , 设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
    .参数 pAgent, 整数型
    .参数 dwFreeBufferObjPool, 整数型

.DLL命令 HP_Agent_SetFreeSocketObjHold, , "ISocket.dll", "HP_Agent_SetFreeSocketObjHold", , 设置 Socket 缓存池回收阀值（通常设置为 Socket 缓存池大小的 3 倍）
    .参数 pAgent, 整数型
    .参数 dwFreeSocketObjHold, 整数型

.DLL命令 HP_Agent_SetFreeBufferObjHold, , "ISocket.dll", "HP_Agent_SetFreeBufferObjHold", , 设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
    .参数 pAgent, 整数型
    .参数 dwFreeBufferObjHold, 整数型

.DLL命令 HP_Agent_SetMaxConnectionCount, , "ISocket.dll", "HP_Agent_SetMaxConnectionCount", , 设置最大连接数（组件会根据设置值预分配内存，因此需要根据实际情况设置，不宜过大）
    .参数 pAgent, 整数型
    .参数 dwMaxConnectionCount, 整数型

.DLL命令 HP_Agent_SetWorkerThreadCount, , "ISocket.dll", "HP_Agent_SetWorkerThreadCount", , 设置工作线程数量（通常设置为 2 * CPU + 2）
    .参数 pAgent, 整数型
    .参数 dwWorkerThreadCount, 整数型

.DLL命令 HP_Agent_SetMarkSilence, , "ISocket.dll", "HP_Agent_SetMarkSilence", , 设置是否标记静默时间（设置为 TRUE 时 DisconnectSilenceConnections() 和 GetSilencePeriod() 才有效，默认：TRUE）
    .参数 pAgent, 整数型
    .参数 bMarkSilence, 逻辑型

.DLL命令 HP_Agent_GetReuseAddressPolicy, 整数型, "ISocket.dll", "HP_Agent_GetReuseAddressPolicy", , 获取地址重用选项 #RAP_ 开头常量
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetSendPolicy, 整数型, "ISocket.dll", "HP_Agent_GetSendPolicy", , 获取数据发送策略
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetOnSendSyncPolicy, 整数型, "ISocket.dll", "HP_Agent_GetOnSendSyncPolicy", , 获取 OnSend 事件同步策略,返回#OSSP_ 开头常量
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetFreeSocketObjLockTime, 整数型, "ISocket.dll", "HP_Agent_GetFreeSocketObjLockTime", , 获取 Socket 缓存对象锁定时间
    .参数 pAgent, 整数型

.DLL命令 HP_HeapCreate, 整数型, "kernel32", "HeapCreate", , 建立堆
    .参数 flOptions, 整数型
    .参数 dwInitialSize, 整数型
    .参数 dwMaximumSize, 整数型

.DLL命令 HP_HeapAlloc, 整数型, "kernel32", "HeapAlloc", , 从堆中分配内存
    .参数 hHeap, 整数型
    .参数 dwFlags, 整数型
    .参数 dwBytes, 整数型

.DLL命令 HP_ReadFile, 整数型, "kernel32", "ReadFile", , 从文件中读出数据。与lread函数相比，这个函数要明显灵活的多。该函数能够操作通信设备、管道、套接字以及邮槽  非零表示成功，零表示失败。会设置GetLastError。如启动的是一次异步读操作，则函数会返回零值，并将ERROR_IO_PENDING设置成GetLastError的结果。如结果不是零值，但读入的字节数小于nNumberOfBytesToRead参数指定的值，表明早已抵达了文件的结尾
    .参数 hFile, 整数型, , 文件的句柄
    .参数 lpBuffer, 整数型, , 用于保存读入数据的一个缓冲区
    .参数 nNumberOfBytesToRead, 整数型, , 要读入的字符数
    .参数 lpNumberOfBytesRead, 整数型, 传址, 从文件中实际读入的字符数
    .参数 lpOverlapped, 整数型, , OVERLAPPED，如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须用这个参数引用一个特殊的结构。那个结构定义了一次异步读取操作。否则，应将这个参数设为NULL（将函数声明成ByVal As 并传递零值）;

.DLL命令 HP_HeapFree, 整数型, "kernel32", "HeapFree", , 释放从堆中分配的内存
    .参数 hHeap, 整数型
    .参数 dwFlags, 整数型
    .参数 lpMem, 整数型

.DLL命令 HP_HeapDestroy, 整数型, "kernel32", "HeapDestroy", , 取消堆
    .参数 hHeap, 整数型

.DLL命令 HP_CloseHandle, 整数型, "kernel32", "CloseHandle", , 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 hObject, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 HP_CreateFile, 整数型, "kernel32", "CreateFileA", , 这是一个全功能的例程，可打开和创建文件、管道、邮槽、通信服务、设备以及控制台  如执行成功，则返回文件句柄。INVALID_HANDLE_VALUE表示出错，会设置GetLastError。即使函数成功，但若文件存在，且指定了CREATE_ALWAYS ;    或 OPEN_ALWAYS，GetLastError也会设为ERROR_ALREADY_EXISTS
    .参数 lpFileName, 文本型, , 要打开的文件的名字
    .参数 dwDesiredAccess, 整数型, , 如果为 GENERIC_READ 表示允许对设备进行读访问；如果为 GENERIC_WRITE 表示允许对设备进行写访问（可组合使用）；如果为零，表示只允许获取与一个设备有关的信息
    .参数 dwShareMode, 整数型, , 零表示不共享； FILE_SHARE_READ 和/或 FILE_SHARE_WRITE 表示允许对文件进行共享访问
    .参数 lpSecurityAttributes, 整数型, , SECURITY_ATTRIBUTES，指向一个SECURITY_ATTRIBUTES结构的指针，定义了文件的安全特性（如果操作系统支持的话）
    .参数 dwCreationDisposition, 整数型, , 下述常数之一：;CREATE_NEW：创建文件；如文件存在则会出错;CREATE_ALWAYS：创建文件，会改写前一个文件;OPEN_EXISTING：文件必须已经存在。由设备提出要求;OPEN_ALWAYS：如文件不存在则创建它;TRUNCATE_EXISTING：讲现有文件缩短为零长度
    .参数 dwFlagsAndAttributes, 整数型, , 一个或多个下述常数;FILE_ATTRIBUTE_ARCHIVE：标记归档属性;FILE_ATTRIBUTE_COMPRESSED：将文件标记为已压缩，或者标记为文件在目录中的默认压缩方式;FILE_ATTRIBUTE_NORMAL：默认属性;FILE_ATTRIBUTE_HIDDEN：隐藏文件或目录;FILE_ATTRIBUTE_READONLY：文件为只读;FILE_ATTRIBUTE_SYSTEM：文件为系统文件;FILE_FLAG_WRITE_THROUGH：操作系统不得推迟对文件的写操作;FILE_FLAG_OVERLAPPED：允许对文件进行重叠操作;FILE_FLAG_NO_BUFFERING：禁止对文件进行缓冲处理。文件只能写入磁盘卷的扇区块;FILE_FLAG_RANDOM_ACCESS：针对随机访问对文件缓冲进行优化;FILE_FLAG_SEQUENTIAL_SCAN：针对连续访问对文件缓冲进行优化;FILE_FLAG_DELETE_ON_CLOSE：关闭了上一次打开的句柄后，将文件删除。特别适合临时文件也可在Windows NT下组合使用下述常数标记：SECURITY_ANONYMOUS， SECURITY_IDENTIFICATION， SECURITY_IMPERSONATION， SECURITY_DELEGATION， SECURITY_CONTEXT_TRACKING， SECURITY_EFFECTIVE_ONLY
    .参数 hTemplateFile, 整数型, , 如果不为零，则指定一个文件句柄。新文件将从这个文件中复制扩展属性;

.DLL命令 HP_GetFileSizeEx, 整数型, "kernel32.dll", "GetFileSizeEx"
    .参数 hFile, 整数型
    .参数 lpFileSize, 长整数型, 传址

.DLL命令 HP_GetSystemInfo, , "kernel32", "GetSystemInfo", , 在一个SYSTEM_INFO结构中载入与底层硬件平台有关的信息
    .参数 lpSystemInfo, HP_SYSTEM_INFO, , SYSTEM_INFO，指定一个结构，用于装载适当的系统信息;

.DLL命令 HP_Server_IsPauseReceive, 逻辑型, "ISocket.dll", "HP_Server_IsPauseReceive", , 获取连接的数据接收状态
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pbPaused, 逻辑型, 传址, 返回 真- 暂停, 假- 恢复

.DLL命令 HP_Server_IsConnected, 逻辑型, "ISocket.dll", "HP_Server_IsConnected", , 检测是否有效连接
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID

.DLL命令 HP_Server_PauseReceive, 逻辑型, "ISocket.dll", "HP_Server_PauseReceive", , 暂停/恢复某个连接的数据接收工作
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 bPause, 逻辑型, , 真- 暂停, 假- 恢复

.DLL命令 HP_Server_IsSecure, 逻辑型, "ISocket.dll", "HP_Server_IsSecure", , 检测是否为安全连接（SSL/HTTPS）
    .参数 pServer, 整数型

.DLL命令 HP_Agent_IsPauseReceive, 逻辑型, "ISocket.dll", "HP_Agent_IsPauseReceive", , 获取连接的数据接收状态
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pbPaused, 逻辑型, 传址, 返回 真- 暂停, 假- 恢复

.DLL命令 HP_Agent_IsConnected, 逻辑型, "ISocket.dll", "HP_Agent_IsConnected", , 检测是否有效连接
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID

.DLL命令 HP_Agent_SetReuseAddressPolicy, , "ISocket.dll", "HP_Agent_SetReuseAddressPolicy", , 设置地址重用选项
    .参数 pAgent, 整数型
    .参数 enReusePolicy, 整数型, , #RAP_ 开头常量

.DLL命令 HP_Agent_PauseReceive, 逻辑型, "ISocket.dll", "HP_Agent_PauseReceive", , 暂停/恢复某个连接的数据接收工作
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 bPause, 逻辑型, , 真- 暂停, 假- 恢复

.DLL命令 HP_Agent_IsSecure, 逻辑型, "ISocket.dll", "HP_Agent_IsSecure", , 检测是否为安全连接（SSL/HTTPS）
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_ConnectWithExtra, 逻辑型, "ISocket.dll", "HP_Agent_ConnectWithExtra", , 连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() / OnHandShake() 事件
    .参数 pAgent, 整数型
    .参数 lpszRemoteAddress, 文本型, , 服务端地址
    .参数 usPort, 短整数型, , 服务端端口
    .参数 pdwConnID, 整数型, 传址, 连接 ID（默认：nullptr，不获取连接 ID）
    .参数 pExtra, 整数型, , 连接附加数据（默认：nullptr）

.DLL命令 HP_Agent_ConnectWithLocalPort, 逻辑型, "ISocket.dll", "HP_Agent_ConnectWithLocalPort", , 连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() / OnHandShake() 事件
    .参数 pAgent, 整数型
    .参数 lpszRemoteAddress, 文本型, , 服务端地址
    .参数 usPort, 短整数型, , 服务端端口
    .参数 pdwConnID, 整数型, 传址, 连接 ID（默认：nullptr，不获取连接 ID）
    .参数 usLocalPort, 整数型, , 本地端口（默认：0）

.DLL命令 HP_Agent_ConnectWithExtraAndLocalPort, 逻辑型, "ISocket.dll", "HP_Agent_ConnectWithExtraAndLocalPort", , 连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() / OnHandShake() 事件
    .参数 pAgent, 整数型
    .参数 lpszRemoteAddress, 文本型, , 服务端地址
    .参数 usPort, 短整数型, , 服务端端口
    .参数 pdwConnID, 整数型, 传址, 连接 ID（默认：nullptr，不获取连接 ID）
    .参数 usLocalPort, 整数型, , 本地端口（默认：0）

.DLL命令 HP_Client_IsPauseReceive, 逻辑型, "ISocket.dll", "HP_Client_IsPauseReceive", , 获取连接的数据接收状态
    .参数 pClient, 整数型
    .参数 pbPaused, 逻辑型, 传址, 返回 真- 暂停, 假- 恢复

.DLL命令 HP_Client_IsConnected, 逻辑型, "ISocket.dll", "HP_Client_IsConnected", , 检测是否有效连接
    .参数 pClient, 整数型

.DLL命令 HP_Client_SetReuseAddressPolicy, , "ISocket.dll", "HP_Client_SetReuseAddressPolicy", , 设置地址重用选项
    .参数 pClient, 整数型
    .参数 enReusePolicy, 整数型, , #RAP_ 开头常量

.DLL命令 HP_Client_PauseReceive, 逻辑型, "ISocket.dll", "HP_Client_PauseReceive", , 暂停/恢复某个连接的数据接收工作
    .参数 pClient, 整数型
    .参数 bPause, 逻辑型, , 真- 暂停, 假- 恢复

.DLL命令 HP_Client_Wait, 逻辑型, "ISocket.dll", "HP_Client_Wait", , 名称：等待 描述：等待通信组件停止运行
    .参数 pClient, 整数型
    .参数 dwMilliseconds, 整数型, , 超时时间（毫秒，默认：-1，永不超时）

.DLL命令 HP_Client_IsSecure, 逻辑型, "ISocket.dll", "HP_Client_IsSecure", , 检测是否为安全连接（SSL/HTTPS）
    .参数 pClient, 整数型

.DLL命令 HP_Create_HP_ThreadPool, 整数型, "ISocket.dll", "Create_HP_ThreadPool", , 创建 IHPThreadPool 对象

.DLL命令 HP_Destroy_HP_ThreadPool, , "ISocket.dll", "Destroy_HP_ThreadPool", , 销毁 IHPThreadPool 对象
    .参数 pThreadPool, 整数型

.DLL命令 HP_Create_HP_SocketTaskObj, 整数型, "ISocket.dll", "Create_HP_SocketTaskObj", , 创建 TSocketTask 对象
    .参数 fnTaskProc, 子程序指针, , 任务入口函数
    .参数 pSender, 整数型, , 发起对象
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pBuffer, 整数型, , 数据缓冲区
    .参数 iBuffLen, 整数型, , 数据缓冲区长度
    .参数 enBuffType, 整数型, , 数据缓冲区类型#TBT_（默认：#TBT_COPY）
    .参数 wParam, 整数型, , 自定义参数
    .参数 lParam, 整数型, , 自定义参数

.DLL命令 HP_Destroy_HP_SocketTaskObj, , "ISocket.dll", "Destroy_HP_SocketTaskObj", , 销毁 TSocketTask 对象
    .参数 pTask, 整数型

.DLL命令 HP_ThreadPool_Start, 逻辑型, "ISocket.dll", "HP_ThreadPool_Start", , 启动线程池组件,TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码
    .参数 pThreadPool, 整数型
    .参数 dwThreadCount, 整数型, , 线程数量，（默认：0）
    .参数 dwMaxQueueSize, 整数型, , 任务队列最大容量（0：不限制，默认：0）
    .参数 enRejectedPolicy, 整数型, , 任务拒绝处理策略,#TRP_ 开头常量
    .参数 dwStackSize, 整数型, , 线程堆栈空间大小（默认：0 -> 操作系统默认）

.DLL命令 HP_ThreadPool_Stop, 逻辑型, "ISocket.dll", "HP_ThreadPool_Stop", , 在规定时间内关闭线程池组件，如果工作线程在最大等待时间内未能正常关闭，会尝试强制关闭，这种情况下很可能会造成系统资源泄漏,TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码
    .参数 pThreadPool, 整数型
    .参数 dwMaxWait, 整数型, , 最大等待时间（毫秒，默认：INFINITE，一直等待）

.DLL命令 HP_ThreadPool_Submit, 逻辑型, "ISocket.dll", "HP_ThreadPool_Submit", , 向线程池提交异步任务,TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码,其中，错误码 #ERROR_DESTINATION_ELEMENT_FULL 表示任务队列已满
    .参数 pThreadPool, 整数型
    .参数 fnTaskProc, 子程序指针, , 任务处理函数
    .参数 pvArg, 整数型, , 任务参数
    .参数 dwMaxWait, 整数型, , 任务提交最大等待时间（仅对 TRP_WAIT_FOR 类型线程池生效，默认：INFINITE，一直等待）

.DLL命令 HP_ThreadPool_Submit_Task, 逻辑型, "ISocket.dll", "HP_ThreadPool_Submit_Task", , 向线程池提交异步 Socket 任务,TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码,其中，错误码 ERROR_DESTINATION_ELEMENT_FULL 表示任务队列已满
    .参数 pThreadPool, 整数型
    .参数 pTask, 整数型, , 任务参数
    .参数 dwMaxWait, 整数型, , 任务提交最大等待时间（仅对 TRP_WAIT_FOR 类型线程池生效，默认：INFINITE，一直等待）

.DLL命令 HP_ThreadPool_AdjustThreadCount, 逻辑型, "ISocket.dll", "HP_ThreadPool_AdjustThreadCount", , 增加或减少线程池的工作线程数量,TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码
    .参数 pThreadPool, 整数型
    .参数 dwNewThreadCount, 整数型, , 线程数量,>0 -> dwNewThreadCount,=0 -> (CPU核数 * 2 + 2),<0 -> (CPU核数 * (-dwNewThreadCount))

.DLL命令 HP_ThreadPool_Wait, 逻辑型, "ISocket.dll", "HP_ThreadPool_Wait", , 名称：等待 描述：等待线程池组件停止运行
    .参数 pThreadPool, 整数型
    .参数 dwMilliseconds, 整数型, , 超时时间（毫秒，默认：-1，永不超时）

.DLL命令 HP_ThreadPool_HasStarted, 逻辑型, "ISocket.dll", "HP_ThreadPool_HasStarted", , 检查线程池组件是否已启动
    .参数 pThreadPool, 整数型

.DLL命令 HP_ThreadPool_GetState, 整数型, "ISocket.dll", "HP_ThreadPool_GetState", , 查看线程池组件当前状态
    .参数 pThreadPool, 整数型

.DLL命令 HP_ThreadPool_GetQueueSize, 整数型, "ISocket.dll", "HP_ThreadPool_GetQueueSize", , 获取当前任务队列大小
    .参数 pThreadPool, 整数型

.DLL命令 HP_ThreadPool_GetTaskCount, 整数型, "ISocket.dll", "HP_ThreadPool_GetTaskCount", , 获取当前正在执行的任务数量
    .参数 pThreadPool, 整数型

.DLL命令 HP_ThreadPool_GetThreadCount, 整数型, "ISocket.dll", "HP_ThreadPool_GetThreadCount", , 获取工作线程数量
    .参数 pThreadPool, 整数型

.DLL命令 HP_ThreadPool_GetMaxQueueSize, 整数型, "ISocket.dll", "HP_ThreadPool_GetMaxQueueSize", , 获取任务队列最大容量
    .参数 pThreadPool, 整数型

.DLL命令 HP_ThreadPool_GetRejectedPolicy, 整数型, "ISocket.dll", "HP_ThreadPool_GetRejectedPolicy", , 获取任务拒绝处理策略
    .参数 pThreadPool, 整数型

.DLL命令 HP_RtlMoveMemory_TIPAddr, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, HP_TIPAddr, 传址
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 HP_RtlMoveMemory_TSocketTask, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, HP_TSocketTask, 传址
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 HP_RtlMoveMemory_bytes2ptr, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, 整数型
    .参数 Source, 字节集, 传址
    .参数 Length, 整数型

.DLL命令 HP_RtlMoveMemory_ptr2bytes, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, 字节集, 传址
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 HP_malloc, 整数型, "crtdll.dll", "@malloc", , 申请内存
    .参数 size, 整数型

.DLL命令 HP_free, , "crtdll.dll", "@free", , 释放内存
    .参数 block, 整数型

.DLL命令 HP_realloc, 整数型, "crtdll.dll", "@realloc", , 重置内存大小
    .参数 block, 整数型
    .参数 size, 整数型

.DLL命令 HP_memset, 整数型, "crtdll.dll", "@memset", , 填充内存
    .参数 _Dst, 整数型
    .参数 _Val, 整数型
    .参数 _Size, 整数型

.DLL命令 HP_memcpy, 整数型, "crtdll.dll", "@memcpy", , 复制内存
    .参数 _Dst, 整数型
    .参数 _Src, 整数型
    .参数 _Size, 整数型

.DLL命令 HP_memcmp, 整数型, "crtdll.dll", "@memcmp", , 比较前size个字节是否相同
    .参数 _Buf1, 整数型
    .参数 _Buf2, 整数型
    .参数 _Size, 整数型

.DLL命令 HP_Agent_GetFreeSocketObjPool, 整数型, "ISocket.dll", "HP_Agent_GetFreeSocketObjPool", , 获取 Socket 缓存池大小
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetFreeBufferObjPool, 整数型, "ISocket.dll", "HP_Agent_GetFreeBufferObjPool", , 获取内存块缓存池大小
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetFreeSocketObjHold, 整数型, "ISocket.dll", "HP_Agent_GetFreeSocketObjHold", , 获取 Socket 缓存池回收阀值
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetFreeBufferObjHold, 整数型, "ISocket.dll", "HP_Agent_GetFreeBufferObjHold", , 获取内存块缓存池回收阀值
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetMaxConnectionCount, 整数型, "ISocket.dll", "HP_Agent_GetMaxConnectionCount", , 获取最大连接数
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_GetWorkerThreadCount, 整数型, "ISocket.dll", "HP_Agent_GetWorkerThreadCount", , 获取工作线程数量
    .参数 pAgent, 整数型

.DLL命令 HP_Agent_IsMarkSilence, 逻辑型, "ISocket.dll", "HP_Agent_IsMarkSilence", , 检测是否标记静默时间
    .参数 pAgent, 整数型

.DLL命令 HP_TcpAgent_SendSmallFile, 逻辑型, "ISocket.dll", "HP_TcpAgent_SendSmallFile", , 名称：发送小文件 描述：向指定连接发送 4096 KB 以下的小文件,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 lpszFileName, 文本型, , 文件路径
    .参数 pHead, HP_WSABUF, , 头部附加数据
    .参数 pTail, HP_WSABUF, , 尾部附加数据

.DLL命令 HP_TcpAgent_SetSocketBufferSize, , "ISocket.dll", "HP_TcpAgent_SetSocketBufferSize", , 设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为 1024 的倍数）
    .参数 pAgent, 整数型
    .参数 dwSocketBufferSize, 整数型

.DLL命令 HP_TcpAgent_SetKeepAliveTime, , "ISocket.dll", "HP_TcpAgent_SetKeepAliveTime", , 设置正常心跳包间隔（毫秒，0 则不发送心跳包，默认：60 * 1000）
    .参数 pAgent, 整数型
    .参数 dwKeepAliveTime, 整数型

.DLL命令 HP_TcpAgent_SetKeepAliveInterval, , "ISocket.dll", "HP_TcpAgent_SetKeepAliveInterval", , 设置异常心跳包间隔（毫秒，0 不发送心跳包，，默认：20 * 1000，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
    .参数 pAgent, 整数型
    .参数 dwKeepAliveInterval, 整数型

.DLL命令 HP_TcpAgent_GetSocketBufferSize, 整数型, "ISocket.dll", "HP_TcpAgent_GetSocketBufferSize", , 获取通信数据缓冲区大小
    .参数 pAgent, 整数型

.DLL命令 HP_TcpAgent_GetKeepAliveTime, 整数型, "ISocket.dll", "HP_TcpAgent_GetKeepAliveTime", , 获取正常心跳包间隔
    .参数 pAgent, 整数型

.DLL命令 HP_TcpAgent_GetKeepAliveInterval, 整数型, "ISocket.dll", "HP_TcpAgent_GetKeepAliveInterval", , 获取异常心跳包间隔
    .参数 pAgent, 整数型

.DLL命令 HP_Client_Start, 逻辑型, "ISocket.dll", "HP_Client_Start", , 名称：启动通信组件 描述：启动客户端通信组件并连接服务端，启动完成后可开始收发数据,TRUE-- 成功,FALSE-- 失败，可通过 HP_Client_GetLastError() 获取错误代码,/
    .参数 pClient, 整数型
    .参数 lpszRemoteAddress, 文本型, , 服务端地址
    .参数 usPort, 短整数型, , 服务端端口
    .参数 bAsyncConnect, 逻辑型, , 是否采用异步 Connect

.DLL命令 HP_Client_StartWithBindAddress, 逻辑型, "ISocket.dll", "HP_Client_StartWithBindAddress", , 名称：启动通信组件（并指定绑定地址） 描述：启动客户端通信组件并连接服务端，启动完成后可开始收发数据,TRUE-- 成功,FALSE-- 失败，可通过 HP_Client_GetLastError() 获取错误代码,/
    .参数 pClient, 整数型
    .参数 lpszRemoteAddress, 文本型, , 服务端地址
    .参数 usPort, 短整数型, , 服务端端口
    .参数 bAsyncConnect, 逻辑型, , 是否采用异步 Connect
    .参数 lpszBindAddress, 文本型, , 绑定地址（默认：nullptr，TcpClient/UdpClient -> 不执行绑定操作，UdpCast 绑定 -> 0.0.0.0）

.DLL命令 HP_Client_StartWithBindAddressAndLocalPort, 逻辑型, "ISocket.dll", "HP_Client_StartWithBindAddressAndLocalPort", , 启动客户端通信组件并连接服务端，启动完成后可开始收发数据。TRUE -- 成功，FALSE -- 失败，可通过 HP_Client_GetLastError() 获取错误代码
    .参数 pClient, 整数型
    .参数 lpszRemoteAddress, 文本型, , 服务端地址
    .参数 usPort, 短整数型, , 服务端端口
    .参数 bAsyncConnect, 逻辑型, , 是否采用异步 Connect
    .参数 lpszBindAddress, 文本型, , 绑定地址（默认：nullptr，TcpClient/UdpClient -> 不执行绑定操作，UdpCast 绑定 -> 0.0.0.0）
    .参数 usLocalPort, 整数型, , 本地端口（默认：0）

.DLL命令 HP_Client_Stop, 逻辑型, "ISocket.dll", "HP_Client_Stop", , 名称：关闭通信组件 描述：关闭客户端通信组件，关闭完成后断开与服务端的连接并释放所有资源,TRUE-- 成功,FALSE-- 失败，可通过 HP_Client_GetLastError() 获取错误代码,/
    .参数 pClient, 整数型

.DLL命令 HP_Client_Send, 逻辑型, "ISocket.dll", "HP_Client_Send", , 名称：发送数据 描述：向服务端发送数据,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pClient, 整数型
    .参数 pBuffer, 整数型, , 发送缓冲区
    .参数 iLength, 整数型, , 发送缓冲区长度

.DLL命令 HP_Client_SendPart, 逻辑型, "ISocket.dll", "HP_Client_SendPart", , 名称：发送数据 描述：向服务端发送数据,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pClient, 整数型
    .参数 pBuffer, 整数型, , 发送缓冲区
    .参数 iLength, 整数型, , 发送缓冲区长度
    .参数 iOffset, 整数型, , 发送缓冲区指针偏移量

.DLL命令 HP_Client_SendPackets, 逻辑型, "ISocket.dll", "HP_Client_SendPackets", , 名称：发送多组数据 描述：向服务端发送多组数据,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pClient, 整数型
    .参数 pBuffers, HP_WSABUF, 传址 数组, 发送缓冲区数组
    .参数 iCount, 整数型, , 发送缓冲区数目

.DLL命令 HP_Client_SetExtra, , "ISocket.dll", "HP_Client_SetExtra", , 设置连接的附加数据
    .参数 pClient, 整数型
    .参数 pExtra, 整数型

.DLL命令 HP_Client_GetExtra, 整数型, "ISocket.dll", "HP_Client_GetExtra", , 获取连接的附加数据
    .参数 pClient, 整数型

.DLL命令 HP_Client_HasStarted, 逻辑型, "ISocket.dll", "HP_Client_HasStarted", , 检查通信组件是否已启动
    .参数 pClient, 整数型

.DLL命令 HP_Client_GetState, 整数型, "ISocket.dll", "HP_Client_GetState", , 查看通信组件当前状态
    .参数 pClient, 整数型

.DLL命令 HP_Client_GetLastError, 整数型, "ISocket.dll", "HP_Client_GetLastError", , 获取最近一次失败操作的错误代码
    .参数 pClient, 整数型

.DLL命令 HP_Client_GetLastErrorDesc, 文本型, "ISocket.dll", "HP_Client_GetLastErrorDesc", , 获取最近一次失败操作的错误描述
    .参数 pClient, 整数型

.DLL命令 HP_Client_GetConnectionID, 整数型, "ISocket.dll", "HP_Client_GetConnectionID", , 获取该组件对象的连接 ID
    .参数 pClient, 整数型

.DLL命令 HP_Client_GetLocalAddress, 逻辑型, "ISocket.dll", "HP_Client_GetLocalAddress", , 获取 Client Socket 的地址信息
    .参数 pClient, 整数型
    .参数 lpszAddress, 文本型
    .参数 piAddressLen, 整数型, 传址
    .参数 pusPort, 短整数型, 传址

.DLL命令 HP_Client_GetRemoteHost, 逻辑型, "ISocket.dll", "HP_Client_GetRemoteHost", , 获取连接的远程主机信息
    .参数 pClient, 整数型
    .参数 lpszHost, 文本型
    .参数 piHostLen, 整数型, 传址
    .参数 pusPort, 短整数型, 传址

.DLL命令 HP_Client_GetPendingDataLength, 逻辑型, "ISocket.dll", "HP_Client_GetPendingDataLength", , 获取连接中未发出数据的长度
    .参数 pClient, 整数型
    .参数 piPending, 整数型, 传址

.DLL命令 HP_Client_SetFreeBufferPoolSize, , "ISocket.dll", "HP_Client_SetFreeBufferPoolSize", , 设置内存块缓存池大小（通常设置为 -> PUSH 模型：5 - 10；PULL 模型：10 - 20 ）
    .参数 pClient, 整数型
    .参数 dwFreeBufferPoolSize, 整数型

.DLL命令 HP_Client_SetFreeBufferPoolHold, , "ISocket.dll", "HP_Client_SetFreeBufferPoolHold", , 设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
    .参数 pClient, 整数型
    .参数 dwFreeBufferPoolHold, 整数型

.DLL命令 HP_Client_GetReuseAddressPolicy, 整数型, "ISocket.dll", "HP_Client_GetReuseAddressPolicy", , 获取地址重用选项 #RAP_ 开头常量
    .参数 pClient, 整数型

.DLL命令 HP_Client_GetFreeBufferPoolSize, 整数型, "ISocket.dll", "HP_Client_GetFreeBufferPoolSize", , 获取内存块缓存池大小
    .参数 pClient, 整数型

.DLL命令 HP_Client_GetFreeBufferPoolHold, 整数型, "ISocket.dll", "HP_Client_GetFreeBufferPoolHold", , 获取内存块缓存池回收阀值
    .参数 pClient, 整数型

.DLL命令 HP_TcpClient_SendSmallFile, 逻辑型, "ISocket.dll", "HP_TcpClient_SendSmallFile", , 名称：发送小文件 描述：向服务端发送 4096 KB 以下的小文件,TRUE-- 成功,FALSE-- 失败，可通过 SYS_GetLastError() 获取 Windows 错误代码,/
    .参数 pClient, 整数型
    .参数 lpszFileName, 文本型, , 文件路径
    .参数 pHead, HP_WSABUF, , 头部附加数据
    .参数 pTail, HP_WSABUF, , 尾部附加数据

.DLL命令 HP_TcpClient_SetSocketBufferSize, , "ISocket.dll", "HP_TcpClient_SetSocketBufferSize", , 设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为：(N * 1024) - sizeof(TBufferObj)）
    .参数 pClient, 整数型
    .参数 dwSocketBufferSize, 整数型

.DLL命令 HP_TcpClient_SetKeepAliveTime, , "ISocket.dll", "HP_TcpClient_SetKeepAliveTime", , 设置正常心跳包间隔（毫秒，0 则不发送心跳包，默认：60 * 1000）
    .参数 pClient, 整数型
    .参数 dwKeepAliveTime, 整数型

.DLL命令 HP_TcpClient_SetKeepAliveInterval, , "ISocket.dll", "HP_TcpClient_SetKeepAliveInterval", , 设置异常心跳包间隔（毫秒，0 不发送心跳包，，默认：20 * 1000，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
    .参数 pClient, 整数型
    .参数 dwKeepAliveInterval, 整数型

.DLL命令 HP_TcpClient_GetSocketBufferSize, 整数型, "ISocket.dll", "HP_TcpClient_GetSocketBufferSize", , 获取通信数据缓冲区大小
    .参数 pClient, 整数型

.DLL命令 HP_TcpClient_GetKeepAliveTime, 整数型, "ISocket.dll", "HP_TcpClient_GetKeepAliveTime", , 获取正常心跳包间隔
    .参数 pClient, 整数型

.DLL命令 HP_TcpClient_GetKeepAliveInterval, 整数型, "ISocket.dll", "HP_TcpClient_GetKeepAliveInterval", , 获取异常心跳包间隔
    .参数 pClient, 整数型

.DLL命令 HP_TcpPullServer_Fetch, 整数型, "ISocket.dll", "HP_TcpPullServer_Fetch", , 名称：抓取数据 描述：用户通过该方法从 Socket 组件中抓取数据,En_HP_FetchResult,/
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pData, 字节集, , 抓取缓冲区
    .参数 iLength, 整数型, , 抓取数据长度

.DLL命令 HP_TcpPullServer_Peek, 整数型, "ISocket.dll", "HP_TcpPullServer_Peek", , 名称：窥探数据（不会移除缓冲区数据） 描述：用户通过该方法从 Socket 组件中窥探数据,En_HP_FetchResult,/
    .参数 pServer, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pData, 字节集, , 窥探缓冲区
    .参数 iLength, 整数型, , 窥探数据长度

.DLL命令 HP_TcpPullAgent_Fetch, 整数型, "ISocket.dll", "HP_TcpPullAgent_Fetch", , 名称：抓取数据 描述：用户通过该方法从 Socket 组件中抓取数据,En_HP_FetchResult,/
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pData, 字节集, , 抓取缓冲区
    .参数 iLength, 整数型, , 抓取数据长度

.DLL命令 HP_TcpPullAgent_Peek, 整数型, "ISocket.dll", "HP_TcpPullAgent_Peek", , 名称：窥探数据（不会移除缓冲区数据） 描述：用户通过该方法从 Socket 组件中窥探数据,En_HP_FetchResult,/
    .参数 pAgent, 整数型
    .参数 dwConnID, 整数型, , 连接 ID
    .参数 pData, 字节集, , 窥探缓冲区
    .参数 iLength, 整数型, , 窥探数据长度

.DLL命令 HP_TcpPullClient_Fetch, 整数型, "ISocket.dll", "HP_TcpPullClient_Fetch", , 名称：抓取数据 描述：用户通过该方法从 Socket 组件中抓取数据,En_HP_FetchResult,/
    .参数 pClient, 整数型
    .参数 pData, 字节集, , 抓取缓冲区
    .参数 iLength, 整数型, , 抓取数据长度

.DLL命令 HP_TcpPullClient_Peek, 整数型, "ISocket.dll", "HP_TcpPullClient_Peek", , 名称：窥探数据（不会移除缓冲区数据） 描述：用户通过该方法从 Socket 组件中窥探数据,En_HP_FetchResult,/
    .参数 pClient, 整数型
    .参数 pData, 字节集, , 窥探缓冲区
    .参数 iLength, 整数型, , 窥探数据长度

.DLL命令 HP_TcpPackServer_SetMaxPackSize, , "ISocket.dll", "HP_TcpPackServer_SetMaxPackSize", , 设置数据包最大长度（有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000）
    .参数 pServer, 整数型
    .参数 dwMaxPackSize, 整数型

.DLL命令 HP_TcpPackServer_SetPackHeaderFlag, , "ISocket.dll", "HP_TcpPackServer_SetPackHeaderFlag", , 设置包头标识（有效包头标识取值范围 0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0）
    .参数 pServer, 整数型
    .参数 usPackHeaderFlag, 短整数型

.DLL命令 HP_TcpPackServer_GetMaxPackSize, 整数型, "ISocket.dll", "HP_TcpPackServer_GetMaxPackSize", , 获取数据包最大长度
    .参数 pServer, 整数型

.DLL命令 HP_TcpPackServer_GetPackHeaderFlag, 短整数型, "ISocket.dll", "HP_TcpPackServer_GetPackHeaderFlag", , 获取包头标识
    .参数 pServer, 整数型

.DLL命令 HP_TcpPackAgent_SetMaxPackSize, , "ISocket.dll", "HP_TcpPackAgent_SetMaxPackSize", , 设置数据包最大长度（有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000）
    .参数 pAgent, 整数型
    .参数 dwMaxPackSize, 整数型

.DLL命令 HP_TcpPackAgent_SetPackHeaderFlag, , "ISocket.dll", "HP_TcpPackAgent_SetPackHeaderFlag", , 设置包头标识（有效包头标识取值范围 0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0）
    .参数 pAgent, 整数型
    .参数 usPackHeaderFlag, 短整数型

.DLL命令 HP_TcpPackAgent_GetMaxPackSize, 整数型, "ISocket.dll", "HP_TcpPackAgent_GetMaxPackSize", , 获取数据包最大长度
    .参数 pAgent, 整数型

.DLL命令 HP_TcpPackAgent_GetPackHeaderFlag, 短整数型, "ISocket.dll", "HP_TcpPackAgent_GetPackHeaderFlag", , 获取包头标识
    .参数 pAgent, 整数型

.DLL命令 HP_TcpPackClient_SetMaxPackSize, , "ISocket.dll", "HP_TcpPackClient_SetMaxPackSize", , 设置数据包最大长度（有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000）
    .参数 pClient, 整数型
    .参数 dwMaxPackSize, 整数型

.DLL命令 HP_TcpPackClient_SetPackHeaderFlag, , "ISocket.dll", "HP_TcpPackClient_SetPackHeaderFlag", , 设置包头标识（有效包头标识取值范围 0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0）
    .参数 pClient, 整数型
    .参数 usPackHeaderFlag, 短整数型

.DLL命令 HP_TcpPackClient_GetMaxPackSize, 整数型, "ISocket.dll", "HP_TcpPackClient_GetMaxPackSize", , 获取数据包最大长度
    .参数 pClient, 整数型

.DLL命令 HP_TcpPackClient_GetPackHeaderFlag, 短整数型, "ISocket.dll", "HP_TcpPackClient_GetPackHeaderFlag", , 获取包头标识
    .参数 pClient, 整数型

.DLL命令 listen, 整数型, "ws2_32.dll", "listen", 公开, 监听
    .参数 sockfd, 整数型, , 套接字描述符
    .参数 backlog, 整数型, , 最多容纳客户请求数

.DLL命令 bind, 整数型, "ws2_32.dll", "bind", 公开, 绑定一个地址和端口
    .参数 套接字描述符, 整数型
    .参数 地址结构, 套接字地址, 传址, 地址信息
    .参数 结构大小, 整数型, , 地址信息长度(长度16

.DLL命令 htons, 短整数型, "ws2_32.dll", "htons", 公开, 转换为network 排列方式的数目
    .参数 十六位主机命令, 短整数型, , hostshort端口号

.DLL命令 socket, 整数型, "ws2_32.dll", "socket", 公开, 创建套接字
    .参数 协议族, 整数型, , af使用的通信协议的协议族
    .参数 类型, 整数型, , lType流套接字类型
    .参数 协议, 整数型, , protocol使用的通信协议

.DLL命令 closesocket, 整数型, "ws2_32.dll", "closesocket", 公开, 销毁套接字
    .参数 套接字描述符, 整数型

.DLL命令 WSACleanup, 整数型, "ws2_32.dll", "WSACleanup", 公开, 卸载Winsocket服务

.DLL命令 WSAStartup, 整数型, "ws2_32.dll", "WSAStartup", 公开, 初始化WnSocket服务
    .参数 必需版本, 整数型, , wVersionRequired
    .参数 服务信息, 套接字信息, , lpWSAData

.DLL命令 SendARP, 整数型, "IPHLPAPI.DLL", "SendARP", 公开
    .参数 目标IP, 整数型
    .参数 本机IP, 整数型
    .参数 MAC缓冲, 字节型, 传址 数组
    .参数 长度, 整数型, 传址

.DLL命令 inet_addr, 整数型, "ws2_32.dll", "inet_addr", 公开
    .参数 IP, 文本型

.DLL命令 IsWow64Process_a, 整数型, "kernel32.dll", "IsWow64Process"
    .参数 hProcess, 整数型
    .参数 Wow64Process, 整数型, 传址

.DLL命令 IsWow64Process, 逻辑型, "kernel32.dll", "IsWow64Process", 公开
    .参数 hProcess, 整数型
    .参数 Wow64Process, 逻辑型, 传址

.DLL命令 QueryPerformanceFrequency, 整数型, "kernel32.dll", "QueryPerformanceFrequency", 公开, 返回计数频率
    .参数 lpFrequency, 长整数型, 传址

.DLL命令 QueryPerformanceCounter, 整数型, "kernel32.dll", "QueryPerformanceCounter", 公开, 获取计数值
    .参数 lpPerformanceCount, 长整数型, 传址

.DLL命令 ActivateKeyboardLayout, 整数型, "user32.dll", "ActivateKeyboardLayout", 公开, 输入法激活
    .参数 hkl, 整数型
    .参数 flags, 整数型

.DLL命令 ImmInstallIMEA, 整数型, "imm32.dll", "ImmInstallIMEA", 公开, 安装输入法
    .参数 文件名, 文本型
    .参数 输入法名称, 文本型

.DLL命令 UnloadKeyboardLayout, 整数型, "user32.dll", "UnloadKeyboardLayout", 公开, 缷载已有的键盘布局，成功则返回键盘布局句柄，失败返回0。
    .参数 HKL, 整数型, , 键盘布局句柄

.DLL命令 GetKeyboardLayoutList, 整数型, "user32.dll", "GetKeyboardLayoutList", 公开, 获得系统适用的所有键盘布局的一个列表，成功则返回键盘布局数量，失败返回0。
    .参数 nBuff, 整数型, , 如设为0，表示获取可用键盘布局的最大数量
    .参数 lpList, 整数型, 数组, 缓存数组指针，这个数组会随同句柄载入可用的键盘布局。

.DLL命令 LoadKeyboardLayoutA, 整数型, "user32.dll", "LoadKeyboardLayoutA", 公开, 载入一个键盘布局，并返回键盘布局句柄。0表示出错。
    .参数 pwszKLID, 文本型, , 一个8字符字串，用于描述键盘布局的名称。
    .参数 flags, 整数型, , 参考“KLF”常量。

.DLL命令 IMESetPubString, , "imedllhost09.ime", "IMESetPubString", 公开, 输入法注入
    .参数 dll文件名, 文本型, , 要注入的dll
    .参数 是否退出时卸载, 整数型, , 输入法退出时是否同时卸载注入的DLL（0-是，1-否）
    .参数 是否自动切换, 整数型, , 当切换到目标输入法时自动切换到下一个输入法（0-否，1-是）
    .参数 参数一, 整数型, , 0
    .参数 参数二, 整数型, , 0
    .参数 参数三, 整数型, , 0

.DLL命令 IMEClearPubString, 逻辑型, "imedllhost09.ime", "IMEClearPubString", 公开, 输入法停止注入

.DLL命令 RtlMoveMemory_MSG2, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, 整数型
    .参数 Source, MSG, 传址
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_MSG1, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, MSG, 传址
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 GetGUIThreadInfo, 整数型, "user32.dll", "GetGUIThreadInfo", 公开, 　
    .参数 idThread, 整数型
    .参数 pgui, PGUITHREADINFO, 传址

.DLL命令 GetAsyncKeyState, 整数型, "user32.dll", "GetAsyncKeyState", 公开, 取键状态
    .参数 键代码, 整数型, , vKey Long，欲测试的虚拟键的键码

.DLL命令 StretchBlt, , "gdi32.dll", "StretchBlt", 公开, 伸缩复制图象
    .参数 目标设备场景, 整数型
    .参数 目标位置横坐标, 整数型
    .参数 目标位置纵坐标, 整数型
    .参数 目标图像宽, 整数型
    .参数 目标图像高, 整数型
    .参数 源设备场景, 整数型
    .参数 源位置横坐标, 整数型
    .参数 源位置纵坐标, 整数型
    .参数 源图像宽, 整数型
    .参数 源图像高, 整数型
    .参数 光栅运算, 整数型

.DLL命令 FindWindowA, 整数型, "user32.dll", "FindWindowA", 公开, 寻找窗口列表中第一个符合指定条件的顶级窗口
    .参数 窗口类名, 文本型
    .参数 窗口标题, 文本型

.DLL命令 GetAncestor, 整数型, "user32.dll", "GetAncestor", 公开, 取出指定窗口的最顶级父窗口
    .参数 hwnd, 整数型, , 子窗口句柄
    .参数 gaFlags, 整数型

.DLL命令 GetParent, 整数型, "user32.dll", "GetParent", 公开, 取父句柄
    .参数 hwnd, 整数型

.DLL命令 CallWindowProcA, 整数型, "user32.dll", "CallWindowProcA", 公开
    .参数 窗口程序指针, 整数型
    .参数 hwnd, 整数型
    .参数 消息值, 整数型
    .参数 参数1, 整数型
    .参数 参数2, 整数型

.DLL命令 CallWindowProcW, 整数型, "User32.dll", "CallWindowProcW"
    .参数 lpPrevWndFunc, 整数型
    .参数 hWnd, 整数型
    .参数 Msg, 整数型
    .参数 wParam, 整数型
    .参数 lParam, 整数型

.DLL命令 GetWindow, 整数型, "user32.dll", "GetWindow", 公开, 获得一个窗口的句柄，该窗口与某源窗口有特定的关系
    .参数 源窗口, 整数型
    .参数 关系, 整数型, , 0：为一个源子窗口寻找第一个兄弟（同级）窗口，或寻找第一个顶级窗口  1：为一个源子窗口寻找最后一个兄弟（同级）窗口，或寻找最后一个顶级窗口  2：为源窗口寻找下一个兄弟窗口  3：为源窗口寻找前一个兄弟窗口  4：寻找窗口的所有者  5：寻找源窗口的第一个子窗口

.DLL命令 MessageBoxA, 整数型, "user32.dll", "MessageBoxA", 公开, 显示和操作一个消息框。该消息框包含一个应用程序定义的消息和标题，加上预定义的图标和按钮的任意组合。 wLanguageId参数指定为预定义的按钮使用的语言资源集。
    .参数 hwnd, 整数型, , 要创建的消息框的所有者窗口的句柄。如果这个参数为NULL，则消息框没有所有者窗口
    .参数 neirong, 文本型
    .参数 title, 文本型
    .参数 nom, 整数型

.DLL命令 LoadLibraryA, 整数型, "kernel32.dll", "LoadLibraryA", 公开, 载入指定的动态链接库，并将它映射到当前进程使用的地址空间。成功则返回库模块的句柄，零表示失败。
    .参数 动态链接库路径, 文本型, , 指定要载入的动态链接库的名称(全路径)

.DLL命令 LoadLibraryW, 整数型, "kernel32.dll", "LoadLibraryW"
    .参数 lpLibFileName, 整数型

.DLL命令 FreeLibrary, 逻辑型, "kernel32.dll", "FreeLibrary", 公开, 释放动态链接库
    .参数 动态链接库句柄, 整数型, , 使用LoadLibraryA命令返回的

.DLL命令 GetProcAddress, 整数型, "kernel32.dll", "GetProcAddress", 公开, 取动态链接库函数入口地址
    .参数 模块句柄, 整数型, , 通过LoadLibraryA命令取得
    .参数 接口名称, 文本型

.DLL命令 GetLastInputInfo, 整数型, "User32.dll", "GetLastInputInfo", , 检索键盘与鼠标功能的最后一次输入事件
    .参数 plii, PLASTINPUTINFO

.DLL命令 GetTickCount, 整数型, "kernel32.dll", "GetTickCount"

.DLL命令 DoOrganizeFavDlg, 整数型, "shdocvw.dll", "DoOrganizeFavDlg", 公开, 整理收藏夹
    .参数 hwnd, 整数型
    .参数 root, 文本型

.DLL命令 DoAddToFavDlg, 逻辑型, "shdocvw.dll", "DoAddToFavDlg", 公开, 添加到收藏夹
    .参数 hwnd, 整数型
    .参数 网址, 文本型
    .参数 缓存大小, 整数型
    .参数 标题, 文本型
    .参数 缓存, 整数型
    .参数 pid, 整数型

.DLL命令 SHGetSpecialFolderLocation, 整数型, "shell32.dll", "SHGetSpecialFolderLocation", 公开, 取收藏夹PID
    .参数 hwnd, 整数型
    .参数 type, 整数型
    .参数 pid, 整数型, 传址

.DLL命令 CoTaskMemFree, 整数型, "ole32.dll", "CoTaskMemFree", , 清除PID
    .参数 pid, 整数型

.DLL命令 CreateWaitableTimerA, 整数型, "kernel32.dll", "CreateWaitableTimerA", 公开, 程序延时
    .参数 lpTimerAttributes, 整数型
    .参数 bManualReset, 逻辑型
    .参数 lpTimerName, 整数型

.DLL命令 SetWaitableTimer, 整数型, "kernel32.dll", "SetWaitableTimer", 公开
    .参数 hTimer, 整数型
    .参数 pDueTime, 程序延时
    .参数 lPeriod, 整数型
    .参数 pfnCompletionRoutine, 整数型
    .参数 lpArgToCompletionRoutine, 整数型
    .参数 fResume, 逻辑型

.DLL命令 MsgWaitForMultipleObjects, 整数型, "User32.dll", "MsgWaitForMultipleObjects", 公开
    .参数 nCount, 整数型
    .参数 pHandles, 整数型, 传址
    .参数 fWaitAll, 逻辑型
    .参数 dwMilliseconds, 整数型
    .参数 dwWakeMask, 整数型

.DLL命令 CryptAcquireContextA, 整数型, "advapi32.dll", "CryptAcquireContextA", 公开
    .参数 phProv, 整数型, 传址
    .参数 pszContainer, 文本型
    .参数 pszProvider, 文本型
    .参数 dwProvType, 整数型
    .参数 dwFlags, 整数型

.DLL命令 CryptCreateHash, 整数型, "advapi32.dll", "CryptCreateHash", 公开
    .参数 hProv, 整数型
    .参数 Algid, 整数型
    .参数 hKey, 整数型
    .参数 dwFlags, 整数型
    .参数 phHash, 整数型, 传址

.DLL命令 CryptReleaseContext, 整数型, "advapi32.dll", "CryptReleaseContext", 公开
    .参数 hProv, 整数型
    .参数 dwFlags, 整数型

.DLL命令 CryptDestroyHash, 整数型, "advapi32.dll", "CryptDestroyHash", 公开
    .参数 hHash, 整数型

.DLL命令 CryptHashData, 整数型, "advapi32.dll", "CryptHashData", 公开
    .参数 hHash, 整数型
    .参数 pbData, 字节集, 传址
    .参数 dwDataLen, 整数型
    .参数 dwFlags, 整数型

.DLL命令 CryptGetHashParam, 整数型, "advapi32.dll", "CryptGetHashParam", 公开
    .参数 hHash, 整数型
    .参数 dwParam, 整数型
    .参数 pByte, 字节集
    .参数 pdwDataLen, 整数型, 传址
    .参数 dwFlags, 整数型

.DLL命令 GetSystemMetrics, 整数型, "User32.dll", "GetSystemMetrics", 公开, 获取windows环境信息
    .参数 nIndex, 整数型

.DLL命令 ExtractAssociatedIconA, 整数型, "shell32.dll", "ExtractAssociatedIconA", 公开, 如果找到任何图标，就返回图标的句柄；否则返回零,这个函数可判断一个可执行程序或DLL中是否存在图标，或是否有图标与系统注册表中指定的文件存在关联。随后，它允许我们提取出那些图标
    .参数 程序句柄, 整数型
    .参数 文件名, 文本型
    .参数 图标类型, 整数型, 传址

.DLL命令 DrawIcon, , "user32.dll", "DrawIcon", 公开, 在指定的位置画一个图标
    .参数 设备句柄, 整数型
    .参数 横向位置, 整数型
    .参数 纵向位置, 整数型
    .参数 图标句柄, 整数型

.DLL命令 LoadImage, 整数型, "user32.dll", "LoadImageA", 公开, 载入一个位图、图标或指针  执行成功则返回对象的一个句柄；零表示失败
    .参数 实例句柄, 整数型, , 要从其中载入图象的DLL或应用程序模块或实例句柄。零表示装载一幅固有图象
    .参数 图象标志符, 文本型, , 欲载入图象的名字。如指定了hInst，就用这个参数指定资源或资源的标志符（标志符是一个长整数）。如hInst为空，而且已指定了LR_LOADFROMFILE，那么这个参数代表文件名（位图、图标或指针文件）。如果是个Long型值，这个参数就代表固有位图、图标或指针的编号
    .参数 图象类型, 整数型, , 下述常数之一，指定了欲载入的图象类型：IMAGE_BITMAP， IMAGE_CURSOR， IMAGE_ICON
    .参数 图象宽度, 整数型, , 要求的图象宽度和高度。图象会根据情况自动伸缩。如设为零，表示用图象的默认大小
    .参数 图象高度, 整数型, , 同上
    .参数 常数组合, 整数型, , 下述常数的任意组合，它们都在api32.txt文件中得到了定义：;LR_DEFAULTCOLOR：以常规方式载入图象;LR_LOADREALSIZE：不对图象进行缩放处理。忽略n1和n2的设置;LR_CREATEDIBSECTION：如果指定了IMAGE_BITMAP，就返回DIBSection的句柄，而不是位图的句柄;LR_DEFAULTSIZE：如果n1和n2为零，就使用由系统定义的图象默认大小，而不是图象本身定义的大小;LR_LOADFROMFILE：如hInst为零，lpsz就代表要载入适当类型的一个文件的名字，仅适用于Win95;LR_LOADMAP3DCOLORS：将图象中的深灰、灰、以及浅灰像素都替换成COLOR_3DSHADOW，COLOR_3DFACE以及COLOR_3DLIGHT的当前设置;LR_LOADTRANSPARENT：与图象中第一个像素相符的所有像素都由系统替换;LR_MONOCHROME：将图象转换成单色;LR_SHARED：将图象作为一个共享资源载入。在NT 4.0中装载固有资源时要用到这个设置;

.DLL命令 HeapAlloc, 整数型, "kernel32.dll", "HeapAlloc", 公开, 从堆栈分配内存
    .参数 堆栈句柄, 整数型, , hHeap
    .参数 标志, 整数型, , dwFlags
    .参数 分配大小, 整数型, , dwBytes

.DLL命令 GetProcessHeap, 整数型, "kernel32.dll", "GetProcessHeap", 公开, _取进程堆栈句柄, 获取调用过程堆句柄

.DLL命令 SetMenuItemBitmaps, 逻辑型, "user32.dll", "SetMenuItemBitmaps", 公开, 设置菜单图标
    .参数 菜单句柄, 整数型
    .参数 位置, 整数型
    .参数 标志, 整数型
    .参数 未选图标句柄, 整数型
    .参数 已选图标句柄, 整数型

.DLL命令 InsertMenuA, 逻辑型, "user32.dll", "InsertMenuA", 公开
    .参数 菜单句柄, 整数型
    .参数 位置, 整数型
    .参数 标志, 整数型
    .参数 ID, 整数型
    .参数 标题, 文本型

.DLL命令 CreatePopupMenu, 整数型, "user32.dll", "CreatePopupMenu", 公开, 创建空白弹出式菜单

.DLL命令 ModifyMenuA, 逻辑型, "user32.dll", "ModifyMenuA", 公开, 修改菜单标题
    .参数 菜单句柄, 整数型
    .参数 标识符, 整数型, , nPosition，欲改变的菜单条目的标识符
    .参数 常数标志, 整数型, , wFlags，一系列常数标志的组合
    .参数 新命令ID, 整数型, , wIDNewItem，指定菜单条目的新命令ID
    .参数 标志, 文本型, , any，位图句柄或菜单文本

.DLL命令 DrawMenuBar, 逻辑型, "user32.dll", "DrawMenuBar", 公开, 为指定的窗口重画菜单
    .参数 hwnd, 整数型, , hwnd,要重画菜单栏的窗口的句柄

.DLL命令 GetMenuItemCount, 整数型, "user32.dll", "GetMenuItemCount", 公开, 菜单取数量
    .参数 hMenu, 整数型

.DLL命令 RemoveMenu, 逻辑型, "user32.dll", "RemoveMenu", 公开, 删除菜单，非零表示成功，零表示失败。会设置GetLastError
    .参数 菜单句柄, 整数型, , hmenu，菜单的句柄
    .参数 标识符, 整数型, , nPosition，欲改变的菜单条目的标识符。如在wFlags参数中指定了MF_BYCOMMAND，这个参数就代表欲改变的菜单条目的命令ID。如设置的是MF_BYPOSITION，这个参数就代表菜单条目在菜单中的位置（第一个条目的位置为零）
    .参数 标识符类型, 整数型, , wflags，常数MF_BYCOMMAND或MF_BYPOSITION，取决于nPosition参数

.DLL命令 AppendMenuA, 逻辑型, "user32.dll", "AppendMenuA", 公开, 添加菜单
    .参数 菜单句柄, 整数型, , hMenu,菜单句柄
    .参数 菜单常数标志, 整数型, , wFlags,参见相关帮助
    .参数 新菜单条目ID, 整数型, , wIDNewItem,指定菜单条目的新命令ID
    .参数 标志值, 文本型, , lpNewItem,参见相关帮助

.DLL命令 GetMenu, 整数型, "user32.dll", "GetMenu", 公开, 取指定窗口的菜单条句柄
    .参数 hwnd, 整数型

.DLL命令 GetSubMenu, 整数型, "user32.dll", "GetSubMenu", 公开, 取子菜单句柄
    .参数 菜单句柄, 整数型
    .参数 位置, 整数型

.DLL命令 InsertMenu, 逻辑型, "user32.dll", "InsertMenu", 公开
    .参数 hMenu, 整数型, , 手柄以被改变的菜单
    .参数 uPosition, 整数型, , 之前要插入新的菜单项所确定的uFlags参数指定的菜单项
    .参数 uFlags, 整数型
    .参数 uIDNewItem, 整数型, , 指定的标识符的新的菜单项，或如果uFlags参数的MF_POPUP的标志位，下拉菜单或子菜单的句柄
    .参数 lpNewItem, 整数型

.DLL命令 IsMenu, 逻辑型, "user32.dll", "IsMenu", 公开, 是否为菜单句柄
    .参数 hMenu, 整数型, , 手柄以被改变的菜单

.DLL命令 GetMenuStringA, 整数型, "user32.dll", "GetMenuStringA", 公开, 菜单取标题
    .参数 菜单句柄, 整数型
    .参数 项目索引, 整数型
    .参数 菜单标题, 文本型
    .参数 标题长度, 整数型
    .参数 操作标志, 整数型

.DLL命令 DestroyMenu, 逻辑型, "user32.dll", "DestroyMenu", 公开, 清除菜单
    .参数 hMenu, 整数型

.DLL命令 GetMenuItemID, 整数型, "user32.dll", "GetMenuItemID", 公开, 取菜单ID
    .参数 菜单句柄, 整数型
    .参数 位置, 整数型

.DLL命令 GdiplusStartup, 整数型, "gdiplus.dll", "GdiplusStartup", 公开, GDI启动 图像转换类
    .参数 token, 整数型, 传址
    .参数 inputbuf, GdiplusStartupInput
    .参数 outputbuf, 整数型

.DLL命令 GdiplusShutdown, , "gdiplus.dll", "GdiplusShutdown", 公开, _GDI关闭
    .参数 token, 整数型

.DLL命令 GdipSaveImageToFile_EncoderParameters, 整数型, "gdiplus.dll", "GdipSaveImageToFile"
    .参数 image, 整数型
    .参数 filename, 字节集
    .参数 clsidEncoder, 字节集
    .参数 encoderParams, EncoderParameters

.DLL命令 GdipSaveImageToFile, 整数型, "gdiplus.dll", "GdipSaveImageToFile", , 图像转换类
    .参数 image
    .参数 filename, 字节集
    .参数 clsidEncoder, 字节集
    .参数 encoderParams, 整数型

.DLL命令 InternetFindNextFileA, 整数型, "WinInet.dll", "InternetFindNextFileA", 公开
    .参数 hFind, 整数型
    .参数 lpvFindData, 查找的文件信息, 传址

.DLL命令 FtpFindFirstFileA, 整数型, "WinInet.dll", "FtpFindFirstFileA", 公开, _FTP查找文件
    .参数 hFtp, 整数型
    .参数 lpszSearchFile, 文本型
    .参数 lpFindFileData, 查找的文件信息
    .参数 dwFlags, 整数型
    .参数 dwContext, 整数型

.DLL命令 FtpGetFileA, 逻辑型, "WinInet.dll", "FtpGetFileA", 公开, _FTP文件下载
    .参数 hFtp, 整数型
    .参数 lpszRemoteFile, 文本型
    .参数 lpszNewFile, 文本型
    .参数 fFailIfExists, 整数型
    .参数 dwFlagsAndAttributes, 整数型
    .参数 dwFlags, 整数型
    .参数 dwContext, 整数型

.DLL命令 FtpPutFileA, 逻辑型, "WinInet.dll", "FtpPutFileA", 公开, _FTP文件上传
    .参数 连接句柄, 整数型
    .参数 本地文件名, 文本型
    .参数 FTP文件路径, 文本型
    .参数 文件传输方式, 整数型
    .参数 dwContext, 整数型

.DLL命令 FtpDeleteFileA, 逻辑型, "WinInet.dll", "FtpDeleteFileA", 公开
    .参数 hFtp, 整数型
    .参数 lpszKillFile, 文本型

.DLL命令 FtpSetCurrentDirectoryA, 逻辑型, "WinInet.dll", "FtpSetCurrentDirectoryA", 公开, _FTP置现行目录
    .参数 hFtp, 整数型
    .参数 lpszDirectory, 文本型

.DLL命令 FtpGetCurrentDirectoryA, 整数型, "WinInet.dll", "FtpGetCurrentDirectoryA", 公开, _FTP取现行目录
    .参数 hFtp, 整数型
    .参数 lpszDirectory, 文本型, 传址
    .参数 BuffLength, 整数型, 传址

.DLL命令 FtpRenameFileA, 逻辑型, "WinInet.dll", "FtpRenameFileA", 公开, _FTP文件改名
    .参数 hFtp, 整数型
    .参数 lpszCurFile, 文本型
    .参数 lpszNewFile, 文本型

.DLL命令 PathIsDirectoryA, 整数型, "shlwapi.dll", "PathIsDirectoryA", 公开, 目录是否存在
    .参数 lpszPath, 文本型

.DLL命令 PathIsDirectoryW, 整数型, "shlwapi.dll", "PathIsDirectoryW"
    .参数 pszPath, 字节集

.DLL命令 FtpCreateDirectoryA, 逻辑型, "WinInet.dll", "FtpCreateDirectoryA", 公开, _FTP创建目录
    .参数 hFtp, 整数型
    .参数 lpszNewDir, 文本型

.DLL命令 FtpGetFileSize, 整数型, "wininet.dll", "FtpGetFileSize", 公开, _FTP取文件大小
    .参数 hFile, 整数型
    .参数 lpdwFileSizeHigh, 整数型, 传址

.DLL命令 FtpOpenFileA, 整数型, "wininet.dll", "FtpOpenFileA", 公开, _FTP打开文件
    .参数 hConnect, 整数型
    .参数 lpszFileName, 文本型
    .参数 dwAccess, 整数型
    .参数 dwFlags, 整数型
    .参数 dwContext, 整数型

.DLL命令 RemoveDirectoryA, 整数型, "kernel32.dll", "RemoveDirectoryA", 公开, _FTP删除目录1
    .参数 lpPathName, 文本型

.DLL命令 FtpRemoveDirectoryA, 逻辑型, "WinInet.dll", "FtpRemoveDirectoryA", 公开, _FTP删除目录
    .参数 hFtp, 整数型
    .参数 lpszKillDir, 文本型

.DLL命令 _GetHGlobalFromStream, , "ole32.dll", "GetHGlobalFromStream", , 图像转换类
    .参数 pstm, 对象, , 未知类型：ISTREAM。
    .参数 phglobal, 整数型, 传址

.DLL命令 VirtualAllocEx_a, 整数型, "kernel32.dll", "VirtualAllocEx"
    .参数 hProcess, 整数型
    .参数 lpAddress, 整数型
    .参数 dwSize, 整数型, 传址
    .参数 flAllocationType, 整数型
    .参数 flProtect, 整数型

.DLL命令 VirtualAllocEx, 整数型, "kernel32.dll", "VirtualAllocEx", 公开, 分配外部指针
    .参数 hProcess, 整数型
    .参数 lpAddress, 整数型
    .参数 dwSize, 整数型
    .参数 flAllocationType, 整数型
    .参数 flProtect, 整数型

.DLL命令 GetLocalTime, 整数型, "kernel32.dll", "GetLocalTime", 公开, ,
    .参数 系统时间格式, 精易_时间, 传址

.DLL命令 GlobalSize, 整数型, "kernel32.dll", "GlobalSize", 公开, 返回全局内存块大小
    .参数 hMem, 整数型

.DLL命令 lstrcpyn_文本型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 取指针地址
    .参数 目标, 文本型, 传址
    .参数 源, 文本型, 传址
    .参数 长度, 整数型

.DLL命令 lstrcpyn_日期时间型, 整数型, "kernel32.dll", "lstrcpyn", 公开
    .参数 目的指针, 日期时间型, 传址
    .参数 源指针, 日期时间型, 传址
    .参数 复制长度, 整数型, , 0

.DLL命令 lstrcpyn_整数型, 整数型, "kernel32.dll", "lstrcpyn", 公开
    .参数 目标, 整数型, 传址
    .参数 源, 整数型, 传址
    .参数 长度, 整数型

.DLL命令 lstrcpyn_子程序指针, 整数型, "kernel32.dll", "lstrcpyn", 公开
    .参数 目标, 子程序指针, 传址
    .参数 源, 子程序指针, 传址
    .参数 长度, 整数型

.DLL命令 lstrcpyn_小数型, 整数型, "kernel32.dll", "lstrcpyn", 公开
    .参数 目标, 小数型, 传址
    .参数 源, 小数型, 传址
    .参数 长度, 整数型

.DLL命令 lstrcpyn_双精度小数型, 整数型, "kernel32.dll", "lstrcpyn", 公开
    .参数 目标, 双精度小数型, 传址
    .参数 源, 双精度小数型, 传址
    .参数 长度, 整数型

.DLL命令 lstrcpyn_短整数型, 整数型, "kernel32.dll", "lstrcpyn", 公开
    .参数 目标, 短整数型, 传址
    .参数 源, 短整数型, 传址
    .参数 长度, 整数型

.DLL命令 lstrcpyn_长整数型, 整数型, "kernel32.dll", "lstrcpyn", 公开
    .参数 目标, 长整数型, 传址
    .参数 源, 长整数型, 传址
    .参数 长度, 整数型

.DLL命令 SetHandleCount_字节型, 整数型, "kernel32.dll", "SetHandleCount", 公开, 设置进程的文件句柄数
    .参数 字节集数据, 字节型, 传址

.DLL命令 lstrcpyn_字节型, 整数型, "kernel32.dll", "lstrcpyn", 公开
    .参数 目标, 字节型, 传址
    .参数 源, 字节型, 传址
    .参数 长度, 整数型

.DLL命令 lstrcpyn_字节集, 整数型, "kernel32.dll", "lstrcpyn", 公开, 字节集
    .参数 欲取其指针, 字节集, 传址
    .参数 欲取其指针, 字节集, 传址
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_对象, 整数型, "kernel32.dll", "lstrcpyn", 公开, 图像转换类
    .参数 lpString1, 对象, 传址
    .参数 lpString2, 对象, 传址
    .参数 iMaxLength, 整数型

.DLL命令 GDIpCreateBitmapFromStream, 整数型, "gdiplus.dll", "GdipCreateBitmapFromStream", , 图像转换类
    .参数 stream, 整数型, , 图像转换类
    .参数 bitmap, 整数型, 传址

.DLL命令 GdipCreateHBITMAPFromBitmap, 整数型, "gdiplus.dll", "GdipCreateHBITMAPFromBitmap", 公开
    .参数 Bitmap
    .参数 hBmpReturn, , 传址
    .参数 Background

.DLL命令 GdipCreateBitmapFromHBITMAP, 整数型, "gdiplus.dll", "GdipCreateBitmapFromHBITMAP", 公开
    .参数 hbm
    .参数 hPal
    .参数 BITMAP, , 传址

.DLL命令 GlobalFree, 整数型, "kernel32.dll", "GlobalFree", 公开, 释放全局内存块
    .参数 hMem, 整数型

.DLL命令 CreateStreamOnHGlobal_整数型, 整数型, "ole32.dll", "CreateStreamOnHGlobal"
    .参数 hGlobal, 整数型
    .参数 fDeleteOnRelease, 整数型
    .参数 ppstm, 整数型, 传址

.DLL命令 CreateStreamOnHGlobal, 整数型, "Ole32.dll", "CreateStreamOnHGlobal", 公开
    .参数 hGlobal, 整数型
    .参数 fDeleteOnRelease, 逻辑型
    .参数 ppstm, 整数型, 传址

.DLL命令 PNG窗口类_GdiplusStartup, 整数型, "gdiplus.dll", "GdiplusStartup"
    .参数 参数1, 整数型, 传址
    .参数 参数2, PNG窗口类数据结构_1
    .参数 参数3, 整数型

.DLL命令 PNG窗口类_GdiplusShutdown, , "gdiplus.dll", "GdiplusShutdown"
    .参数 参数1, 整数型

.DLL命令 PNG窗口类_GetDC, 整数型, , "GetDC"
    .参数 参数1, 整数型

.DLL命令 PNG窗口类_GdipCreateFromHDC, 整数型, "GdiPlus.dll", "GdipCreateFromHDC"
    .参数 参数1, 整数型
    .参数 参数2, 整数型, 传址

.DLL命令 PNG窗口类_GlobalAlloc, 整数型, , "GlobalAlloc"
    .参数 参数1, 整数型
    .参数 参数2, 整数型

.DLL命令 PNG窗口类_GlobalLock, 整数型, , "GlobalLock"
    .参数 参数1, 整数型

.DLL命令 PNG窗口类_GlobalUnlock, 整数型, , "GlobalUnlock"
    .参数 参数1, 整数型

.DLL命令 PNG窗口类_CreateStreamOnHGlobal, 整数型, "Ole32.dll", "CreateStreamOnHGlobal"
    .参数 参数1, 整数型
    .参数 参数2, 整数型
    .参数 参数3, 整数型, 传址

.DLL命令 PNG窗口类_GdipGetImageHeight, 整数型, "gdiplus", "GdipGetImageHeight"
    .参数 参数1, 整数型
    .参数 参数2, 整数型, 传址

.DLL命令 PNG窗口类_GdipGetImageWidth, 整数型, "gdiplus", "GdipGetImageWidth"
    .参数 参数1, 整数型
    .参数 参数2, 整数型, 传址

.DLL命令 PNG窗口类_GdipLoadImageFromStream, 整数型, "GdiPlus.dll", "GdipLoadImageFromStream"
    .参数 参数1, 整数型
    .参数 参数2, 整数型, 传址

.DLL命令 PNG窗口类_GdipGetImageDimension, 整数型, "GdiPlus.dll", "GdipGetImageDimension"
    .参数 参数1, 整数型
    .参数 参数2, 小数型, 传址
    .参数 参数3, 小数型, 传址

.DLL命令 PNG窗口类_MoveWindow, 整数型, , "MoveWindow"
    .参数 参数1, 整数型
    .参数 参数2, 整数型
    .参数 参数3, 整数型
    .参数 参数4, 整数型
    .参数 参数5, 整数型
    .参数 参数6, 逻辑型

.DLL命令 PNG窗口类_GetWindowRect, , , "GetWindowRect"
    .参数 参数1, 整数型
    .参数 参数2, PNG窗口类数据结构_2, 传址

.DLL命令 PNG窗口类_GlobalFree, 整数型, , "GlobalFree"
    .参数 参数1, 整数型

.DLL命令 PNG窗口类_CreateCompatibleDC, 整数型, , "CreateCompatibleDC"
    .参数 参数1, 整数型

.DLL命令 PNG窗口类_CreateDIBSection, 整数型, "gdi32.dll", "CreateDIBSection"
    .参数 参数1, 整数型
    .参数 参数2, PNG窗口类数据结构_3
    .参数 参数3, 整数型
    .参数 参数4, 整数型
    .参数 参数5, 整数型
    .参数 参数6, 整数型

.DLL命令 PNG窗口类_SelectObject, 整数型, , "SelectObject"
    .参数 参数1, 整数型
    .参数 参数2, 整数型

.DLL命令 PNG窗口类_GdipDrawImageRect, 整数型, "GdiPlus.dll", "GdipDrawImageRect"
    .参数 参数1, 整数型
    .参数 参数2, 整数型
    .参数 参数3, 小数型
    .参数 参数4, 小数型
    .参数 参数5, 小数型
    .参数 参数6, 小数型

.DLL命令 PNG窗口类_GetWindowLongA, 整数型, "user32.dll", "GetWindowLongA"
    .参数 参数1, 整数型
    .参数 参数2, 整数型

.DLL命令 PNG窗口类_UpdateLayeredWindow, 整数型, , "UpdateLayeredWindow"
    .参数 参数1, 整数型
    .参数 参数2, 整数型
    .参数 参数3, PNG窗口类数据结构_4
    .参数 参数4, PNG窗口类数据结构_5
    .参数 参数5, 整数型
    .参数 参数6, PNG窗口类数据结构_4
    .参数 参数7, 整数型
    .参数 参数8, PNG窗口类数据结构_6
    .参数 参数9, 整数型

.DLL命令 PNG窗口类_DeleteDC, 整数型, , "DeleteDC"
    .参数 参数1, 整数型

.DLL命令 PNG窗口类_ReleaseDC, , , "ReleaseDC"
    .参数 参数1, 整数型
    .参数 参数2, 整数型

.DLL命令 PNG窗口类_DeleteObject, 整数型, , "DeleteObject"
    .参数 参数1, 整数型

.DLL命令 PNG窗口类_SetWindowLongA, 整数型, "user32", "SetWindowLongA"
    .参数 参数1, 整数型
    .参数 参数2, 整数型
    .参数 参数3, 整数型

.DLL命令 PNG窗口类_GdipDisposeImage, 整数型, "gdiplus.dll", "GdipDisposeImage"
    .参数 参数1, 整数型

.DLL命令 PNG窗口类_GdipDeleteGraphics, 整数型, "gdiplus", "GdipDeleteGraphics"
    .参数 参数1, 整数型

.DLL命令 _CreateStreamOnHGlobal_int, 整数型, "ole32.dll", "CreateStreamOnHGlobal", , 图像转换类
    .参数 hGlobal
    .参数 fDeleteOnRelease, 逻辑型
    .参数 ppstm, , 传址

.DLL命令 GdipSaveImageToStream_字节集, 整数型, "GdiPlus.dll", "GdipSaveImageToStream"
    .参数 image, 整数型
    .参数 stream, 整数型
    .参数 clsidEncoder, 字节集
    .参数 encoderParams, 整数型

.DLL命令 GDIpSaveImageToStream_GUID, 整数型, "gdiplus.dll", "GdipSaveImageToStream", 公开, 图像转换类
    .参数 image, 整数型
    .参数 stream, 整数型
    .参数 clsidEncoder, GUID
    .参数 encoderParams, 整数型

.DLL命令 GetHGlobalFromStream, 整数型, "ole32.dll", "GetHGlobalFromStream", , 图像转换类
    .参数 pstm, 整数型, , 未知类型：ISTREAM。
    .参数 phglobal, 整数型, 传址

.DLL命令 RtlMoveMemory_int2Bytes, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 内存拷贝
    .参数 Destination, 字节集
    .参数 字节集指针, 整数型
    .参数 数据长度, 整数型

.DLL命令 RtlMoveMemory_MSG0, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, MSG
    .参数 Source, 整数型
    .参数 cbCopy, 整数型

.DLL命令 CallNextHookEx, 整数型, "user32.dll", "CallNextHookEx", 公开, 下一个钩子
    .参数 hHook, 整数型
    .参数 icode, 整数型
    .参数 wParam, 整数型
    .参数 lParam, 整数型

.DLL命令 SetWindowsHookExA, 整数型, "User32.dll", "SetWindowsHookExA", 公开, 安装钩子
    .参数 ihook, 整数型
    .参数 lpfunc, 子程序指针
    .参数 hin, 整数型
    .参数 threadid, 整数型

.DLL命令 UnhookWindowsHookEx, 逻辑型, "User32.dll", "UnhookWindowsHookEx", 公开, 卸载钩子
    .参数 hHook, 整数型

.DLL命令 WriteProcessMemory_文本型, 逻辑型, "kernel32.dll", "WriteProcessMemory", 公开, 写文本内存
    .参数 hProcess, 整数型
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 文本型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 LocalSize_SHELLEXECUTEINFOA, 整数型, "kernel32.dll", "LocalSize", 公开, 返回本地内存块大小　
    .参数 hMem, SHELLEXECUTEINFOA

.DLL命令 LocalSize, 整数型, "kernel32.dll", "LocalSize", 公开, 返回本地内存块大小
    .参数 hMem, 整数型

.DLL命令 RtlMoveMemory_字节集, , "kernel32.dll", "RtlMoveMemory", 公开, 写内存_字节集
    .参数 Destination, 整数型
    .参数 Source, 字节集
    .参数 Length, 整数型

.DLL命令 SetDIBits, 整数型, "Gdi32.dll", "SetDIBits"
    .参数 hdc, 整数型
    .参数 hBitmap, 整数型
    .参数 nStartScan, 整数型
    .参数 nNumScans, 整数型
    .参数 lpBits, 字节集, 传址
    .参数 lpBI, BITMAPINFO
    .参数 wUsage, 整数型

.DLL命令 RtlMoveMemory_Bin_To_BITMAPINFO, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, BITMAPINFO, 传址
    .参数 Source, 字节集, 传址
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_BITMAPINFO, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, _内存图像截图1
    .参数 Destination, 字节集
    .参数 Source, BITMAPINFO
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_BITMAPFILEHEADER, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, _内存图像截图
    .参数 Destination, 字节集
    .参数 Source, BITMAPFILEHEADER
    .参数 Length, 整数型

.DLL命令 GetDIBColorTable, , "gdi32.dll", "GetDIBColorTable", 公开, 取得颜色表信息
    .参数 hDC, 整数型, , Long，已选入了一个DIBSection对象的设备场景
    .参数 un1, 整数型, , Long，颜色表中欲取回的第一个条目的索引
    .参数 un2, 整数型, , Long，欲取回的条目数量
    .参数 pRGBQuad, 字节集, 传址, RGBQUAD，这个结构数组用于装载颜色表信息的第一个条目

.DLL命令 RtlMoveMemory_位图信息, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 内存拷贝_
    .参数 Destination, 字节集
    .参数 Source, 位图信息_
    .参数 Length, 整数型

.DLL命令 GetBitmapBits, , "gdi32.dll", "GetBitmapBits", 公开, 复制二进制位图_
    .参数 位图句柄, 整数型
    .参数 字节限制, 整数型
    .参数 缓冲区, 字节集, 传址

.DLL命令 CreateDIBSection1, 整数型, "gdi32.dll", "CreateDIBSection", 公开,  创建GDI对象2_
    .参数 设备场景句柄, 整数型
    .参数 位图数据, 字节集, 传址
    .参数 常数, 整数型
    .参数 内存地址, 整数型, 传址
    .参数 文件映射句柄, 整数型
    .参数 偏移量, 整数型

.DLL命令 CreateDIBSection, 整数型, "gdi32.dll", "CreateDIBSection", 公开, 创建一个DIBSection。这是一个GDI对象，可象一幅与设备有关位图那样使用。但是，它在内部作为一幅与设备无关位图保存  执行成功返回DIBSection位图的句柄，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 一个设备场景的句柄。如dw设为DIB_PAL_COLORS，那么DIB颜色表就会用来自逻辑调色板的颜色进行初始化
    .参数 pBitmapInfo, 位图信息_, , BITMAPINFO，这个结构初始化成欲创建的那幅位图的配置数据
    .参数 常数, 整数型, , 下述常数之一：;DIB_PAL_COLORS：BITMAPINFO包含了一个16位调色板索引的数组;DIB_RGB_COLORS：BITMAPINFO包含了一个颜色表，其中保存有32位颜色（RGBQUAD）
    .参数 内存地址, 整数型, , 用于载入DIBSection数据区的内存地址
    .参数 文件映射句柄, 整数型, , 指向一个文件映射对象的可选句柄，位图将在其中创建。如设为零，Windows会自动分配内存
    .参数 偏移量, 整数型, , 如指定了句柄，就用这个参数指定位图数据在文件映射对象中的偏移量;

.DLL命令 RtlMoveMemory_BITMAPFILEHEADER_字节型, , "kernel32.dll", "RtlMoveMemory", 公开
    .参数 Dest, 字节型, 传址
    .参数 Src, BITMAPFILEHEADER
    .参数 len, 整数型

.DLL命令 RtlMoveMemory_BITMAPINFOHEADER, , "kernel32.dll", "RtlMoveMemory", 公开
    .参数 Dest, 字节型, 传址
    .参数 Src, BITMAPINFOHEADER
    .参数 len, 整数型

.DLL命令 RtlFillMemory_字节, 整数型, "kernel32.dll", "RtlFillMemory", , 填充内存字节
    .参数 Destination, 整数型, , 指针地址
    .参数 Length, 整数型, , 长度
    .参数 Fill, 字节型, , 字节数据

.DLL命令 LsaFreeMemory, 整数型, "ADVAPI32.DLL", "LsaFreeMemory", 公开
    .参数 Buffer, 字节集, 传址

.DLL命令 LsaClose, 整数型, "ADVAPI32.DLL", "LsaClose", 公开
    .参数 ObjectHandle, 整数型

.DLL命令 RtlMoveMemory_取硬盘特征号3, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 lpvDest, 取硬盘特征号3, 传址
    .参数 lpvSource, 字节集
    .参数 cbCopy, 整数型

.DLL命令 RtlMoveMemory_NMLVCUSTOMDRAW, , "kernel32.dll", "RtlMoveMemory", 公开
    .参数 Destination, NMLVCUSTOMDRAW
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_NMLVCUSTOMDRAW2, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, 整数型
    .参数 Source, NMLVCUSTOMDRAW
    .参数 Length, 整数型

.DLL命令 DrawText_RECT, 整数型, "user32.dll", "DrawTextA", , 将文本描绘到指定的矩形中  描绘文字的高度
    .参数 hdc, 整数型, , 欲在其中显示文字的一个设备场景的句柄
    .参数 lpStr, 文本型, , 欲描绘的文本字串
    .参数 nCount, 整数型, , 欲描绘的字符数量。如果要描绘整个字串（直到空中止符），则可将这个参数设为-1
    .参数 lpRect, RECT, , RECT，指定用于绘图的一个格式化矩形（采用逻辑坐标）
    .参数 wFormat, 整数型, , 一个标志位数组，决定了以何种形式执行绘图。参考下面总结的常数类型列表标志常数说明DT_BOTTOM必须同时指定DT_SINGLE。指示文本对齐格式化矩形的底边DT_CALCRECT象下面这样计算格式化矩形：多行绘图时矩形的底边根据需要进行延展，以便容下所有文字；单行绘图时，延展矩形的右侧。不描绘文字。由lpRect参数指定的矩形会载入计算出来的值DT_CENTER文本垂直居中DT_EXPANDTABS描绘文字的时候，对制表站进行扩展。默认的制表站间距是8个字符。但是，可用DT_TABSTOP标志改变这项设定DT_EXTERNALLEADING计算文本行高度的时候，使用当前字体的外部间距属性（the external leading attribute）DT_LEFT文本左对齐DT_NOCLIP描绘文字时不剪切到指定的矩形DT_NOPREFIX通常，函数认为 & 字符表示应为下一个字符加上下划线。该标志禁止这种行为DT_RIGHT文本右对齐DT_SINGLELINE只画单行DT_TABSTOP指定新的制表站间距，采用这个整数的高8位DT_TOP必须同时指定DT_SINGLE。指示文本对齐格式化矩形的顶部DT_VCENTER必须同时指定DT_SINGLE。指示文本对齐格式化矩形的中部DT_WORDBREAK进行自动换行。如用SetTextAlign函数设置了TA_UPDATECP标志，这里的设置则无效;

.DLL命令 DrawText, 整数型, "user32.dll", "DrawTextA", 公开, 将文本描绘到指定的矩形中  描绘文字的高度
    .参数 设备场景句柄, 整数型, , 欲在其中显示文字的一个设备场景的句柄
    .参数 描绘的字串, 文本型, , 欲描绘的文本字串
    .参数 描绘的字串数量, 整数型, , 欲描绘的字符数量。如果要描绘整个字串（直到空中止符），则可将这个参数设为-1
    .参数 描绘文本区域, 精易_矩形, , RECT，指定用于绘图的一个格式化矩形（采用逻辑坐标）
    .参数 格式, 整数型, , 一个标志位数组，决定了以何种形式执行绘图。参考下面总结的常数类型列表标志常数说明DT_BOTTOM必须同时指定DT_SINGLE。指示文本对齐格式化矩形的底边DT_CALCRECT象下面这样计算格式化矩形：多行绘图时矩形的底边根据需要进行延展，以便容下所有文字；单行绘图时，延展矩形的右侧。不描绘文字。由lpRect参数指定的矩形会载入计算出来的值DT_CENTER文本垂直居中DT_EXPANDTABS描绘文字的时候，对制表站进行扩展。默认的制表站间距是8个字符。但是，可用DT_TABSTOP标志改变这项设定DT_EXTERNALLEADING计算文本行高度的时候，使用当前字体的外部间距属性（the external leading attribute）DT_LEFT文本左对齐DT_NOCLIP描绘文字时不剪切到指定的矩形DT_NOPREFIX通常，函数认为 & 字符表示应为下一个字符加上下划线。该标志禁止这种行为DT_RIGHT文本右对齐DT_SINGLELINE只画单行DT_TABSTOP指定新的制表站间距，采用这个整数的高8位DT_TOP必须同时指定DT_SINGLE。指示文本对齐格式化矩形的顶部DT_VCENTER必须同时指定DT_SINGLE。指示文本对齐格式化矩形的中部DT_WORDBREAK进行自动换行。如用SetTextAlign函数设置了TA_UPDATECP标志，这里的设置则无效;

.DLL命令 WriteProcessMemory_写字节, 逻辑型, "kernel32.dll", "WriteProcessMemory", 公开
    .参数 hProcess, 整数型
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 字节型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 ReadProcessMemory_字节型, 逻辑型, "Kernel32.dll", "ReadProcessMemory", 公开, 读内存字节
    .参数 hProcess, 整数型
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 字节型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 VirtualProtectEx, 整数型, "kernel32.dll", "VirtualProtectEx", 公开, 修改虚拟保护
    .参数 进程句柄, 整数型
    .参数 内存地址, 整数型
    .参数 内存大小, 整数型
    .参数 属性, 整数型
    .参数 保存之前属性, 整数型, 传址

.DLL命令 VirtualProtect, 逻辑型, "kernel32.dll", "VirtualProtect", 公开, _修改内存属性
    .参数 lpAddress, 整数型
    .参数 dwSize, 整数型
    .参数 flNewProtect, 整数型
    .参数 lpflOldProtect, 整数型, 传址

.DLL命令 VirtualQueryEx32, 整数型, "kernel32.dll", "VirtualQueryEx"
    .参数 hProcess, 整数型
    .参数 lpAddress, 整数型
    .参数 info, MEMORY_BASIC_INFORMATION, 传址
    .参数 dwLength, 整数型

.DLL命令 VirtualQueryEx, 整数型, "kernel32.dll", "VirtualQueryEx", 公开, 取内存属性,返回虚拟保护
    .参数 hProcess, 整数型
    .参数 lpAddress, 整数型
    .参数 lpBuffer, 精易_内存属性
    .参数 dwLength, 整数型

.DLL命令 WriteProcessMemory_整数5, 整数型, "kernel32.dll", "WriteProcessMemory"
    .参数 hProcess, 整数型
    .参数 lpBaseAddress, 整数型
    .参数 lpBuffer, 整数型
    .参数 nSize, 整数型
    .参数 lpNumberOfBytesWritten, 整数型, 传址

.DLL命令 WriteProcessMemory_整数3, 逻辑型, "kernel32.dll", "WriteProcessMemory", 公开, 内存写整数,有传址
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 整数型, 传址
    .参数 数据长度, 整数型
    .参数 实际写出长度, 整数型

.DLL命令 WriteProcessMemory_整数型, 整数型, "kernel32.dll", "WriteProcessMemory", , 内存写整数，没传址
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 整数型
    .参数 数据长度, 整数型
    .参数 实际写出长度, 整数型

.DLL命令 ReadProcessMemory_整数型, 逻辑型, "kernel32.dll", "ReadProcessMemory", 公开, 内存读整数,有传址
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 整数型, 传址
    .参数 数据长度, 整数型
    .参数 实际写出长度, 整数型

.DLL命令 ReadProcessMemory_短整数型, 逻辑型, "kernel32.dll", "ReadProcessMemory", 公开, 内存读整数,有传址
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 短整数型, 传址
    .参数 数据长度, 整数型
    .参数 实际写出长度, 整数型

.DLL命令 ReadProcessMemory_长整数型, 逻辑型, "kernel32.dll", "ReadProcessMemory", 公开, 内存读整数,有传址
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 长整数型, 传址
    .参数 数据长度, 整数型
    .参数 实际写出长度, 整数型

.DLL命令 WriteProcessMemory_小数型, 逻辑型, "kernel32.dll", "WriteProcessMemory", 公开, 内存写小数,有传址
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 小数型, 传址
    .参数 数据长度, 整数型
    .参数 实际写出长度, 整数型

.DLL命令 ReadProcessMemory_小数型, 逻辑型, "kernel32.dll", "ReadProcessMemory", 公开, 内存读小数,有传址
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 小数型, 传址
    .参数 数据长度, 整数型
    .参数 实际写出长度, 整数型

.DLL命令 ReadProcessMemory_整数型1, 整数型, "kernel32.dll", "ReadProcessMemory", 公开, 内存读整数，没传址
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 整数型
    .参数 数据长度, 整数型
    .参数 实际写出长度, 整数型

.DLL命令 ReadProcessMemory_整数型2, 整数型, "kernel32.dll", "ReadProcessMemory", 公开, 内存读整数,有传址
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 整数型, 传址
    .参数 数据长度, 整数型
    .参数 实际写出长度, 整数型, 传址

.DLL命令 CreateMutexA, 整数型, "kernel32.dll", "CreateMutexA", 公开
    .参数 互斥体结构, 整数型
    .参数 拥有互斥体, 整数型
    .参数 互斥体对象的名字, 文本型

.DLL命令 WriteProcessMemory_字节集, 逻辑型, "kernel32.dll", "WriteProcessMemory", 公开
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 字节集
    .参数 数据长度, 整数型
    .参数 实际写出长度, 整数型

.DLL命令 ReadProcessMemory_文本型, 逻辑型, "Kernel32.dll", "ReadProcessMemory"
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 文本型, 传址
    .参数 数据长度, 整数型
    .参数 读取的长度, 整数型, 传址

.DLL命令 ReadProcessMemory_字节集, 逻辑型, "Kernel32.dll", "ReadProcessMemory", 公开, 内存读字节集
    .参数 hProcess, 整数型
    .参数 内存地址, 整数型
    .参数 数据指针, 字节集, 传址
    .参数 数据长度, 整数型
    .参数 读取的长度, 整数型, 传址

.DLL命令 Module32First, 整数型, "Kernel32.dll", "Module32First", 公开, 第一个模块，查找模块
    .参数 快照句柄, 整数型
    .参数 模块信息, 精易_模块信息

.DLL命令 Module32Next, 整数型, "kernel32.dll", "Module32Next", 公开, 下一个模块
    .参数 快照句柄, 整数型
    .参数 模块信息, 精易_模块信息

.DLL命令 GetModuleHandleA1, 整数型, "kernel32.dll", "GetModuleHandleA", 公开, 取模块句柄
    .参数 lpModuleName, 整数型

.DLL命令 GetModuleHandleA, 整数型, "kernel32.dll", "GetModuleHandleA", 公开, 取模块句柄
    .参数 lpModuleName, 文本型

.DLL命令 GetModuleHandleW, 整数型, "kernel32.dll", "GetModuleHandleW"
    .参数 lpModuleName, 整数型

.DLL命令 PathFindExtensionA, 文本型, "shlwapi.dll", "PathFindExtensionA", 公开, 文件_取扩展名, 无扩展名返回空
    .参数 文件路径, 文本型, , pszPath

.DLL命令 PathRenameExtensionA, 逻辑型, "shlwapi.dll", "PathRenameExtensionA", 公开, 文件_改扩展名
    .参数 文件名, 文本型, , pszPath
    .参数 扩展名, 文本型, , pszExt

.DLL命令 PathRemoveFileSpec, 整数型, "Shlwapi.dll", "PathRemoveFileSpecA", 公开, 删除结尾的文件名和反斜杠路径，如果有他们。
    .参数 pszPath, 文本型

.DLL命令 PathMatchSpec, 逻辑型, "shlwapi.dll", "PathMatchSpecA", 公开, 搜索的字符串，使用DOS通配符匹配类型。
    .参数 pszFile, 文本型
    .参数 pszSpec, 文本型

.DLL命令 PathFindFileNameA, 文本型, "shlwapi.dll", "PathFindFileNameA", 公开, 文件_取文件名, 成功返回路径文本指针地址
    .参数 路径文本, 文本型

.DLL命令 DeleteFileA, 逻辑型, "Kernel32.dll", "DeleteFileA", 公开, 删除指定文件
    .参数 文件名, 文本型, , lpFileName,欲删除文件的名字

.DLL命令 DeleteFileW, 逻辑型, "Kernel32.dll", "DeleteFileW"
    .参数 lpFileName, 字节集

.DLL命令 SetEndOfFile, 整数型, "Kernel32.dll", "SetEndOfFile", 公开
    .参数 hfile, 整数型

.DLL命令 SetFilePointer, 整数型, "Kernel32.dll", "SetFilePointer", 公开
    .参数 hFile, 整数型
    .参数 lDistanceToMove, 整数型
    .参数 lpDistanceToMoveHigh, 整数型, 传址
    .参数 dwMoveMethod, 整数型

.DLL命令 CreateFileA, 整数型, "kernel32.dll", "CreateFileA", 公开, 文件取句柄 如执行成功，则返回文件句柄
    .参数 指向文件名的指针, 文本型, , 指向文件名的指针
    .参数 访问模式_写与读, 整数型, , 访问模式（写/读）
    .参数 共享模式, 整数型, , 共享模式，0=不共享，FILE_SHARE_READ 和/或 FILE_SHARE_WRITE 表示允许对文件进行共享访问
    .参数 指向安全属性的指针, 整数型, , 指向安全属性的指针
    .参数 如何创建, 整数型, , 如何创建 3=直接打开文件
    .参数 文件属性, 整数型, , 文件属性
    .参数 用于复制文件句柄, 整数型, , 用于复制文件句柄

.DLL命令 CreateFileW, 整数型, "kernel32.dll", "CreateFileW"
    .参数 lpFileName, 字节集
    .参数 dwDesiredAccess, 整数型
    .参数 dwShareMode, 整数型
    .参数 lpSecurityAttributes, 整数型
    .参数 dwCreationDisposition, 整数型
    .参数 dwFlagsAndAttributes, 整数型
    .参数 hTemplateFile, 整数型

.DLL命令 GetFileTime, 逻辑型, "kernel32.dll", "GetFileTime", , _文件取时间
    .参数 hFile, 整数型
    .参数 创建时间, FILETIME, , 创建时间
    .参数 访问时间, FILETIME, , 访问时间
    .参数 修改时间, FILETIME, , 修改时间

.DLL命令 LocalFileTimeToFileTime, 整数型, "kernel32.dll", "LocalFileTimeToFileTime", , _文件时间转移为UTC文件时间 将本地文件时间转移为UTC文件时间
    .参数 lpLocalFileTime, FILETIME
    .参数 lpFileTime, FILETIME

.DLL命令 MapViewOfFile, 整数型, "kernel32.dll", "MapViewOfFile", 公开, _查看文件映射对象 将一个文件映射对象映射到当前应用程序的地址空间
    .参数 hFileMappingObject, 整数型
    .参数 dwDesiredAccess, 整数型
    .参数 dwFileOffsetHigh, 整数型
    .参数 dwFileOffsetLow, 整数型
    .参数 dwNumberOfBytesToMap, 整数型

.DLL命令 InternetSetOptionA2, 逻辑型, "Wininet.dll", "InternetSetOptionA", , 设置IE属性
    .参数 hInternet, 整数型
    .参数 dwOption, 整数型
    .参数 lpBuffer, INTERNET_PROXY_INFO
    .参数 dwBufferLength, 整数型

.DLL命令 InternetSetOptionA, 逻辑型, "wininet.dll", "InternetSetOptionA", 公开, _设置IE
    .参数 hInternet, 整数型
    .参数 dwOption, 整数型
    .参数 lpBuffer, 整数型
    .参数 dwBufferLength, 整数型

.DLL命令 InternetSetOptionA_传址, 逻辑型, "wininet.dll", "InternetSetOptionA", 公开, _设置IE
    .参数 hInternet, 整数型
    .参数 dwOption, 整数型
    .参数 lpBuffer, 整数型, 传址
    .参数 dwBufferLength, 整数型

.DLL命令 DoFileDownload, 整数型, "shdocvw.dll", "DoFileDownload", 公开, _下载文件1
    .参数 网址, 字节集, 传址

.DLL命令 SetFileTime, 逻辑型, "kernel32.dll", "SetFileTime", , _文件置时间 设置文件的创建、访问及上次修改时间  非零表示成功，零表示失败。会设置GetLastError
    .参数 hFile, 整数型, , 系统文件句柄
    .参数 lpCreationTime, FILETIME, , FILETIME，文件的创建时间
    .参数 lpLastAccessTime, FILETIME, , FILETIME，文件上一次访问的时间
    .参数 lpLastWriteTime, FILETIME, , FILETIME，文件最近一次修改的时间;

.DLL命令 CopyFileA, 逻辑型, "kernel32.dll", "CopyFileA", 公开, 文件_复制
    .参数 源文件名, 文本型, , lpExistingFileName，被复制的文件名
    .参数 目标文件名, 文本型, , lpNewFileName，目标文件名
    .参数 是否覆盖, 整数型, , bFailIfExists，非0不覆盖，0覆盖

.DLL命令 CopyFileW, 逻辑型, "kernel32.dll", "CopyFileW"
    .参数 lpExistingFileName, 字节集
    .参数 lpNewFileName, 字节集
    .参数 bFailIfExists, 逻辑型

.DLL命令 ShellExecuteA, 整数型, "shell32.dll", "ShellExecuteA", 公开, 文件_执行
    .参数 hwnd, 整数型, , 指定一个窗口的句柄，有些时候，Windows程序有必要在创建自己的主窗口前显示一个消息框。
    .参数 lpOperation, 文本型, , 指定字串“Open”来打开lpFlie文档；或指定“Print”来打印它。也可设为vbNullString，表示默认为“Open”
    .参数 lpFile, 文本型, , 想用关联的程序打印或打开的一个程序名或文件名
    .参数 lpParameters, 文本型, , 如lpFile是一个可执行文件，则这个字串包含了传递给执行程序的参数。如lpFile引用的是一个文档文件，或者不需要使用参数，则设为vbNullString
    .参数 lpDirectory, 文本型, , 想使用的默认路径完整路径
    .参数 nShowCmd, 整数型, , 定义了如何显示启动程序的常数值。参考ShowWindow函数的nCmdShow参数

.DLL命令 MoveFileExA, 整数型, "kernel32.dll", "MoveFileExA", 公开
    .参数 文件名, 文本型
    .参数 新文件名, 文本型
    .参数 常数, 整数型

.DLL命令 MoveFileA, 逻辑型, "kernel32.dll", "MoveFileA", 公开, 文件_移动
    .参数 欲移动的文件名, 文本型, , 如:C:\001.txt
    .参数 目标文件名, 文本型, , 如:D:\001.txt , 表示把C:\001.txt移动到D:\001.txt

.DLL命令 MoveFileW, 逻辑型, "kernel32.dll", "MoveFileW"
    .参数 lpExistingFileName, 字节集
    .参数 lpNewFileName, 字节集

.DLL命令 PostMessageA, 逻辑型, "user32.dll", "PostMessageA", 公开, 投递消息
    .参数 hwnd, 整数型
    .参数 消息号, 整数型
    .参数 消息参数1, 整数型
    .参数 消息参数2, 整数型

.DLL命令 PostMessageW, 逻辑型, "user32.dll", "PostMessageW"
    .参数 hWnd, 整数型
    .参数 Msg, 整数型
    .参数 wParam, 整数型
    .参数 lParam, 整数型

.DLL命令 CreateSolidBrush, 整数型, "gdi32.dll", "CreateSolidBrush", 公开, 用纯色创建一个刷子　如执行成功，返回新刷子的一个句柄；否则返回零
    .参数 crColor, 整数型, , 数字的RGB彩色;  

.DLL命令 GdiFlush, 整数型, "gdi32.dll", "GdiFlush", 公开, 处理绘图操作_gdi32.dll 执行任何未决的绘图操作,如所有未决的绘图操作都成功完成，就返回TRUE（非零）。如任何一个操作失败，就返回零值

.DLL命令 FillRect_RECT, 整数型, "user32.dll", "FillRect", , 用指定的刷子填充一个矩形  非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 lpRect, RECT, , RECT，对填充区域进行描述的一个矩形，采用逻辑坐标
    .参数 hBrush, 整数型, , 欲使用的刷子的句柄;

.DLL命令 FillRect, 整数型, "user32.dll", "FillRect", 公开, 该函数用指定的画刷填充矩形，此函数包括矩形的左上边界，但不包括矩形的右下边界。如果函数调用成功，返回值非零；如果函数调用失败，返回值是0。 
    .参数 hdc, 整数型, , 设备环境句柄。
    .参数 lpRect, 精易_矩形, 传址, 指向含有将填充矩形的逻辑坐标的RECT结构的指针。 
    .参数 hBrush, 整数型, , 用来填充矩形的画刷的句柄。用CreateSolidBrush创建返回的句柄

.DLL命令 DeleteObject, 整数型, "gdi32.dll", "DeleteObject", 公开, 删除对象 用这个函数删除GDI对象，比如画笔、刷子、字体、位图、区域以及调色板等等。对象使用的所有系统资源都会被释放，不要删除一个已选入设备场景的画笔、刷子或位图。如删除以位图为基础的阴影（图案）刷子，位图不会由这个函数删除——只有刷子被删掉
    .参数 对象句柄, 整数型, , 一个GDI对象的句柄

.DLL命令 InternetOpenA, 整数型, "wininet.dll", "InternetOpenA", 公开, Internet激活
    .参数 句柄名称, 文本型, 传址
    .参数 连接类型, 整数型, , 1直接连接;3代理连接
    .参数 代理地址, 文本型, 传址
    .参数 代理掩码, 文本型, 传址
    .参数 dwFlags, 整数型, , 0

.DLL命令 InternetConnectA, 整数型, "wininet.dll", "InternetConnectA", 公开, Internet建立连接
    .参数 Internet句柄, 整数型
    .参数 域名, 文本型, 传址
    .参数 服务器端口, 整数型, , 80HTTP;21FTP;
    .参数 用户名, 文本型, 传址, 空
    .参数 用户口令, 文本型, 传址, 空
    .参数 服务类型, 整数型, , 1FTP;3HTTP
    .参数 dwFlags, 整数型, , 0http;134217728被动FTP模式
    .参数 dwContext, 整数型, , 0

.DLL命令 InternetSetOption, 逻辑型, "Wininet.dll", "InternetSetOptionA", 公开, 设置选项
    .参数 hInternet, 整数型, , 句柄
    .参数 dwOption, 整数型, , 选项值
    .参数 lpBuffer, 整数型, 传址, 缓冲区
    .参数 dwBufferLength, 整数型, , 缓冲区长度

.DLL命令 InternetCloseHandle, 逻辑型, "wininet.dll", "InternetCloseHandle", 公开, Internet关闭句柄
    .参数 句柄, 整数型

.DLL命令 HttpQueryInfoA, 逻辑型, "wininet.dll", "HttpQueryInfoA", 公开, HTTP查询信息
    .参数 Internet请求句柄, 整数型
    .参数 待查信息, 整数型, , 22返回所有信息;43SET_COOKIE;+2147483648返回文本
    .参数 返回容器, 文本型, 传址
    .参数 返回容器长度, 整数型, 传址
    .参数 lpdwIndex, 整数型

.DLL命令 InternetReadFile, 逻辑型, "wininet.dll", "InternetReadFile", 公开, Internet读文件
    .参数 HTTP请求句柄, 整数型
    .参数 sBuffer, 字节集, 传址
    .参数 lNumBytesToRead, 整数型
    .参数 lNumberOfBytesRead, 整数型, 传址

.DLL命令 InternetReadFile_Byte, 逻辑型, "wininet.dll", "InternetReadFile", , Internet读文件
    .参数 HTTP请求句柄, 整数型
    .参数 sBuffer, 字节型, 传址 数组
    .参数 lNumBytesToRead, 整数型
    .参数 lNumberOfBytesRead, 整数型, 传址

.DLL命令 HttpOpenRequestA, 整数型, "wininet.dll", "HttpOpenRequestA", 公开, Http创建请求
    .参数 Internet连接句柄, 整数型, , 由Internet建立连接返回
    .参数 访问方式, 文本型, 传址, "GET" or "POST"为空默认GET
    .参数 页面路径, 文本型, 传址, 简短路径,不带域名
    .参数 协议版本, 文本型, 传址, 为空默认HTTP/1.1
    .参数 引用页, 文本型, 传址, 可为空
    .参数 识别类型, 文本型, 传址, 可为空
    .参数 dwFlags, 整数型, , 2147483648更新下载
    .参数 dwContext, 整数型, , 0

.DLL命令 HttpSendRequestA, 逻辑型, "wininet.dll", "HttpSendRequestA", 公开, Http发送请求
    .参数 HTTP请求句柄, 整数型
    .参数 附加协议头, 文本型
    .参数 附加协议头长度, 整数型
    .参数 提交信息, 整数型
    .参数 提交信息长度, 整数型

.DLL命令 InflateRect, 整数型, "user32.dll", "InflateRect", 公开, 这个函数用于增大或减小一个矩形的大小。x加在右侧区域，并从左侧区域减去；如x为正，则能增大矩形的宽度；如x为负，则能减小它。y对顶部与底部区域产生的影响是是类似的　非零表示成功，零表示失败。会设置GetLastError
    .参数 lpRect, 精易_矩形, , RECT，欲修改的矩形
    .参数 x, 整数型, , 用这个数字修改宽度
    .参数 y, 整数型, , 用这个数字修改高度;  

.DLL命令 ChangeWindowMessageFilter, 逻辑型, "user32.dll", "ChangeWindowMessageFilter", 公开
    .参数 message, 整数型
    .参数 dwflag, 整数型

.DLL命令 SendMessageW, 整数型, "User32.dll", "SendMessageW", 公开
    .参数 hWnd, 整数型
    .参数 uMsg, 整数型
    .参数 wParam, 整数型
    .参数 lParam, 整数型

.DLL命令 LocalAlloc, 整数型, "kernel32.dll", "LocalAlloc", 公开, _从局部堆分配内存(申请内存)
    .参数 uFlags, 整数型
    .参数 uBytes, 整数型

.DLL命令 LocalFree, 整数型, "kernel32.dll", "LocalFree", 公开, _释放本地内存信息
    .参数 hMem, 整数型

.DLL命令 IsWindowEnabled, 整数型, "user32.dll", "IsWindowEnabled", 公开, 判断窗口是否处于活动状态（在vb里使用：针对vb窗体和控件，请用enabled属性）  非零表示成功，零表示失败
    .参数 hWnd, 整数型

.DLL命令 SHGetFileInfo, 整数型, "shell32.dll", "SHGetFileInfoA"
    .参数 pszPath, 文本型
    .参数 dwFileAttributes, 整数型
    .参数 psfi, SHFILEINFO
    .参数 cbFileInfo, 整数型
    .参数 uFlags, 整数型

.DLL命令 GetClassLongA, 整数型, "user32.dll", "GetClassLongA", 公开
    .参数 hwnd
    .参数 m

.DLL命令 取内存变量地址_TVITEMEX, 整数型, "kernel32.dll", "lstrcpyn"
    .参数 目标, TVITEMEX, 传址
    .参数 源, TVITEMEX, 传址
    .参数 长度, 整数型

.DLL命令 取内存变量地址_TVINSERTSTRUCT, 整数型, "kernel32.dll", "lstrcpyn"
    .参数 目标, TVINSERTSTRUCT, 传址
    .参数 源, TVINSERTSTRUCT, 传址
    .参数 长度, 整数型

.DLL命令 取内存变量地址_TVITEMEX2, 整数型, "kernel32.dll", "lstrcpyn"
    .参数 目标, TVITEMEX2, 传址
    .参数 源, TVITEMEX2, 传址
    .参数 长度, 整数型

.DLL命令 取数据地址3, 整数型, "kernel32.dll", "lstrcpyn"
    .参数 目标, 文本型, 传址
    .参数 源, 文本型, 传址
    .参数 长度, 整数型

.DLL命令 取内存变量地址_TVINSERTSTRUCT2, 整数型, "kernel32.dll", "lstrcpyn"
    .参数 目标, TVINSERTSTRUCT2, 传址
    .参数 源, TVINSERTSTRUCT2, 传址
    .参数 长度, 整数型

.DLL命令 SendMessageA, 整数型, "user32.dll", "SendMessageA", 公开
    .参数 hWnd, 整数型
    .参数 Msg, 整数型, , 消息的标识符
    .参数 wParam, 整数型, , 具体取决于消息
    .参数 lParam, 整数型, , 具体取决于消息

.DLL命令 GetSystemMenu, 整数型, "user32.dll", "GetSystemMenu", 公开, 取系统菜单句柄
    .参数 hwnd, 整数型
    .参数 bRevert, 整数型

.DLL命令 CreateFileMappingA, 整数型, "kernel32.dll", "CreateFileMappingA", 公开, 创建一个新的文件映射对象　新建文件映射对象的句柄；零意味着出错。会设置GetLastError。即使函数成功，但倘若返回的句柄属于一个现成的文件映射对象，那么GetLastError也会设置成ERROR_ALREADY_EXISTS。在这种情况下，文件映射的长度就是现有对象的长度，而不是这个函数指定的尺寸
    .参数 文件映射句柄, 整数型, , 指定欲在其中创建映射的一个文件句柄。&HFFFFFFFF&表示在内存中创建一个文件映射
    .参数 安全对象, 整数型, , SECURITY_ATTRIBUTES，指定一个安全对象，在创建文件映射时使用。如果为NULL（用ByVal As Long传递零），表示使用默认安全对象
    .参数 打开映射方式, 整数型, , 下述常数之一：;PAGE_READONLY：以只读方式打开映射;PAGE_READWRITE：以可读、可写方式打开映射;PAGE_WRITECOPY：为写操作留下备份可组合使用下述一个或多个常数;SEC_COMMIT：为文件映射一个小节中的所有页分配内存;SEC_IMAGE：文件是个可执行文件;SEC_RESERVE：为没有分配实际内存的一个小节保留虚拟内存空间
    .参数 文件映射最大长度, 整数型, , 文件映射的最大长度（高32位）
    .参数 文件映射的最小长度, 整数型, , 文件映射的最小长度（低32位）。如这个参数和dwMaximumSizeHigh都是零，就用磁盘文件的实际长度
    .参数 映射对象名, 文本型, , 指定文件映射对象的名字。如存在这个名字的一个映射，函数就会打开它。用vbNull创建一个无名的文件映射;

.DLL命令 SetDIBitsToDevice, 整数型, "gdi32.dll", "SetDIBitsToDevice", 公开, 置位图到设备场景_GDI32.DLL将一幅与设备无关位图的全部或部分数据直接复制到一个设备。这个函数在设备中定义了一个目标矩形，以便接收位图数据。它也在DIB中定义了一个源矩形，以便从中提取数据  执行成功则返回扫描线的数量，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , hdc，一个设备场景的句柄。该场景用于接收位图数据
    .参数 目标矩形横坐标, 整数型, , x，用逻辑坐标表示的目标矩形的起点
    .参数 目标矩形纵坐标, 整数型, , y，用逻辑坐标表示的目标矩形的起点
    .参数 目标矩形宽度, 整数型, , dx，用目标矩形的设备单位表示的宽度及高度
    .参数 目标矩形高度, 整数型, , dy，用目标矩形的设备单位表示的宽度及高度
    .参数 源矩形横坐标, 整数型, , SrcX，用设备坐标表示的源矩形在DIB中的起点
    .参数 源矩形纵坐标, 整数型, , SrcY，用设备坐标表示的源矩形在DIB中的起点
    .参数 扫描线初始编号, 整数型, , Scan，Bits数组中第一条扫描线的编号。如BitsInfo之BITMAPINFOHEADER部分的biHeight字段是正数，那么这条扫描线就会从位图的底部开始计算；如果是负数，就从顶部开始计算
    .参数 扫描线数量, 整数型, , NumScans，欲复制的扫描线数量
    .参数 缓冲区指针, 字节型, 传址, Bits，指向一个缓冲区的指针。这个缓冲区包含了以DIB格式描述的位图数据；这种格式是由BitsInfo指定的
    .参数 位图结构, 位图信息_, , BitsInfo，对Bits DIB的格式和颜色进行描述的一个结构
    .参数 常量标志, 整数型, , wUsage，常数

.DLL命令 SHGetPathFromIDListA, 整数型, "shell32.dll", "SHGetPathFromIDListA", 公开, _从列表id取路径
    .参数 pIdl, 整数型
    .参数 pszPath, 文本型, 传址

.DLL命令 SHGetPathFromIDListW, 逻辑型, "shell32.dll", "SHGetPathFromIDListW"
    .参数 pIdl, 整数型
    .参数 pszPath, 整数型

.DLL命令 SetBkMode, 整数型, "gdi32.dll", "SetBkMode", 公开, gdi32.dll指定阴影刷子、虚线画笔以及字符中的空隙的填充方式　前一个背景模式的值
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 nBkMode, 整数型, , 下述常数之一：;OPAQUE：用当前的背景色填充虚线画笔、阴影刷子以及字符的空隙;TRANSPARENT：透明处理，即不作上述填充;  

.DLL命令 TextOutA, 整数型, "gdi32.dll", "TextOutA", 公开, _文本绘图gdi32.dll文本绘图函数。也请参考SetTextAlign　非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , 设备场景的句柄
    .参数 横, 整数型, , 绘图的起点，采用逻辑坐标
    .参数 纵, 整数型, , 同上
    .参数 内容, 文本型, , 欲描绘的字串
    .参数 内容数量, 整数型, , 字串中要描绘的字符数量;  

.DLL命令 SetTextColor, 整数型, "gdi32.dll", "SetTextColor", 公开, gdi32.dll设置当前文本颜色。这种颜色也称为“前景色”　文本色的前一个RGB颜色设定。CLR_INVALID表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , 设备场景的句柄
    .参数 颜色, 整数型, , 新的文本色在VB里使用如改变了这个设置，注意恢复VB窗体或控件原始的文本颜色;

.DLL命令 SelectObject, 整数型, "gdi32.dll", "SelectObject", 公开, 选入设备场景
    .参数 hdc, 整数型
    .参数 hgdiobj, 整数型

.DLL命令 CreateCompatibleBitmap, 整数型, "gdi32.dll", "CreateCompatibleBitmap", 公开, 创建设备位图
    .参数 设备场景句柄, 整数型
    .参数 位图宽度, 整数型
    .参数 位图高度, 整数型

.DLL命令 CreateFontA, 整数型, "gdi32.dll", "CreateFontA", 公开, g创建字体_ di32.dll用指定属性创建逻辑字体_,执行成功则返回逻辑字体的句柄零表示失败——返回值：如果函数调用成功，返回值是一种逻辑字体句柄；如果函数调用失败，返回值为NULL。备注：当一种字体不再使用时，可用DeleteObject来删除。为保护那些提供字体给Windows和Windows NT的卖主的版权，基于Win32的应用程序总是列出所选择字体的准确名字。由于不同的系统会使用不同的字体，不要认为所选择字体就是要求的字体。例如，如果要求名叫Palatino的字体，但系统没提供那样一种字体，则字体映射器将会以一种不同名但有相似属性的字体取而代之。系统总是将用户选择的字体名报告出来。
    .参数 字体高度, 整数型, , Height字体高度指定字体的字符单元或字符的逻辑单位高度，字符的高度值（也被称为em高度）是指字符单元高度值减去内部标头值。字体映射器以如下方式解释nHeight指定的值，各值含义为：
    .参数 字体宽度, 整数型, , Width指定所要求字体的字符的逻辑单位的平均宽度。如果此值为0，字体映射器选择一个closest match值，closest match值是由比较当前设备的特征系数与可使用字体的数字化特征系数之差的绝对值而确定的
    .参数 旋转, 整数型, , Escapement指定移位向量和设备X轴之间的一个角度，以十分之一度为单位。移位向量平行于正文行的基线。Windows NT：当图形设备设置为GM_ADVANCED时，可以不依赖字符串的字符的定位角而指定字符串的移位角.当图形模式被设置为GM_COMPATIBLE时，nEscapement同时指定移位角和定位角，可以设置nEscapement和nOrientation为相同的值。Windows 95：nEscapement同时指定移位角和定位角，可设置nEscapement和nOrientation为相同的值。
    .参数 Orientation, 整数型, , 指定每个字符的基线和设备X轴之间的角度
    .参数 加粗, 整数型, , Weight在0到1000之间指定字体的权值，如400表示标准体，700表示黑（粗）体，如果此值为0，则使用缺省的权值。    为方便定义，可使用如下值：
    .参数 倾斜, 逻辑型, , Italic如果设置为TRUE则指定斜体
    .参数 下划线, 逻辑型, , Underline如果设置为TRUE，则指定加下划线的字全
    .参数 删除线, 逻辑型, , StrikeOut如果设置为TRUE，则strikeout指定字体。
    .参数 内码, 整数型, , CharSetfdwCharSet：指定字符集，下列值是预定义的：
    .参数 OutputPrecision, 整数型, , fdwOutputPrecision：指定输出精度，输出精度义输出与要求的字体高度、宽度、字符定位、移位、字符间距和字符类型的匹配程序，它可取下列值之一：
    .参数 CP, 整数型, , ClipPrecision指定裁剪精度，裁剪精度定义如何裁剪部分超出裁剪区的字符，它可取一个或多个下列值：
    .参数 输出质量, 整数型, , fdwQuality指向输出质量，输出质量定义GDI如何仔细地将逻辑字体属性与实际物理字体属性相匹配。它可取下列值之一：
    .参数 PAF, 整数型, , PitchAndFamily指定字体间距和字体族，低端二位指定字体的字符间距，它可取下列值之一：
    .参数 新字体名, 文本型, , FaceName指向指定字体的字样名的、以\0结束的字符串指针，字符串的长度不能超过32个字符（包括字符\0），函数EnumFontFamilies可用来列举所有当前可用字体的字样名。如果lpszFace为NULL或指向一个空串，GDI使用能匹配其他属性的第一种字体。

.DLL命令 IsDebuggerPresent, 逻辑型, "kernel32.dll", "IsDebuggerPresent", 公开, 程序是否被调试

.DLL命令 CreateCompatibleDC, 整数型, "gdi32.dll", "CreateCompatibleDC", 公开, 创建内存场景
    .参数 hdc, 整数型

.DLL命令 CreateEvent, 整数型, "Kernel32.dll", "CreateEventA", 公开, 创建事件同步对象
    .参数 lpEventAttributes, 整数型
    .参数 bManualReset, 逻辑型
    .参数 bInitialState, 逻辑型
    .参数 lpName, 文本型

.DLL命令 CreateEventW, 整数型, "Kernel32.dll", "CreateEventW"
    .参数 lpEventAttributes, 整数型
    .参数 bManualReset, 逻辑型
    .参数 bInitialState, 逻辑型
    .参数 lpName, 字节集

.DLL命令 LookupPrivilegeValueA, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , _恢复权限
    .参数 lpSystemName, 整数型
    .参数 lpName, 文本型
    .参数 lpLuid, LUID

.DLL命令 OpenEventA, 整数型, "kernel32.dll", "OpenEventA", 公开, 打开事件同步对象
    .参数 dwDesiredAccess, 整数型
    .参数 bInheritHandle, 逻辑型
    .参数 lpName, 文本型

.DLL命令 OpenEventW, 整数型, "Kernel32.dll", "OpenEventW"
    .参数 dwDesiredAccess, 整数型
    .参数 bInheritHandle, 逻辑型
    .参数 lpName, 字节集

.DLL命令 lstrcpynA_字节集, 整数型, "kernel32.dll", "lstrcpynA", 公开
    .参数 lpString1, 字节集, 传址
    .参数 lpString2, 字节集, 传址
    .参数 iMaxLength, 整数型

.DLL命令 lstrcpynA_整数数组, 整数型, "kernel32.dll", "lstrcpynA", 公开, ,
    .参数 数据1, 整数型, 数组, lpString1
    .参数 数据2, 整数型, 数组, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 lstrcpynA_整数传址, 整数型, "kernel32.dll", "lstrcpynA"
    .参数 lpString1, 整数型, 传址
    .参数 lpString2, 整数型, 传址
    .参数 iMaxLength, 整数型

.DLL命令 lstrcpynA_字节型, 文本型, "kernel32.dll", "lstrcpynA", 公开
    .参数 lpString1, 字节型, 数组
    .参数 lpString2, 字节型
    .参数 iMaxLength, 整数型

.DLL命令 lstrcpynA_指针, 子程序指针, "kernel32.dll", "lstrcpynA", 公开
    .参数 参数1, 整数型
    .参数 参数2, 整数型
    .参数 保留, 整数型

.DLL命令 lstrcpynA_文本, 整数型, "kernel32.dll", "lstrcpynA", 公开, _复制字符串
    .参数 lpString1, 文本型, 传址
    .参数 lpString2, 文本型, 传址
    .参数 iMaxLength, 整数型

.DLL命令 SwapMouseButton, 逻辑型, "user32.dll", "SwapMouseButton", 公开, 鼠标左右键交换
    .参数 鼠标按钮方式, 逻辑型, , bSwap，Long，倘若为TRUE（非零），则互换两个鼠标按钮的功能。FALSE则恢复正常状态

.DLL命令 ZwResumeProcess, , "NTDLL.DLL", "ZwResumeProcess", 公开, 进程恢复
    .参数 进程句柄

.DLL命令 ZwSuspendProcess, , "NTDLL.DLL", "ZwSuspendProcess", 公开, 进程暂停
    .参数 进程句柄

.DLL命令 ResumeThread, 整数型, "kernel32.dll", "ResumeThread", 公开, 线程_恢复   恢复执行用SuspendThread挂起的一个线程,Long，调用这个函数前的挂起计数。&HFFFFFFFF表示出错。会设置GetLastError
    .参数 hThread, 整数型

.DLL命令 SuspendThread, 整数型, "kernel32.dll", "SuspendThread", 公开, 线程_挂起  将指定线程的执行挂起，调用这个函数前的挂起计数。&HFFFFFFFF表示出错。会设置GetLastError
    .参数 hThread, 整数型

.DLL命令 WaitForSingleObject, 整数型, "kernel32.dll", "WaitForSingleObject", 公开, 线程等待
    .参数 hHandle, 整数型, , 线程句柄
    .参数 dwMilliseconds, 整数型, , 值为:4294967295

.DLL命令 InitializeCriticalSection, , "kernel32.dll", "InitializeCriticalSection", 公开, 创建许可证
    .参数 lpCriticalSection, 线程许可证, 传址

.DLL命令 DeleteCriticalSection, , "kernel32.dll", "DeleteCriticalSection", 公开, _删除许可证
    .参数 lpCriticalSection, 线程许可证, 传址

.DLL命令 EnterCriticalSection, , "kernel32.dll", "EnterCriticalSection", 公开, _进入许可区
    .参数 lpCriticalSection, 线程许可证, 传址

.DLL命令 LeaveCriticalSection, , "kernel32.dll", "LeaveCriticalSection", 公开, 退出许可区
    .参数 lpCriticalSection, 线程许可证, 传址

.DLL命令 DuplicateHandle, 整数型, "kernel32.dll", "DuplicateHandle", 公开, 复制对象句柄
    .参数 源进程句柄, 整数型, , hSourceProcessHandle,参见相关帮助
    .参数 现句柄, 整数型, , hSourceHandle,指定对象的现有句柄
    .参数 新进程句柄, 整数型, , hTargetProcessHandle,参见相关帮助
    .参数 转载句柄变量, 整数型, 传址, lpTargetHandle,指定用于装载新句柄的长整型变量
    .参数 新句柄安全访问级别, 整数型, , dwDesiredAccess,新句柄要求的安全访问级别
    .参数 继承句柄, 整数型, , bInheritHandle Long，参见相关帮助
    .参数 复选项, 整数型, , dwOptions

.DLL命令 CloseHandle, 逻辑型, "kernel32.dll", "CloseHandle", 公开, 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 lstrlen, 整数型, "kernel32.dll", "lstrlenW", 公开, 取字节长度　
    .参数 lpString, 整数型

.DLL命令 _设备操作3, 整数型, "kernel32.dll", "DeviceIoControl"
    .参数 hDevice, 整数型
    .参数 dwIoControlCode, 整数型
    .参数 lpInBuffer, SCIP, 传址
    .参数 nInBufferSize, 整数型
    .参数 lpOutBuffer, 字节集, 传址
    .参数 nOutBufferSize, 整数型
    .参数 lpBytesReturned, 整数型, 传址
    .参数 lpOverlapped, 整数型

.DLL命令 DeviceIoControl1, 逻辑型, "kernel32.dll", "DeviceIoControl", 公开, 设备操作4
    .参数 hDevice, 整数型
    .参数 dwIoControlCode, 整数型
    .参数 lpInBuffer, 整数型
    .参数 nInBufferSize, 整数型
    .参数 lpOutBuffer, 整数型
    .参数 nOutBufferSize, 整数型
    .参数 lpBytesReturned, 整数型, 传址
    .参数 lpOverlapped, 整数型

.DLL命令 Process32Next, 整数型, "kernel32.dll", "Process32Next", 公开, 取下一个进程
    .参数 h, 整数型
    .参数 p, 精易_进程信息列表

.DLL命令 GetModuleFileNameExA, 整数型, "Psapi.dll", "GetModuleFileNameExA", 公开, _进程取全路径名
    .参数 hProcess, 整数型
    .参数 hModule, 整数型, , 0
    .参数 lpFilename, 文本型, , 1000
    .参数 nSize, 整数型, , 1000

.DLL命令 GetModuleFileNameExW, 整数型, "Psapi.dll", "GetModuleFileNameExW"
    .参数 hProcess, 整数型
    .参数 hModule, 整数型
    .参数 lpFilename, 整数型
    .参数 nSize, 整数型

.DLL命令 Process32First, 整数型, "kernel32.dll", "Process32First", 公开, 取第一个进程
    .参数 hSnapshot, 整数型
    .参数 lppe, 精易_进程信息列表

.DLL命令 OpenProcess, 整数型, "kernel32.dll", "OpenProcess", 公开, 打开进程
    .参数 进程对象, 整数型
    .参数 继承句柄, 整数型
    .参数 进程标识符, 整数型

.DLL命令 AdjustTokenPrivileges, 逻辑型, "Advapi32.dll", "AdjustTokenPrivileges", , 使能/取消令牌特权 _进程置权限
    .参数 令牌句柄, 整数型
    .参数 DisableAllPrivileges, 逻辑型
    .参数 NewState, TOKEN_PRIVILEGES
    .参数 BufferLength, 整数型
    .参数 PreviousState, 整数型
    .参数 ReturnLength, 整数型

.DLL命令 TerminateProcess, 逻辑型, "kernel32.dll", "TerminateProcess", 公开, _进程终止
    .参数 hProcess, 整数型, , PID
    .参数 uExitCode, 整数型

.DLL命令 GetCurrentProcessId, 整数型, "kernel32.dll", "GetCurrentProcessId", 公开, 取自进程ID

.DLL命令 CreateToolhelp32Snapshot, 整数型, "kernel32.dll", "CreateToolhelp32Snapshot", 公开, 创建进程快照
    .参数 falg, 整数型
    .参数 id, 整数型

.DLL命令 GetWindowThreadProcessId, 整数型, "user32.dll", "GetWindowThreadProcessId", 公开, 线程_取ID
    .参数 hWnd, 整数型, , 指定窗口句柄
    .参数 lpdwProcessId, 整数型, 传址, 用于装载进程ID的变量

.DLL命令 LBItemFromPt, 整数型, "comctl32.dll", "LBItemFromPt", 公开, 列表框_鼠标坐标取项目索引
    .参数 hwnd, 整数型, , hwnd
    .参数 横向位置, 整数型, , ptx
    .参数 纵向位置, 整数型, , pty
    .参数 自动滚动, 逻辑型, , bAutoScroll

.DLL命令 ShowWindow, 逻辑型, "user32.dll", "ShowWindow", 公开, 窗口_置状态
    .参数 hwnd, 整数型, , 窗口句柄，要向这个窗口应用由命令
    .参数 nCmdShow, 整数型, , 为窗口指定的一个命令。请用下述任何一个常数:0 隐藏取消激活  1 还原激活 2 最小化激活 3 最大化激活 4 还原 6 最小化取消激活 7 最小化 9 还原激活

.DLL命令 SetWindowPos, 整数型, "user32.dll", "SetWindowPos", 公开, _窗口置最前
    .参数 hwnd, 整数型, , 欲定位的窗口
    .参数 hWndInsertAfter, 整数型
    .参数 x, 整数型, , 窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示
    .参数 y, 整数型, , 窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示
    .参数 cx, 整数型, , 指定新的窗口宽度
    .参数 cy, 整数型, , 指定新的窗口高度
    .参数 wFlags, 整数型

.DLL命令 CloseWindow, 整数型, "user32.dll", "CloseWindow", 公开, 窗口_最小化, 非0表示成功，0表示失败
    .参数 hwnd, 整数型, , hwnd，欲最小化窗口的窗口句柄

.DLL命令 ShowWindowAsync, 逻辑型, "user32.dll", "ShowWindowAsync", 公开, 窗口_显示隐藏
    .参数 hWnd, 整数型, , 欲接收ShowWindow命令的窗口
    .参数 nCmdShow, 逻辑型, , 与ShowWindow相同

.DLL命令 BringWindowToTop, 逻辑型, "user32.dll", "BringWindowToTop", 公开, 窗口置顶
    .参数 hwnd, 整数型, , hwnd,欲带至顶部的那个窗口的句柄

.DLL命令 EnableWindow, 逻辑型, "user32.dll", "EnableWindow", , 窗口_锁住解锁, 在指定的窗口里允许或禁止所有鼠标及键盘输入
    .参数 hwnd, 整数型, , hwnd，窗口句柄
    .参数 标识符, 逻辑型, , fEnable，非零允许，零禁止

.DLL命令 GetForegroundWindow, 整数型, "user32.dll", "GetForegroundWindow", 公开, ,窗口_取顶端窗口句柄

.DLL命令 ExtractIconExA, 整数型, "shell32.dll", "ExtractIconExA", 公开, 提取图标扩展
    .参数 文件名, 文本型, , lpszFile
    .参数 图标索引, 整数型, , nIconIndex
    .参数 大图标句柄, 整数型, 传址, phiconLarge
    .参数 小图标句柄, 整数型, , phiconSmall
    .参数 图标数量, 整数型, , nIcons

.DLL命令 MoveWindow, 逻辑型, "user32.dll", "MoveWindow", 公开, 窗口_置位置和大小
    .参数 hwnd, 整数型
    .参数 左侧位置, 整数型
    .参数 顶部位置, 整数型
    .参数 新宽度, 整数型
    .参数 新高度, 整数型
    .参数 是否重画, 逻辑型

.DLL命令 GetWindowRect, 逻辑型, "user32.dll", "GetWindowRect", 公开,    获得整个窗口的范围矩形，窗口的边框、标题栏、滚动条及菜单等都在这个矩形内
    .参数 句柄, 整数型, , Long，想获得范围矩形的那个窗口的句柄
    .参数 大小, 精易_矩形, 传址, RECT，屏幕坐标中随同窗口装载的矩形(左边,顶边,右边,底边)

.DLL命令 IsZoomed, 逻辑型, "user32.dll", "IsZoomed", 公开, 窗口_是否最大化 判断窗口是否已最大化 非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 要测试的那个窗口的句柄

.DLL命令 IsIconic, 逻辑型, "user32.dll", "IsIconic", 公开, 窗口_是否最小化 判断窗口是否已最小化 非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 要测试的那个窗口的句柄

.DLL命令 IsWindowVisible, 逻辑型, "user32.dll", "IsWindowVisible", 公开, 窗口_是否可见  判断窗口是否可见  返回真为可见，否则为不可见
    .参数 hwnd, 整数型, , 要测试的那个窗口的句柄

.DLL命令 StrTrimA, 整数型, "shlwapi.dll", "StrTrimA", 公开, _文本修剪
    .参数 psz, 文本型
    .参数 pszTrimChars, 文本型

.DLL命令 FlashWindow, 逻辑型, "user32.dll", "FlashWindow", 公开, 窗口_闪动
    .参数 hwnd, 整数型
    .参数 bInvert, 逻辑型, , 是否闪动窗口

.DLL命令 lstrlenA, 整数型, "kernel32.dll", "lstrlenA", 公开
    .参数 lpString, 整数型

.DLL命令 PathRemoveBlanksA, 整数型, "shlwapi.dll", "PathRemoveBlanksA", , 文本_删首尾空, 删除文本首部尾部的空格
    .参数 文本, 整数型, , pszPath

.DLL命令 WideCharToMultiByte, 整数型, "kernel32.dll", "WideCharToMultiByte", 公开
    .参数 CodePage, 整数型
    .参数 dwFlags, 整数型
    .参数 lpWideCharStr, 整数型
    .参数 cchWideChar, 整数型
    .参数 lpMultiByteStr, 整数型
    .参数 cbMultiByte, 整数型
    .参数 lpDefaultChar, 整数型
    .参数 lpUsedDefaultChar, 整数型

.DLL命令 调试器_绑定调试进程, 逻辑型, "kernel32.dll", "DebugActiveProcess"
    .参数 进程ID, 整数型

.DLL命令 _文本简繁体转换, 整数型, "kernel32.dll", "LCMapStringA"
    .参数 Locale, 整数型
    .参数 dwMapFlags, 整数型
    .参数 lpSrcStr, 文本型
    .参数 cchSrc, 整数型
    .参数 lpDestStr, 文本型
    .参数 ByVal, 整数型

.DLL命令 GetDC, 整数型, "user32.dll", "GetDC", 公开, 取设备场景
    .参数 hwnd, 整数型

.DLL命令 ReleaseDC, 整数型, "user32.dll", "ReleaseDC", 公开, 释放设备场景
    .参数 hwnd, 整数型
    .参数 设备句柄, 整数型

.DLL命令 GetPixel, 整数型, "gdi32.dll", "GetPixel", 公开, 鼠标取坐标颜色
    .参数 设备句柄, 整数型
    .参数 横坐标, 整数型
    .参数 纵坐标, 整数型

.DLL命令 mysql_close, , "libmySQL.dll", "mysql_close", , 关闭连接句柄
    .参数 lMysql, 整数型, , 连接句柄

.DLL命令 mysql_set_character_set, 整数型, "libmySQL.dll", "mysql_set_character_set", , 设置访问字符集
    .参数 lMysql, 整数型
    .参数 cs_name, 文本型

.DLL命令 mysql_real_connect, 整数型, "libmySQL.dll", "mysql_real_connect", , 连接数据库
    .参数 lMysql, 整数型
    .参数 sHostName, 文本型
    .参数 sUserName, 文本型
    .参数 sPassword, 文本型
    .参数 sDbName, 文本型
    .参数 lPortNum, 整数型
    .参数 sSocketName, 整数型
    .参数 lFlags, 整数型

.DLL命令 mysql_query, 整数型, "libmySQL.dll", "mysql_query", , 查询
    .参数 lMysql, 整数型
    .参数 sQueryString, 文本型

.DLL命令 mysql_real_query, 整数型, "libmySQL.dll", "mysql_real_query", , 查询
    .参数 lMysql, 整数型
    .参数 sQueryString, 文本型
    .参数 leng, 整数型

.DLL命令 mysql_store_result, 整数型, "libmySQL.dll", "mysql_store_result", , 取记录集
    .参数 lMysql, 整数型

.DLL命令 mysql_free_result, 整数型, "libmySQL.dll", "mysql_free_result", , 释放记录集
    .参数 result, 整数型

.DLL命令 mysql_data_seek, , "libmySQL.dll", "mysql_data_seek"
    .参数 result, 整数型
    .参数 data_number, 长整数型

.DLL命令 mysql_row_seek, 整数型, "libmySQL.dll", "mysql_row_seek"
    .参数 result, 整数型
    .参数 row_number, 整数型

.DLL命令 mysql_row_tell, 整数型, "libmySQL.dll", "mysql_row_tell"
    .参数 result, 整数型

.DLL命令 mysql_num_fields, 整数型, "libmySQL.dll", "mysql_num_fields"
    .参数 result, 整数型

.DLL命令 mysql_num_rows, 长整数型, "libmySQL.dll", "mysql_num_rows"
    .参数 result, 整数型

.DLL命令 mysql_fetch_row, 整数型, "libmySQL.dll", "mysql_fetch_row"
    .参数 result, 整数型

.DLL命令 mysql_use_result, 整数型, "libmySQL.dll", "mysql_use_result"
    .参数 result, 整数型

.DLL命令 mysql_fetch_field, 整数型, "libmySQL.dll", "mysql_fetch_field"
    .参数 result, 整数型

.DLL命令 mysql_fetch_field_direct, 整数型, "libmySQL.dll", "mysql_fetch_field_direct"
    .参数 result, 整数型
    .参数 fieldnr, 整数型

.DLL命令 mysql_fetch_fields, 整数型, "libmySQL.dll", "mysql_fetch_fields"
    .参数 result, 整数型

.DLL命令 RtlMoveMemory_字段, , "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, MYSQL_FIELD
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_字段组, , "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, MYSQL_FIELD, 数组
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_byte, , "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 字节集
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_int, , "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 整数型, 传址
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 mysql_ping, 整数型, "libmySQL.dll", "mysql_ping"
    .参数 lMysql, 整数型

.DLL命令 RtlMoveMemory_intary, , "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 整数型, 数组
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 mysql_field_seek, 整数型, "libmySQL.dll", "mysql_field_seek"
    .参数 result, 整数型
    .参数 row_number, 整数型

.DLL命令 mysql_field_tell, 整数型, "libmySQL.dll", "mysql_field_tell"
    .参数 result, 整数型

.DLL命令 mysql_next_result, , "libmySQL.dll", "mysql_next_result"
    .参数 result, 整数型

.DLL命令 mysql_get_server_info, 整数型, "libmySQL.dll", "mysql_get_server_info"
    .参数 lMysql, 整数型

.DLL命令 mysql_get_client_info, 整数型, "libmySQL.dll", "mysql_get_client_info"

.DLL命令 mysql_error, 整数型, "libmySQL.dll", "mysql_error"
    .参数 lMysql, 整数型

.DLL命令 mysql_init, 整数型, "libmySQL.dll", "mysql_init", , 初始化，返回连接句柄
    .参数 lMysql, 整数型, , 0则返回一个新对象

.DLL命令 mysql_errno, 整数型, "libmySQL.dll", "mysql_errno"
    .参数 lMysql, 整数型

.DLL命令 mysql_affected_rows, 长整数型, "libmySQL.dll", "mysql_affected_rows"
    .参数 lMysql, 整数型

.DLL命令 mysql_shutdown, 整数型, "libmySQL.dll", "mysql_shutdown"
    .参数 lMysql, 整数型

.DLL命令 mysql_real_escape_string, , "libmySQL.dll", "mysql_real_escape_string"
    .参数 lMysql, 整数型
    .参数 to, 整数型
    .参数 from, 整数型
    .参数 length, 整数型

.DLL命令 mysql_options, 整数型, "libmySQL.dll", "mysql_options"
    .参数 lMysql, 整数型
    .参数 option, 整数型
    .参数 arg, 文本型

.DLL命令 mysql_fetch_lengths, 整数型, "libmySQL.dll", "mysql_fetch_lengths"
    .参数 result, 整数型

.DLL命令 _位图复制2, 整数型, "gdi32.dll", "GetDIBits", , _位图复制2 将来自一幅位图的二进制位复制到一幅与设备无关的位图里　非零表示成功，零表示失败。在Windows 95中，返回值是返回的扫描线数量
    .参数 aHDC, 整数型, , 定义了与设备有关位图hBitmap的配置信息的一个设备场景的句柄
    .参数 hBitmap, 整数型, , 源位图的句柄。绝对不能将这幅位图选入设备场景
    .参数 nStartScan, 整数型, , 欲复制到DIB中的第一条扫描线的编号
    .参数 nNumScans, 整数型, , 欲复制的扫描线数量
    .参数 lpBits, 整数型, , 指向一个缓冲区的指针。这个缓冲区将用于装载采用DIB格式的信息，但不取回数据（用ByVal传递零值）
    .参数 lpBI, _验证码取图, , BITMAPINFO，对lpBits DIB的格式及颜色进行说明的一个结构。在BITMAPINFOHEADER结构中，从biSize到biCompression之间的所有字段都必须初始化
    .参数 wUsage, 整数型, , 下述常数之一：;DIB_PAL_COLORS：在颜色表中装载一个16位所以数组，它们与当前选定的调色板有关;DIB_RGB_COLORS：在颜色表中装载RGB颜色;  

.DLL命令 GetDIBits2, 整数型, "gdi32.dll", "GetDIBits", 公开
    .参数 aHDC, 整数型
    .参数 hBitmap, 整数型
    .参数 nStartScan, 整数型
    .参数 nNumScans, 整数型
    .参数 lpBits, 字节型, 传址
    .参数 lpBI, 字节型, 传址
    .参数 wUsage, 整数型

.DLL命令 GetDIBits_x, 整数型, "gdi32.dll", "GetDIBits", , 将来自一幅位图的二进制位复制到一幅与设备无关的位图里　非零表示成功，零表示失败。在Windows 95中，返回值是返回的扫描线数量
    .参数 aHDC, 整数型, , 定义了与设备有关位图hBitmap的配置信息的一个设备场景的句柄
    .参数 hBitmap, 整数型, , 源位图的句柄。绝对不能将这幅位图选入设备场景
    .参数 nStartScan, 整数型, , 欲复制到DIB中的第一条扫描线的编号
    .参数 nNumScans, 整数型, , 欲复制的扫描线数量
    .参数 lpBits, 整数型, , 指向一个缓冲区的指针。这个缓冲区将用于装载采用DIB格式的信息，但不取回数据（用ByVal传递零值）
    .参数 lpBI, BITMAPINFOHEADER, , BITMAPINFO，对lpBits DIB的格式及颜色进行说明的一个结构。在BITMAPINFOHEADER结构中，从biSize到biCompression之间的所有字段都必须初始化
    .参数 wUsage, 整数型, , 下述常数之一：;DIB_PAL_COLORS：在颜色表中装载一个16位所以数组，它们与当前选定的调色板有关;DIB_RGB_COLORS：在颜色表中装载RGB颜色;  

.DLL命令 GetDIBits1, 整数型, "gdi32.dll", "GetDIBits", 公开, _位图复制1
    .参数 HDC, 整数型
    .参数 hBitmap, 整数型
    .参数 nStartScan, 整数型
    .参数 nNumScans, 整数型
    .参数 lpBits, 整数型
    .参数 lpBI, BITMAPINFO
    .参数 wUsage, 整数型

.DLL命令 GetDIBits, 整数型, "gdi32.dll", "GetDIBits", 公开, _位图复制 将来自一幅位图的二进制位复制到一幅与设备无关的位图里
    .参数 HDC, 整数型
    .参数 hBitmap, 整数型
    .参数 nStartScan, 整数型
    .参数 nNumScans, 整数型
    .参数 lpBits, 字节集
    .参数 lpBI, BITMAPINFO
    .参数 wUsage, 整数型

.DLL命令 BitBlt, 逻辑型, "gdi32.dll", "BitBlt", 公开, 复制场景位图
    .参数 目标设备场景, 整数型
    .参数 目标横坐标, 整数型
    .参数 目标纵坐标, 整数型
    .参数 传输图像宽度, 整数型
    .参数 传输图像高度, 整数型
    .参数 源设备场景, 整数型
    .参数 源横坐标, 整数型
    .参数 源纵坐标, 整数型
    .参数 光栅运算方式, 整数型

.DLL命令 VirtualAlloc, 整数型, "Kernel32.dll", "VirtualAlloc", 公开
    .参数 lpAddress, 整数型
    .参数 dwSize, 整数型
    .参数 flAllocationType, 整数型
    .参数 flProtect, 整数型

.DLL命令 MultiByteToWideChar, 整数型, "Kernel32.dll", "MultiByteToWideChar", 公开, 该函数映射一个字符串到一个宽字符（unicode）的字符
    .参数 CodePage, 整数型
    .参数 dwFlags, 整数型
    .参数 lpMultiByteStr, 整数型
    .参数 cchMultiByte, 整数型
    .参数 lpWideCharStr, 整数型
    .参数 cchWideChar, 整数型

.DLL命令 API_文本小写, 文本型, "ntdll.dll", "@_strlwr", , API转换文本为小写
    .参数 原始文本, 文本型, 传址

.DLL命令 API_查找文本, 整数型, "ntdll.dll", "@strstr"
    .参数 原始文本, 整数型
    .参数 查找内容, 文本型, 传址

.DLL命令 CharUpperA, 文本型, "user32.dll", "CharUpperA", 公开, 把字符串中的字母都转换成大写的
    .参数 str, 文本型

.DLL命令 CharLowerA, 文本型, "user32.dll", "CharLowerA", 公开, 把字符串中的字母都转换成小写的
    .参数 str, 文本型

.DLL命令 GetClientRect, 逻辑型, "user32.dll", "GetClientRect", 公开, ,窗口_取控件大小
    .参数 hwnd, 整数型
    .参数 矩形区域, 精易_矩形, 传址

.DLL命令 IsChild, 逻辑型, "user32.dll", "IsChild", 公开, 窗口_是否子窗口 user32.dll判断一个窗口是否为另一窗口的子或隶属窗口
    .参数 父窗口的句柄, 整数型, , 父窗口的句柄
    .参数 欲判断的窗口句柄, 整数型, , 欲判断的窗口句柄

.DLL命令 SetParent, 整数型, "user32.dll", "SetParent", 公开, 窗口_置父   指定一个窗口的新父(返回  前一个父窗口的句柄)
    .参数 子窗口句柄, 整数型
    .参数 父窗口句柄, 整数型

.DLL命令 IsWindow, 整数型, "user32.dll", "IsWindow", 公开, 窗口_句柄是否有效  判断一个窗口句柄是否有效(非零表示成功，零表示失败)
    .参数 hwnd, 整数型

.DLL命令 EnumChildWindows_整数, 逻辑型, "user32.dll", "EnumChildWindows", 公开
    .参数 hWndParent, 整数型, , 0
    .参数 lpEnumFunc, 整数型, , 0
    .参数 lParam, 整数型, , 0

.DLL命令 EnumChildWindows, 逻辑型, "user32.dll", "EnumChildWindows", 公开
    .参数 父窗口句柄, 整数型
    .参数 函数指针, 子程序指针
    .参数 自定义值, 整数型

.DLL命令 EnumWindows, 逻辑型, "user32.dll", "EnumWindows", 公开, 窗口_枚举
    .参数 枚举过程, 子程序指针
    .参数 参数, 整数型

.DLL命令 SetActiveWindow, 整数型, "user32.dll", "SetActiveWindow", 公开, 激活窗口
    .参数 hwnd, 整数型

.DLL命令 RedrawWindow, 逻辑型, "user32.dll", "RedrawWindow", 公开, 窗口_重画
    .参数 hwnd, 整数型
    .参数 矩形, 精易_矩形
    .参数 区域, 整数型
    .参数 旗帜, 整数型

.DLL命令 EnableMenuItem, 整数型, "user32.dll", "EnableMenuItem", 公开, 窗口禁止关闭
    .参数 hMenu, 整数型
    .参数 wIDEnableItem, 整数型
    .参数 wEnable, 整数型

.DLL命令 OpenIcon, 逻辑型, "user32.dll", "OpenIcon", 公开, 窗口_还原   恢复一个最小化的程序，并将其激活
    .参数 hwnd, 整数型

.DLL命令 GetFocus, 整数型, "user32.dll", "GetFocus", 公开, 窗口_取焦点句柄, GetFocus，获得自身拥有输入焦点的窗口的句柄

.DLL命令 GetDesktopWindow, 整数型, "user32.dll", "GetDesktopWindow", 公开, 窗口_取屏幕句柄

.DLL命令 ChildWindowFromPoint, 整数型, "user32.dll", "ChildWindowFromPoint", 公开, 窗口_取坐标子句柄 user32.dll取父窗口中包含了指定坐标的第一个子窗口句柄(与其它取窗口句柄不同的是:可取出不可视或透明的窗口)
    .参数 父窗口句柄, 整数型, , 欲取坐标句柄所在的父窗口句柄
    .参数 横坐标, 整数型, , 指定横坐标
    .参数 纵坐标, 整数型, , 指定纵坐标

.DLL命令 GetClassNameA, 整数型, "user32.dll", "GetClassNameA", 公开, 窗口_取类名 为指定的窗口取得类名　以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 文本, 文本型, 传址, 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 文本长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 SetWindowRgn, 整数型, "user32.dll", "SetWindowRgn", 公开, 为区域指定的所有坐标都以窗口坐标（不是客户坐标）表示，它们以整个窗口（包括标题栏和边框）的左上角为起点
    .参数 hwnd, 整数型, , 将设置其区域的窗口
    .参数 区域, 整数型, , 将设置的区域的句柄，一旦设置了该区域，就不能使用或修改该区域句柄，也不要删除它
    .参数 自动刷新, 逻辑型, , Boolean，若为TRUE，则立即重画窗口

.DLL命令 AtlAxWinInit, , "atl.dll", "AtlAxWinInit", 公开

.DLL命令 AtlAxGetControl, 整数型, "atl.dll", "AtlAxGetControl", 公开
    .参数 h, 整数型
    .参数 x, 对象

.DLL命令 GetTextExtentPointA, , "gdi32.dll", "GetTextExtentPointA", 公开
    .参数 hdc, 整数型
    .参数 lpString, 文本型
    .参数 cbString, 整数型
    .参数 lpSize, 精易_坐标

.DLL命令 CreateWindowExA, 整数型, "user32.dll", "CreateWindowExA", 公开, 创建窗口_
    .参数 扩展风格, 整数型
    .参数 类名, 文本型, , 刚才注册的类名
    .参数 窗口标题, 文本型
    .参数 风格, 整数型
    .参数 屏幕横坐标, 整数型
    .参数 屏幕纵坐标, 整数型
    .参数 宽度, 整数型
    .参数 高度, 整数型
    .参数 父窗口句柄, 整数型, , 没有就写0
    .参数 菜单句柄, 整数型
    .参数 模块句柄, 整数型
    .参数 参数, 整数型

.DLL命令 CreateWindowExW, 整数型, "user32", "CreateWindowExW", 公开, 创建窗口
    .参数 dwExStyle, 整数型, , 窗口的扩展风格
    .参数 lpClassName, 字节集, , 注册类名
    .参数 lpWindowName, 字节集, , 窗口名称
    .参数 dwStyle, 整数型, , 窗口风格
    .参数 x, 整数型, , 窗口的水平位置
    .参数 y, 整数型, , 窗口的垂直位置
    .参数 nWidth, 整数型, , 窗口的宽度
    .参数 nHeight, 整数型, , 窗口的高度
    .参数 hWndParent, 整数型, , 父窗口的句柄
    .参数 hMenu, 整数型, , 菜单的句柄或是子窗口的标识符
    .参数 hInstance, 整数型, , 应用程序实例的句柄
    .参数 lpParam, 整数型, , 指向窗口的创建数据

.DLL命令 GetWindowLongA, 整数型, "user32.dll", "GetWindowLongA", 公开, 获取窗口信息
    .参数 hwnd, 整数型
    .参数 属性, 整数型

.DLL命令 GetWindowLongW, 整数型, "User32.dll", "GetWindowLongW"
    .参数 hWnd, 整数型
    .参数 nIndex, 整数型

.DLL命令 GetWindowTextA, 整数型, "user32.dll", "GetWindowTextA", 公开, 窗口_取标题
    .参数 hwnd, 整数型
    .参数 标题名, 文本型, 传址
    .参数 长度, 整数型

.DLL命令 GetWindowTextW, 整数型, "user32.dll", "GetWindowTextW", 公开, 窗口_取标题W
    .参数 hwnd, 整数型
    .参数 标题名, 整数型
    .参数 长度, 整数型

.DLL命令 Thread32Next, 逻辑型, "Kernel32.dll", "Thread32Next", 公开, _线程取第一个
    .参数 快照句柄, 整数型
    .参数 线程入口结构, 线程入口结构

.DLL命令 SHGetSpecialFolderPathA, 逻辑型, "shell32.dll", "SHGetSpecialFolderPathA", 公开, 取系统目录
    .参数 hwndOwner, 整数型
    .参数 lpszPath, 文本型
    .参数 nFolder, 整数型
    .参数 fCreate, 逻辑型

.DLL命令 GetTempPathA, 整数型, "kernel32.dll", "GetTempPathA", 公开, 取临时目录
    .参数 目录长度, 整数型
    .参数 临时目录, 文本型

.DLL命令 SHBrowseForFolderW, 整数型, "shell32.dll", "SHBrowseForFolderW"
    .参数 lpBrowseInfo, BROWSEINFOW

.DLL命令 GetSystemDirectoryA, 整数型, "kernel32.dll", "GetSystemDirectoryA", 公开, 目录_取system32目录  成功返回system32目录的全路径
    .参数 缓冲区, 文本型
    .参数 缓冲区长度, 整数型

.DLL命令 GetWindowsDirectoryA, 整数型, "kernel32.dll", "GetWindowsDirectoryA", 公开, 目录_取Windows目录  成功返回Windows目录的全路径
    .参数 缓冲区, 文本型
    .参数 尺寸, 整数型

.DLL命令 PathMakeSystemFolderA, 整数型, "shlwapi.dll", "PathMakeSystemFolderA", 公开, 设置目录的系统属性
    .参数 目录, 文本型, , pszPath

.DLL命令 PathIsSystemFolderA, 整数型, "shlwapi.dll", "PathIsSystemFolderA", 公开, 判断目录是否有系统属性
    .参数 目录, 文本型, , pszPath
    .参数 属性标志, 整数型, 传址, dwAttrb

.DLL命令 PathUnmakeSystemFolderA, 整数型, "shlwapi.dll", "PathUnmakeSystemFolderA", 公开, 取消目录的系统属性
    .参数 目录, 文本型, , pszPath

.DLL命令 PathIsDirectoryEmptyA, 逻辑型, "shlwapi.dll", "PathIsDirectoryEmptyA", 公开, 目录_是否为空
    .参数 目录路径, 文本型

.DLL命令 PathIsDirectoryEmptyW, 逻辑型, "shlwapi.dll", "PathIsDirectoryEmptyW"
    .参数 pszPath, 字节集

.DLL命令 InternetGetCookieExA, 整数型, "wininet.dll", "InternetGetCookieExA", 公开
    .参数 lpszURL, 文本型
    .参数 lpszCookieName, 文本型
    .参数 lpszCookieData, 文本型
    .参数 lpdwSize, 整数型, 传址
    .参数 dwFlags, 整数型
    .参数 lpReserved, 整数型

.DLL命令 InternetGetCookieA, 逻辑型, "wininet.dll", "InternetGetCookieA", 公开, 读取COOKIE
    .参数 域名, 文本型
    .参数 名称, 文本型
    .参数 内容, 文本型, 传址
    .参数 尺寸, 整数型, 传址

.DLL命令 InternetSetCookieA, 逻辑型, "wininet.dll", "InternetSetCookieA", 公开, 设置COOKIE
    .参数 域名, 文本型, 传址
    .参数 名称, 文本型, 传址
    .参数 内容, 文本型, 传址

.DLL命令 ChooseColorA, 整数型, "comdlg32.dll", "ChooseColorA", 公开, 打开颜色对话框
    .参数 pChoosecolor, 精易_颜色对话框, 传址

.DLL命令 SetFilePointerEx, 逻辑型, "Kernel32.dll", "SetFilePointerEx"
    .参数 hFile, 整数型
    .参数 liDistanceToMove, 长整数型
    .参数 lpNewFilePointer, 长整数型, 传址
    .参数 dwMoveMethod, 整数型

.DLL命令 PrintWindow, 逻辑型, "User32.dll", "PrintWindow", 公开, 打印窗口
    .参数 hwnd, 整数型
    .参数 hdcBlt, 整数型
    .参数 nFlags, 整数型

.DLL命令 OpenProcessToken, 逻辑型, "advapi32.dll", "OpenProcessToken", 公开, 打开过程令牌对象OpenProcessToken
    .参数 ProcessHandle, 整数型, , 进程句柄
    .参数 DesiredAccess, 整数型, , 权限
    .参数 TokenHandle, 整数型, 传址, 令牌句柄

.DLL命令 ObjectFromLresult, 整数型, "OLEACC.DLL", "ObjectFromLresult", 公开
    .参数 lResult, 整数型
    .参数 riid, 字节集
    .参数 wParam, 整数型
    .参数 ppvObject, 对象

.DLL命令 SendMessageTimeoutA, 整数型, "user32.dll", "SendMessageTimeoutA", 公开, _同步发送消息  向窗口发送一条消息。如窗口位于不同的线程中，则利用这个函数可以指定一个超时值，以便在另一个进程挂起的时候防止调用进程也永远挂起　成功时返回TRUE，失败时返回FALSE。会设置GetLastError
    .参数 hwnd, 整数型, , 要接收消息的一个窗口的句柄
    .参数 MSG, 整数型, , 消息的标识符
    .参数 wParam, 整数型, , 由消息决定
    .参数 lParam, 整数型, , 由消息决定
    .参数 fuFlags, 整数型, , 下述常数的一个或多个;SMTO_ABORTIFHUNG：如目标进程挂起，则函数立即返回;SMTO_BLOCK：除非函数返回，否则调用线程不能处理消息;SMTO_NORMAL：允许调用线程处理消息，同时保持函数继续执行
    .参数 uTimeout, 整数型, , 超时值，采用毫秒为单位
    .参数 lpdwsult, 整数型, 传址, 用于装载函数结果的一个变量;

.DLL命令 _获取权限令牌, 整数型, "advapi32.dll", "LookupPrivilegeValueA", , 返回特权名LUID
    .参数 系统服务名, 整数型, , lpSystemName
    .参数 权限名, 文本型, 传址
    .参数 权限结构, LUID, 传址

.DLL命令 RegisterWindowMessageA, 整数型, "user32.dll", "RegisterWindowMessageA", 公开, _获取消息编号  获取分配给一个字串标识符的消息编号　&C000 到 &FFFF之间的一个消息编号。零意味着出错
    .参数 消息名称, 文本型, , 注册消息的名字;  

.DLL命令 RegisterHotKey, 逻辑型, "user32.dll", "RegisterHotKey", 公开, 热键注册
    .参数 hWnd, 整数型
    .参数 id, 整数型
    .参数 fsModifoers, 整数型
    .参数 vk, 整数型

.DLL命令 UnregisterHotKey, 逻辑型, "user32.dll", "UnregisterHotKey", 公开, 撤消热键钩子
    .参数 hWnd, 整数型
    .参数 id, 整数型

.DLL命令 OpenFileMappingA, 整数型, "kernel32.dll", "OpenFileMappingA", 公开, 打开一个现成的文件映射对象　指定文件映射对象的句柄。零表示出错。会设置GetLastError
    .参数 常数, 整数型, , 带有前缀FILE_MAP_???的一个常数。参考MapViewOfFile函数的dwDesiredAccess参数的说明
    .参数 进程继承, 整数型, , 如这个函数返回的句柄能由当前进程启动的新进程继承，则这个参数为TRUE
    .参数 文件映射对象名称, 文本型, , 指定要打开的文件映射对象名称;

.DLL命令 UnmapViewOfFile, 整数型, "kernel32.dll", "UnmapViewOfFile", 公开, _取消文件映射对象 在当前应用程序的内存地址空间对一个文件映射对象的映射
    .参数 lpBaseAddress, 整数型

.DLL命令 VirtualFreeEx_a, 整数型, "kernel32.dll", "VirtualFreeEx"
    .参数 hProcess, 整数型
    .参数 lpAddress, 整数型
    .参数 dwSize, 整数型, 传址
    .参数 dwFreeType, 整数型

.DLL命令 VirtualFree, 整数型, "kernel32.dll", "VirtualFree", , 释放虚拟页
    .参数 lpAddress, 整数型
    .参数 dwSize, 整数型
    .参数 dwFreeType, 整数型

.DLL命令 VirtualFreeEx, 整数型, "kernel32.dll", "VirtualFreeEx", 公开, 销毁外部指针
    .参数 hProcess, 整数型
    .参数 lpAddress, 整数型
    .参数 dwSize, 整数型
    .参数 flAllocationType, 整数型

.DLL命令 TerminateThread, 逻辑型, "Kernel32.dll", "TerminateThread"
    .参数 hThread, 整数型, , 线程句柄
    .参数 dwExitCode, 整数型, , 填0

.DLL命令 GetCurrentProcess, 整数型, "kernel32.dll", "GetCurrentProcess", 公开, 取当前进程伪句柄

.DLL命令 CreateThread, 整数型, "kernel32.dll", "CreateThread", 公开, 线程_启动
    .参数 lpThreadAttributes, 整数型
    .参数 dwStackSize, 整数型
    .参数 lpStartAddress, 整数型
    .参数 lpParameter, 整数型
    .参数 dwCreationFlags, 整数型, , 控制线程创建的标志。如果指定了CREATE_SUSPENDED标志，是创建线程处于暂停状态，并不会运行，直到ResumeThread函数被调用。如果这个值是零，线程创建后立即运行
    .参数 lpThreadId, 整数型

.DLL命令 RtlMoveMemory_GetUrlCache, , "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, INTERNET_CACHE_ENTRY_INFO, 传址
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 GetUrlCacheEntryInfo, 整数型, "wininet.dll", "GetUrlCacheEntryInfoA", 公开
    .参数 lpszUrlName, 文本型, , lpszUrlSearchPattern
    .参数 第一个Url缓存入口信息, 整数型, , lpFirstCacheEntryInfo
    .参数 第一个Url缓存入口信息大小, 整数型, 传址, lpdwFirstCacheEntryInfoBufferSize

.DLL命令 PathAppendA, 逻辑型, "shlwapi.dll", "PathAppendA", 公开, 合并路径
    .参数 pszPath, 字节集, 传址
    .参数 pszMore, 字节集

.DLL命令 PathAppendW, 逻辑型, "Shlwapi.dll", "PathAppendW"
    .参数 pszPath, 字节集
    .参数 pszMore, 字节集

.DLL命令 ImmGetDescriptionA, 整数型, "imm32.dll", "ImmGetDescriptionA", 公开, _输入法取名称
    .参数 布局, 整数型
    .参数 布局名称, 文本型
    .参数 名称长度, 整数型

.DLL命令 ImmIsIME, 整数型, "imm32.dll", "ImmIsIME", 公开, _输入法判断中文键盘布局
    .参数 hkl, 整数型

.DLL命令 DeleteDC, 整数型, "gdi32.dll", "DeleteDC", 公开
    .参数 hdc, 整数型

.DLL命令 GetKeyboardLayout, 整数型, "user32.dll", "GetKeyboardLayout", 公开, _输入法取当前的序号
    .参数 布局索引, 整数型

.DLL命令 GetLogicalDriveStringsA, 整数型, "kernel32.dll", "GetLogicalDriveStringsA", 公开, _系统取所有磁盘盘符 获取一个字串，其中包含了当前所有逻辑驱动器的根驱动器路径  装载到lpBuffer的字符数量（排除空中止字符）。如缓冲区的长度不够，不能容下路径，则返回值就变成要求的缓冲区大小。零表示失败。会设置GetLastError
    .参数 缓冲器长度, 整数型, , lpBuffer字串的长度
    .参数 缓冲区, 字节集, , 用于装载逻辑驱动器名称的字串。每个名字都用一个NULL字符分隔，在最后一个名字后面用两个NULL表示中止（空中止）;

.DLL命令 GetDiskFreeSpaceExA, 逻辑型, "kernel32.dll", "GetDiskFreeSpaceExA", 公开, 系统_取磁盘大小信息
    .参数 根路径名称, 文本型, , lpRootPathName
    .参数 剩余空间, 长整数型, 传址, lpFreeBytesAvailableToCaller
    .参数 总大小, 长整数型, 传址, lpTotalNumberOfBytes
    .参数 总剩余空间, 长整数型, 传址, lpTotalNumberOfFreeBytes

.DLL命令 mciSendCommandA, 整数型, "Winmm.dll", "mciSendCommandA", , _系统光驱开关3
    .参数 IDDevice, 整数型
    .参数 uMsg, 整数型
    .参数 fdwCommand, 整数型
    .参数 dwParam, 整数型

.DLL命令 CreateThread_AXP, 整数型, "kernel32.dll", "CreateThread", 公开, 创建线程_ 句柄
    .参数 属性, 整数型, , 是线程的属性
    .参数 栈大小, 整数型, , 是线程的栈大小
    .参数 函数开始地址, 子程序指针, , 是线程函数的开始地址
    .参数 函数参数, 整数型, , 是传送给线程函数的参数
    .参数 标志, 整数型, , 是创建线程标志，比如挂起线程
    .参数 ID, 整数型, 传址, 是标识这个线程的ID

.DLL命令 RtlMoveMemory_AXP, , "kernel32", "RtlMoveMemory", , ,
    .参数 lpDestination, 长整数型, 传址, 指向目标内存的指针
    .参数 lpSource, 整数型, 传址, 指向来源内存的指针
    .参数 Length, 整数型, , 拷贝的字节数

.DLL命令 调试器_等待调试事件, 逻辑型, "kernel32.dll", "WaitForDebugEvent", , ZwWaitForDebugEvent
    .参数 调试事件, 调试事件
    .参数 等待延时, 整数型, , -1 = 一直等待

.DLL命令 调试器_恢复调试线程, 逻辑型, "kernel32.dll", "ContinueDebugEvent"
    .参数 进程ID, 整数型
    .参数 线程ID, 整数型
    .参数 恢复执行方式, 整数型, , DBG_CONTINUE=0x=00010002=65538和 DBG_EXCEPTION_NOT_HANDLED=0x80010001=2147549185=-2147418111

.DLL命令 调试器_卸载调试器, 逻辑型, "kernel32.dll", "DebugActiveProcessStop", , ZwRemoveProcessDebug(进程对象句柄,调试对象句柄)
    .参数 进程ID, 整数型

.DLL命令 _系统光驱开关2, 整数型, "Winmm.dll", "mciSendCommandA"
    .参数 IDDevice, 整数型
    .参数 uMsg, 整数型
    .参数 fdwCommand, 整数型
    .参数 dwParam, 光驱相关2

.DLL命令 _系统光驱开关1, 整数型, "Winmm.dll", "mciSendCommandA"
    .参数 IDDevice, 整数型
    .参数 uMsg, 整数型
    .参数 fdwCommand, 整数型
    .参数 dwParam, 光驱相关1

.DLL命令 GetDriveTypeA, 整数型, "kernel32.dll", "GetDriveTypeA", 公开, _系统光驱查询
    .参数 nDrive, 文本型

.DLL命令 _关机对话框_XP, 整数型, "shell32.dll", "#60", , XP系统类型
    .参数 参数, 整数型, , YourGuess

.DLL命令 _关机对话框_WIN, 整数型, "shell32.dll", "#60", , WIN7以上的系统类型
    .参数 参数1, 整数型, , YourGuess
    .参数 参数2, 整数型

.DLL命令 LockWorkStation, , "user32.dll", "LockWorkStation", 公开, 切换系统用户

.DLL命令 SetSuspendState, 整数型, "Powrprof.dll", "SetSuspendState", 公开, 系统进入待机状态
    .参数 冬眠, 整数型, , Hibernate
    .参数 强制, 整数型, , ForceCritical
    .参数 不激发事件, 整数型, , DisableWakeEvent

.DLL命令 ExitWindowsEx, 整数型, "user32.dll", "ExitWindowsEx", 公开, 关闭系统, 退出windows，并用特定的选项重新启动
    .参数 uFlags, 整数型, , 指定一个或多个标志的组合
    .参数 dwReason, 整数型, , 保留，设为零

.DLL命令 SHEmptyRecycleBinA, 整数型, "shell32.dll", "SHEmptyRecycleBinA", 公开, 系统_清空回收站, SHEmptyRecycleBin
    .参数 hwnd, 整数型
    .参数 pszRootPath, 整数型
    .参数 dwFlags, 整数型

.DLL命令 SHFormatDrive, 逻辑型, "shell32.dll", "SHFormatDrive", 公开, _格式化软盘
    .参数 hwnd, 整数型, , hwndOwner
    .参数 驱动器, 整数型, , iDrive
    .参数 容量, 整数型, , iCapacity
    .参数 格式化类型, 整数型, , iFormatType

.DLL命令 SystemParametersInfoA, 逻辑型, "user32.dll", "SystemParametersInfoA", 公开, _系统设置桌面壁纸
    .参数 uiAction, 整数型
    .参数 uiParam, 整数型
    .参数 pvParam, 整数型
    .参数 fWinlni, 短整数型

.DLL命令 GetUserNameA, 整数型, "advapi32.dll", "GetUserNameA", 公开, 取出当前的用户名,TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同用户名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回用户名的实际长度载入

.DLL命令 GetUserNameW, 逻辑型, "advapi32.dll", "GetUserNameW"
    .参数 lpBuffer, 字节集
    .参数 pcbBuffer, 整数型, 传址

.DLL命令 waveOutGetVolume, 整数型, "winmm.dll", "waveOutGetVolume", 公开
    .参数 设备, 整数型
    .参数 音量值, 整数型, 传址

.DLL命令 waveOutSetVolume, 整数型, "winmm.dll", "waveOutSetVolume", 公开, _系统置音量
    .参数 设备, 整数型
    .参数 音量值, 整数型

.DLL命令 ChangeDisplaySettingsA, 整数型, "user32.dll", "ChangeDisplaySettingsA", 公开, _系统置分辨率2
    .参数 lpDevMode, 短整数型, 传址
    .参数 dwFlags, 整数型

.DLL命令 GetComputerNameA, 整数型, "kernel32.dll", "GetComputerNameA", 公开, _系统取计算机名 取出当前完整的计算机名称，TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同计算机名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回计算机名的实际长度载入

.DLL命令 EnumDisplaySettingsA, 整数型, "user32.dll", "EnumDisplaySettingsA", 公开, _系统置分辨率1
    .参数 lpszDeviceName, 整数型
    .参数 iModeNum, 整数型
    .参数 lpDevMode, 短整数型, 传址

.DLL命令 SHAppBarMessage, 整数型, "shell32.dll", "SHAppBarMessage", 公开, _系统取任务栏高度
    .参数 dwMessage
    .参数 pData, 精易_任务相关

.DLL命令 GetDateFormatA, 整数型, "kernel32.dll", "GetDateFormatA", 公开, 针对指定的“当地”格式，对一个系统日期进行格式化  格式化过后的字串的长度。
    .参数 地方ID, 整数型, , Locale，用于决定格式的地方ID。lpFormat参数中指定的任何信息（倘若不是NULL）都优先于特定于地方的信息
    .参数 标志, 整数型, , dwFlags，如指定了lpFormat，那么该参数应该为零。否则，可设为LOCALE_NOUSEROVERRIDE，强制使用系统地方参数——即使它们已由用户取代。
    .参数 日期结构, 精易_时间, , lpDate，包含了一个系统日期的结构
    .参数 格式化, 文本型, , lpFormat，String，可设为NULL，使用特定于不同地方的值（用vbNullString传递一个NULL）。否则包含一个日期格式字串。
    .参数 缓冲区文本, 文本型, , lpDateStr，指定一个缓冲区，用于容纳格式化过后的字串。注意事先对字串进行初始化
    .参数 缓冲区文本长度, 整数型, , cchDate，缓冲区的长度。如为零，表示函数会返回需要缓冲区的大小;

.DLL命令 SystemTimeToVariantTime, 整数型, "oleaut32.dll", "SystemTimeToVariantTime", 公开, _系统时间变时间
    .参数 SystemTime, 精易_时间, 传址
    .参数 vtime, 日期时间型, 传址

.DLL命令 FileTimeToSystemTime, 整数型, "kernel32.dll", "FileTimeToSystemTime", , _系统结构的内容 根据一个FILETIME结构的内容，装会设置GetLastError
    .参数 文件时间结构, FILETIME, , FILETIME，包含了文件时间的一个结构
    .参数 系统时间结构, 精易_时间, , SYSTEMTIME，用于装载系统时间信息的一个结构;

.DLL命令 SystemTimeToFileTime, 整数型, "kernel32.dll", "SystemTimeToFileTime", ,  _系统到本地时间1
    .参数 SystemTime, 精易_时间
    .参数 FileTime, FILETIME

.DLL命令 FileTimeToLocalFileTime, 整数型, "kernel32.dll", "FileTimeToLocalFileTime", , _系统到本地时间 将一个FILETIME结构转换成本地时间  非零表示成功，零表示失败。会设置GetLastError
    .参数 文件时间, FILETIME, , FILETIME，包含了UTC时间信息的一个结构
    .参数 所在文件时间, FILETIME, , FILETIME，用于装载转换过后的本地时间的结构;

.DLL命令 GetTimeFormatA, 整数型, "kernel32.dll", "GetTimeFormatA", 公开, _系统置时间进行格式化 针对指定的“当地”格式，对一个系统时间进行格式化。
    .参数 地方ID, 整数型, , Locale，用于决定格式的地方ID。lpFormat参数中指定的任何信息（倘若不是NULL）都优先于特定于地方的信息
    .参数 标志, 整数型, , dwFlags，如指定了lpFormat，那么该参数应该为零。否则，可设为LOCALE_NOUSEROVERRIDE，强制使用系统地方参数
    .参数 时间结构, 精易_时间, , lpDate，SYSTEMTIME，用于包容系统时间的一个结构
    .参数 格式化, 文本型, , lpFormat，String，可设为NULL，使用特定于不同地方的值（用vbNullString传递一个NULL）。
    .参数 缓冲区文本, 文本型, , lpDateStr，指定一个缓冲区，用于容纳格式化过后的字串。注意事先对字串进行初始化
    .参数 缓冲区文本长度, 整数型, , cchDate，缓冲区的长度。如为零，表示函数会返回需要缓冲区的大小;

.DLL命令 GetInputState, 整数型, "user32.dll", "GetInputState", 公开, 用法,如果真(我的处理事件()≠0),处理事件()    比系统自带的"处理事件"比3倍以上

.DLL命令 EnumThreadWindows, 整数型, "user32.dll", "EnumThreadWindows", 公开, _窗口枚举任务 枚举与指定任务相关的窗口　非零表示成功，零表示失败
    .参数 线程标识符, 整数型, , 某线程的标识符，它的窗口将被枚举
    .参数 函数指针, 子程序指针, , 指向一个函数的指针，要求为每个子窗口都调用这个函数。用AddressOf运算符获得函数在标准模式下的地址
    .参数 自定义数值, 整数型, , 在枚举期间，传递给dwcbkd32d.ocx定制控件之EnumWindows事件的值。这个值的含义是由程序员规定的
  

.DLL命令 CreateRoundRectRgn, 整数型, "gdi32.dll", "CreateRoundRectRgn", 公开, 创建一个圆角矩形，该矩形由X1，Y1-X2，Y2确定，并由X3，Y3确定的椭圆描述圆角弧度，不用时一定要用DeleteObject函数删除该区域用该函数创建的区域与用RoundRect API函数画的圆角矩形不完全相同，因为本矩形的右边和下边不包括在区域之内
    .参数 左上横坐标, 整数型, , X1，矩形左上角横坐标
    .参数 左上纵坐标, 整数型, , Y1，矩形左上角纵坐标
    .参数 右下横坐标, 整数型, , X2，矩形右下角横坐标
    .参数 右下纵坐标, 整数型, , Y2，矩形右下角纵坐标
    .参数 圆角椭圆的宽, 整数型, , X3，圆角椭圆的宽，其范围从0（没有圆角）到矩形宽（全圆）
    .参数 圆角椭圆的高, 整数型, , Y3，圆角椭圆的高，其范围从0（没有圆角）到矩形高（全圆）

.DLL命令 ClientToScreen, 整数型, "user32.dll", "ClientToScreen", 公开, _窗口取区域位置 非零表示成功，零表示失败
    .参数 hwnd, 整数型, , hwnd，要取出区域坐标的窗口句柄
    .参数 位置变量, 精易_坐标, , lpPoint，参见相关帮助

.DLL命令 SetFocus, 逻辑型, "user32.dll", "SetFocus", 公开, 窗口_置后台焦点 将输入焦点设到指定的窗口。如有必要，会激活窗口  (返回前一个拥有焦点的窗口的句柄)
    .参数 hwnd, 整数型, , 准备接收焦点的窗口的句柄

.DLL命令 SetForegroundWindow, 逻辑型, "user32.dll", "SetForegroundWindow", 公开, 窗口_置焦点 将窗口设为系统的前台窗口。这个函数可用于改变用户目前正在操作的应用程序
    .参数 句柄, 整数型

.DLL命令 ShowCursor, , "user32.dll", "ShowCursor", 公开, 鼠标_显示隐藏   控制鼠标指针的可视性(返回值:显示计数（参考注解）)
    .参数 bShow, 逻辑型, , （非零）显示指针，零 隐藏

.DLL命令 ClipCursor, , "user32.dll", "ClipCursor", 公开, 鼠标限制
    .参数 区域, 精易_矩形

.DLL命令 LoadCursor, 整数型, "user32.dll", "LoadCursorA", 公开, 从指定的模块或应用程序实例中载入一个鼠标指针。LoadCursorBynum是LoadCursor函数的类型安全声明　执行成功则返回已载入的指针的句柄；零表示失败。在Windows ;    95 和Win16环境中，这个函数只能载入标准尺寸的图标
    .参数 实例句柄, 整数型, , 一个DLL的模块句柄；或者一个实例句柄，指定包含了鼠标指针的可执行程序
    .参数 鼠标指针标识, 整数型, , 作为一个字串，指定欲载入的指针资源。作为一个长整数值，指定欲载入的资源ID；或者设置一个常数，代表某幅固有系统指针。如装载的是一个固有系统指针，注意hInstance参数应设为零。在api32.txt文件中以前缀IDC_ 作为标志;  

.DLL命令 SetCursor, 整数型, "user32.dll", "SetCursor", 公开, 将指定的鼠标指针设为当前指针　前一个指针的值
    .参数 指针句柄, 整数型, , 要设为当前指针的一个指针的句柄。如设为零，表示不显示任何指针;  

.DLL命令 GetDoubleClickTime, 整数型, "user32.dll", "GetDoubleClickTime", 公开, 鼠标_取双击间隔时间

.DLL命令 SetCursorPos, , "user32.dll", "SetCursorPos", 公开, 鼠标_置位置 
    .参数 横坐标, 整数型
    .参数 纵坐标, 整数型

.DLL命令 SetClassLongA, 整数型, "user32.dll", "SetClassLongA", 公开
    .参数 hwnd, 整数型
    .参数 nIndex, 整数型
    .参数 dwNewLong, 整数型, , 类信息的新值

.DLL命令 LoadCursorFromFileA, 整数型, "user32.dll", "LoadCursorFromFileA", 公开, 创建一个鼠标指针
    .参数 lpFileName, 文本型, , 包含指针的那个文件的名字

.DLL命令 SetCapture, 整数型, "user32.dll", "SetCapture", 公开, 鼠标捕获
    .参数 hwnd

.DLL命令 ReleaseCapture, 逻辑型, "user32.dll", "ReleaseCapture", 公开, 鼠标释放

.DLL命令 mouse_event, , "user32.dll", "mouse_event", 公开, 鼠标模拟
    .参数 标志组合, 整数型, , 2鼠标左键按住不放；6鼠标左键单击；24鼠标右键单击；
    .参数 水平方向, 整数型, , dx，参见相关帮助
    .参数 垂直方向, 整数型, , dy，参见相关帮助
    .参数 数据信息, 整数型, , cButtons，未使用
    .参数 扩展数据信息, 整数型, , dwExtraInfo，通常未用的一个值

.DLL命令 GetCursorPos, 整数型, "user32.dll", "GetCursorPos", , 鼠标_取鼠标位置
    .参数 位置, 精易_坐标, 传址

.DLL命令 GetClipboardOwner, 整数型, "user32.dll", "GetClipboardOwner", 公开, _剪辑板取数据权窗口句柄 返回复制该数据的窗口句柄；如：一段文字是在记事本复制的，则返回记事本的窗口句柄

.DLL命令 GetClipboardData, 整数型, "user32.dll", "GetClipboardData", 公开, 剪辑板取数据句柄
    .参数 wFormat, 整数型

.DLL命令 CloseClipboard, 整数型, "user32.dll", "CloseClipboard", 公开, 剪辑板关闭

.DLL命令 SetClipboardData, 整数型, "user32.dll", "SetClipboardData", 公开, 剪辑板置数据
    .参数 uFormat, 整数型
    .参数 hMem, 整数型

.DLL命令 GetDIBits3, 整数型, "gdi32.dll", "GetDIBits", 公开, gdi32.dll将来自一幅位图的二进制位复制到一幅与设备无关的位图里  非零表示成功，零表示失败。在Windows 95中，返回值是返回的扫描线数量
    .参数 设备场景句柄, 整数型, , aHDC，定义了与设备有关位图hBitmap的配置信息的一个设备场景的句柄
    .参数 源位图句柄, 整数型, , hBitmap，源位图的句柄。绝对不能将这幅位图选入设备场景
    .参数 扫描线初始编号, 整数型, , nStartScan，欲复制到DIB中的第一条扫描线的编号
    .参数 扫描线数量, 整数型, , nNumScans，欲复制的扫描线数量
    .参数 缓冲区指针, 字节型, 传址, lpBits，指向一个缓冲区的指针。这个缓冲区将用于装载采用DIB格式的信息，但不取回数据（用ByVal传递零值）
    .参数 位图结构, 位图信息_, , lpBI，BITMAPINFO，对lpBits DIB的格式及颜色进行说明的一个结构。在BITMAPINFOHEADER结构中，从biSize到biCompression之间的所有字段都必须初始化
    .参数 常量标志, 整数型, , wUsage，下述常数之一：;DIB_PAL_COLORS：在颜色表中装载一个16位所以数组，它们与当前选定的调色板有关;DIB_RGB_COLORS：在颜色表中装载RGB颜色;

.DLL命令 SetPixelV, 整数型, "gdi32.dll", "SetPixelV", 公开, 置场景颜色_在指定的设备场景中设置一个像素的RGB值
    .参数 hdc, 整数型
    .参数 x, 整数型
    .参数 y, 整数型
    .参数 crColor, 整数型, , 指定像素的新RGB颜色值

.DLL命令 DrawIconEx, 整数型, "user32.dll", "DrawIconEx", 公开, 描绘一个图标或鼠标指针
    .参数 hdc
    .参数 xLeft
    .参数 yTop
    .参数 hIcon
    .参数 cxWidth
    .参数 cyWidth
    .参数 istepIfAniCur
    .参数 hbrFlickerFreeDraw
    .参数 diFlags

.DLL命令 Download_URLDownloadToFileA, 整数型, "Urlmon.dll", "URLDownloadToFileA"
    .参数 参数1, 整数型
    .参数 参数2, 文本型
    .参数 参数3, 文本型
    .参数 参数4, 整数型
    .参数 参数5, 整数型

.DLL命令 Download_DeleteUrlCacheEntry, , "wininet.dll", "DeleteUrlCacheEntry"
    .参数 参数1, 文本型

.DLL命令 EmptyClipboard, 逻辑型, "user32.dll", "EmptyClipboard", 公开, 剪辑板清空

.DLL命令 取对象属性_, 整数型, "gdi32.dll", "GetObjectA"
    .参数 对象句柄, 整数型
    .参数 数据尺寸, 整数型
    .参数 属性, 位图结构_

.DLL命令 GetObjectA, 整数型, "gdi32.dll", "GetObjectA", 公开, _取对象属性
    .参数 hgdiobj, 整数型
    .参数 cbBuffer, 整数型
    .参数 lpvObject, BITMAP

.DLL命令 GlobalLock, 整数型, "kernel32.dll", "GlobalLock", 公开, 锁定内存对象并返回一个指针
    .参数 hMem, 整数型

.DLL命令 GlobalUnlock, 整数型, "kernel32.dll", "GlobalUnlock", 公开, 开锁全局内存块
    .参数 hMem, 整数型

.DLL命令 GlobalAlloc, 整数型, "kernel32.dll", "GlobalAlloc", 公开, 在堆中分配内存
    .参数 wFlags, 整数型
    .参数 dwBytes, 整数型

.DLL命令 IsClipboardFormatAvailable, 整数型, "user32.dll", "IsClipboardFormatAvailable", 公开, _剪贴板格式是可用
    .参数 wFormat, 整数型

.DLL命令 RegisterClipboardFormatA, 整数型, "user32.dll", "RegisterClipboardFormatA", 公开, _剪辑板注册格式
    .参数 lpString, 文本型

.DLL命令 RtlMoveMemory_字节型_数组, , "kernel32.dll", "RtlMoveMemory", 公开, 复制内存数据_MIB_IPFORWARDROW参数
    .参数 Destination, 字节型, 数组, 目标地址
    .参数 Source, 字节型, 数组, 要复制的数据MIB_IPFORWARDROW
    .参数 Length, 整数型, , 长度

.DLL命令 RtlMoveMemory_字节型, , "kernel32.dll", "RtlMoveMemory", 公开, 复制内存数据_MIB_IPFORWARDROW参数
    .参数 Destination, 字节型, 传址, 目标地址
    .参数 Source, 字节型, 传址, 要复制的数据MIB_IPFORWARDROW
    .参数 Length, 整数型, , 长度

.DLL命令 RtlMoveMemory_文本型, , "kernel32.dll", "RtlMoveMemory", 公开, 内存拷贝
    .参数 Destination, 整数型
    .参数 Source, 文本型
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_剪贴板_置文件, , "kernel32.dll", "RtlMoveMemory", 公开, _剪贴板置文件
    .参数 pDest, 整数型
    .参数 pSrc, 剪贴板_置文件, 传址
    .参数 ByteLen, 整数型

.DLL命令 DragQueryFileA, 整数型, "shell32.dll", "DragQueryFileA", 公开, _拖动查询文件
    .参数 hDrop, 整数型
    .参数 iFile, 整数型
    .参数 lpszFile, 整数型
    .参数 cch, 整数型

.DLL命令 DragQueryFileW, 整数型, "Shell32.dll", "DragQueryFileW"
    .参数 hDrop, 整数型
    .参数 iFile, 整数型
    .参数 lpszFile, 整数型
    .参数 cch, 整数型

.DLL命令 OpenClipboard, 整数型, "user32.dll", "OpenClipboard", 公开, 打开剪辑板
    .参数 句柄, 整数型

.DLL命令 keybd_event, 整数型, "user32.dll", "keybd_event", 公开, 键盘模拟
    .参数 键代码, 整数型, , bVk,欲模拟的虚拟键码
    .参数 键扫描码, 整数型, , bScan,键的OEM扫描码
    .参数 标志值, 整数型, , dwFlags,标志常数
    .参数 特定值, 整数型, , dwExtraInfo,通常不用的一个值

.DLL命令 SetLayeredWindowAttributes, 逻辑型, "user32.dll", "SetLayeredWindowAttributes", 公开, 窗口_置透明
    .参数 hwnd, 整数型, , 透明窗体的句柄
    .参数 crKey, 整数型, , 颜色值
    .参数 bAlpha, 字节型, , 透明度，取值范围是[0,255]
    .参数 dwFlags, 整数型, , 透明方式：LWA_ALPHA(2)时，crKey参数无效，bAlpha参数有效 || LWA_COLORKEY(1)时，bAlpha参数有效而窗体中的所有颜色为crKey的地方将变为透明

.DLL命令 SetWindowTextA, 逻辑型, "user32.dll", "SetWindowTextA", 公开, 窗口_置标题
    .参数 hwnd, 整数型
    .参数 窗口标题, 文本型

.DLL命令 SetWindowTextW, 逻辑型, "user32.dll", "SetWindowTextW", 公开, 改变指定窗口的标题栏的文本内容（如果窗口有标题栏）。如果指定窗口是一个控件，则改变控件的文本内容。然而，SetWindowText函数不改变其他应用程序中的控件的文本内容。
    .参数 hWnd, 整数型, , 要改变文本内容的窗口或控件的句柄。
    .参数 lpString, 字节集, , 指向一个空结束的字符串的指针，该字符串将作为窗口或控件的新文本。(注意：易语言BUG，不能直接用字节集常量)

.DLL命令 WindowFromPoint, 整数型, "user32.dll", "WindowFromPoint", 公开, 窗口_取鼠标处窗口句柄 返回包含了指定点的窗口的句柄。忽略屏蔽、隐藏以及透明窗口  包含了指定点的窗口的句柄。如指定的点处没有窗口存在，则返回零
    .参数 横坐标, 整数型
    .参数 纵坐标, 整数型

.DLL命令 ShowScrollBar, 逻辑型, "user32.dll", "ShowScrollBar", 公开, 滚动条_显示隐藏 窗口_控件显示隐藏, ShowScrollBar
    .参数 hwnd, 整数型, , hwnd
    .参数 滚动条标志, 整数型, , wBar
    .参数 显示标志, 逻辑型, , bShow

.DLL命令 SetTimer, 整数型, "user32.dll", "SetTimer", 公开, 用指定的超时值创建或替换一个定时器。如果函数成功并且hWnd参数为NULL，则返回值为标识新定时器的整数，应用程序可以将此值传递给KillTimer函数以销毁定时器。如果函数成功并且hWnd参数不为NULL，则返回值为非零整数，应用程序可以将nIDEvent参数的值传递给KillTimer函数以销毁定时器。如果函数无法创建定时器，则返回值为零。要获取扩展的错误信息，请调用GetLastError。
    .参数 hWnd, 整数型, , 与定时器关联的窗口句柄。如果将为 NULL 的 hWnd 与现有定时器的 nIDEvent 一起传递，该定时器将被替换的方式与现有的非 NULL 的 hWnd 定时器相同。
    .参数 nIDEvent, 整数型, , 非零的定时器ID。如果 hWnd 参数为 NULL，并且 nIDEvent 与现有定时器不匹配，则会忽略该参数并生成新的定时器ID。如果 hWnd 参数非 NULL，并且 hWnd 指定的窗口已具有具有值为 nIDEvent 的定时器，则现有定时器将被新定时器替换。当 SetTimer 替换定时器时，定时器将重置。因此，将在当前超时值过去之后发送一条消息，但先前设置的超时值将被忽略。如果该调用不是要替换现有的定时器，则如果 hWnd 为 NULL，则 nIDEvent 应为 0。
    .参数 uElapse, 整数型, , 超时值，以毫秒为单位。如果 uElapse 小于 USER_TIMER_MINIMUM（10），则将超时设置为 USER_TIMER_MINIMUM。如果 uElapse 大于 USER_TIMER_MAXIMUM（2147483647），则将超时设置为 USER_TIMER_MAXIMUM。
    .参数 lpTimerFunc, 整数型, , 当超时值过去时，指向要通知的函数指针。有关该函数的更多信息，请参见 TimerProc 。如果 lpTimerFunc 为 NULL，则系统将 WM_TIMER 消息发送到应用程序消息队列的 MSG 结构的 hwnd 成员包含 hWnd 参数的值。

.DLL命令 KillTimer, 逻辑型, "user32.dll", "KillTimer", 公开, 销毁指定的定时器。
    .参数 hWnd, 整数型, , 与指定定时器关联的窗口的句柄。此值必须与传递给创建定时器的SetTimer函数的hWnd值相同。
    .参数 uIDEvent, 整数型, , 要销毁的定时器。如果传递给SetTimer的窗口句柄有效，则此参数必须与传递给SetTimer的nIDEvent相同。如果应用程序调用SetTimer的hWnd设为NULL，这个参数必须由SetTimer返回的定时器ID。

.DLL命令 _设备操作0, 整数型, "kernel32.dll", "DeviceIoControl", , 对设备执行指定的操作  非零表示成功，零表示失败。会设置GetLastError
    .参数 hDevice, 整数型, , 设备句柄
    .参数 dwIoControlCode, 整数型, , 带有 FSCTL_ 前缀的常数。参考设备控制选项的部分列表
    .参数 lpInBuffer, 整数型, , 具体取决于dwIoControlCode参数。参考设备控制选项的部分列表
    .参数 nInBufferSize, 整数型, , 输入缓冲区的长度
    .参数 lpOutBuffer, 取硬盘特征号1, 传址, 具体取决于dwIoControlCode参数。参考设备控制选项的部分列表
    .参数 nOutBufferSize, 整数型, , 输出缓冲区的长度
    .参数 lpBytesReturned, 整数型, 传址, 实际装载到输出缓冲区的字节数量
    .参数 lpOverlapped, 整数型, , OVERLAPPED，这个结构用于重叠操作。针对同步操作，请用ByVal As Long传递零值;

.DLL命令 DeviceIoControl, 整数型, "kernel32.dll", "DeviceIoControl", , 对设备执行指定的操作  非零表示成功，零表示失败。会设置GetLastError
    .参数 hDevice, 整数型, , 设备句柄
    .参数 dwIoControlCode, 整数型, , 带有 FSCTL_ 前缀的常数。参考设备控制选项的部分列表
    .参数 lpInBuffer, 取硬盘特征号0, 传址, 具体取决于dwIoControlCode参数。参考设备控制选项的部分列表
    .参数 nInBufferSize, 整数型, , 输入缓冲区的长度
    .参数 lpOutBuffer, 字节集, 传址, 具体取决于dwIoControlCode参数。参考设备控制选项的部分列表
    .参数 nOutBufferSize, 整数型, , 输出缓冲区的长度
    .参数 lpBytesReturned, 整数型, 传址, 实际装载到输出缓冲区的字节数量
    .参数 lpOverlapped, 整数型, , OVERLAPPED，这个结构用于重叠操作。针对同步操作，请用ByVal As Long传递零值;

.DLL命令 _设备操作2, 整数型, "Kernel32.dll", "DeviceIoControl"
    .参数 hDevice, 整数型
    .参数 dwIoControlCode, 整数型
    .参数 lpInBuffer, 取硬盘特征号2, 传址
    .参数 nInBufferSize, 整数型
    .参数 lpOutBuffer, 字节集, 传址
    .参数 nOutBufferSize, 整数型
    .参数 lpBytesReturned, 整数型, 传址
    .参数 lpOverlapped, 整数型, , OVERLAPPED

.DLL命令 GetWindowDC, 整数型, "user32.dll", "GetWindowDC", 公开, 获取整个窗口（包括边框、滚动条、标题栏、菜单等）的设备场景  执行成功为窗口设备场景，失败则为0
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口;

.DLL命令 CreatePen, 整数型, "gdi32.dll", "CreatePen", 公开, 用指定的样式、宽度和颜色创建一个画笔  如函数执行成功，就返回指向新画笔的一个句柄；否则返回零
    .参数 风格, 整数型, , 指定画笔样式，可以是下述常数之一;PS_SOLID：画笔画出的是实线;PS_DASH：画笔画出的是虚线（nWidth必须是1）;PS_DOT：画笔画出的是点线（nWidth必须是1）;PS_DASHDOT：画笔画出的是点划线（nWidth必须是1）;PS_DASHDOTDOT：画笔画出的是点-点-划线（nWidth必须是1）;PS_NULL：画笔不能画图;PS_INSIDEFRAME：画笔在由椭圆、矩形、圆角矩形、饼图以及弦等生成的封闭对象框中画图。如指定的准确RGB颜色不存在，就进行抖动处理
    .参数 宽度, 整数型, , 以逻辑单位表示的画笔的宽度
    .参数 颜色, 整数型, , 画笔的RGB颜色;

.DLL命令 GetStockObject, 整数型, "gdi32.dll", "GetStockObject", 公开, 取得一个固有对象的句柄（Stock）。这是可由任何应用程序使用的windows标准对象之一  指向指定对象的一个句柄。零表示出错
    .参数 类型, 整数型, , 下述表格中定义的任何常数之一BLACK_BRUSH黑色刷子DKGRAY_BRUSH黑灰色刷子GRAY_BRUSH灰色刷子HOLLOW_BRUSH凹刷子LTGRAY_BRUSH浅灰色刷子NULL_BRUSH空刷子WHITE_BRUSH白色刷子BLACK_PEN黑色画笔NULL_PEN空画笔WHITE_PEN白色画笔ANSI_FIXED_FONT采用windows（ANSI）字符集的等宽字体ANSI_VAR_FONT采用windows（ANSI）字符集的不等宽字体DEVICE_DEFAULT_FONT设备使用的默认字体（NT）DEFAULT_GUI_FONT用户界面的默认字体，包括菜单和对话框字体（Windows 95）OEM_FIXED_FONTOEM字符集的固有字体SYSTEM_FONT屏幕系统字体。这是用于菜单、对话框等等的默认不等宽字体SYSTEM_FIXED_FONT屏幕系统字体。这是用于菜单、对话框等等的默认等宽字体（在windows 3.0之前使用）DEFAULT_PALETTE默认调色板;

.DLL命令 SetROP2, 整数型, "gdi32.dll", "SetROP2", 公开, 设置指定设备场景的绘图模式。与vb的DrawMode属性完全一致　如执行成功，返回前一个绘图模式；零表示出错
    .参数 设备场景, 整数型
    .参数 光栅运算方式, 整数型

.DLL命令 Rectangle, 整数型, "gdi32.dll", "Rectangle", 公开, 画矩形 用当前选定的画笔描绘矩形，并用当前选定的刷子进行填充  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 设备场景的句柄
    .参数 左上角横坐标, 整数型, , 指定矩形左上角位置
    .参数 左上角纵坐标, 整数型, , 同上
    .参数 右下角横坐标, 整数型, , 指定矩形右下角位置
    .参数 右下角纵坐标, 整数型, , 同上;

.DLL命令 GetCurrentThread, 整数型, "kernel32.dll", "GetCurrentThread", 公开, 取当前线程句柄

.DLL命令 GetCurrentThreadId, 整数型, "kernel32.dll", "GetCurrentThreadId", 公开, 取当前线程ID

.DLL命令 取数据地址, 整数型, "kernel32.dll", "lstrcpyn"
    .参数 目标, TCITEM, 传址
    .参数 源, TCITEM, 传址
    .参数 长度, 整数型

.DLL命令 _取变量地址_TVITEMEX2, 整数型, "kernel32.dll", "lstrcpyn"
    .参数 目标, TVITEMEX2, 传址
    .参数 源, TVITEMEX2, 传址
    .参数 长度, 整数型

.DLL命令 _取变量地址_TVINSERTSTRUCT2, 整数型, "kernel32.dll", "lstrcpyn"
    .参数 目标, TVINSERTSTRUCT2, 传址
    .参数 源, TVINSERTSTRUCT2, 传址
    .参数 长度, 整数型

.DLL命令 CreateFontIndirectA, 整数型, "gdi32.dll", "CreateFontIndirectA", 公开, gdi32.dll用指定的属性创建一种逻辑字体　执行成功则返回逻辑字体句柄，零表示失败
    .参数 字体结构信息, LOGFONT, , LOGFONT，这个结构定义了逻辑字体请求的属性;  

.DLL命令 OpenThread, 整数型, "kernel32.dll", "OpenThread", 公开, 打开线程
    .参数 dwDesiredAccess, 整数型, , 2032639
    .参数 bInheritHandle, 整数型, , 0
    .参数 线程ID, 整数型, , 线程ID

.DLL命令 CreateDCA, 整数型, "gdi32.dll", "CreateDCA", 公开, _创建场景
    .参数 lpDriverName, 文本型
    .参数 lpDeviceName, 文本型
    .参数 lpOutput, 文本型
    .参数 lpInitData, 整数型

.DLL命令 lpRect, 整数型, "user32.dll", "IsRectEmpty", 公开, _矩形是否为空
    .参数 lpRect, 精易_矩形

.DLL命令 PatBlt, , "gdi32.dll", "PatBlt", 公开, _填充设备场景
    .参数 hdc, 整数型
    .参数 x, 整数型
    .参数 y, 整数型
    .参数 nWidth, 整数型
    .参数 nHeight, 整数型
    .参数 dwRop, 整数型

.DLL命令 GetDlgCtrlID, 整数型, "user32.dll", "GetDlgCtrlID", 公开
    .参数 hwnd, 整数型

.DLL命令 GetDlgItem, 整数型, "user32.dll", "GetDlgItem", 公开, 控件ID取窗口句柄
    .参数 父句柄, 整数型
    .参数 欲取句柄的控件ID, 整数型

.DLL命令 CoInitialize, 整数型, "ole32.dll", "CoInitialize", 公开, 加载COM
    .参数 pvReserved, 整数型, , 值为0

.DLL命令 CoUninitialize, , "ole32.dll", "CoUninitialize", 公开, 卸载COM

.DLL命令 WinExec, 整数型, "kernel32.dll", "WinExec", 公开, _服务
    .参数 lpCmdLine, 文本型
    .参数 nCmdShow, 整数型

.DLL命令 OpenSCManagerA, 整数型, "advapi32.dll", "OpenSCManagerA", 公开
    .参数 lpMachineName, 整数型
    .参数 lpDatabaseName, 整数型
    .参数 dwDesiredAccess, 整数型

.DLL命令 OpenService, 整数型, "Advapi32.dll", "OpenServiceA", 公开
    .参数 hSCManager, 整数型
    .参数 lpServiceName, 文本型
    .参数 dwDesiredAccess, 整数型

.DLL命令 ControlService, 逻辑型, "advapi32.dll", "ControlService", 公开
    .参数 hService, 整数型
    .参数 dwControl, 整数型
    .参数 lpServiceStatus, SERVICE_STATUS

.DLL命令 DeleteService, 逻辑型, "advapi32.dll", "DeleteService", 公开, ,
    .参数 hService, 整数型

.DLL命令 CloseServiceHandle, 整数型, "advapi32.dll", "CloseServiceHandle", 公开, ,
    .参数 hSCObject, 整数型

.DLL命令 StartService, 逻辑型, "advapi32.dll", "StartServiceA", 公开
    .参数 hService, 整数型
    .参数 dwNumServiceArgs, 整数型
    .参数 lpServiceArgVectors, 整数型

.DLL命令 QueryServiceStatus, 逻辑型, "advapi32.dll", "QueryServiceStatus", 公开, 4：启动　7：暂停　1：停止　0：找不到服务
    .参数 hService, 整数型
    .参数 lpServiceStatus, SERVICE_STATUS

.DLL命令 QueryServiceStatusEx, 整数型, "ADVAPI32.DLL", "QueryServiceStatusEx", 公开
    .参数 hService, 整数型
    .参数 InfoLevel, 整数型
    .参数 lpBuffer, 字节集
    .参数 cbBufSize, 整数型
    .参数 pcbBytesNeeded, 整数型, 传址

.DLL命令 ChangeServiceConfig, 逻辑型, "advapi32.dll", "ChangeServiceConfigA", 公开, 更改服务配置
    .参数 hService, 整数型
    .参数 dwServiceType, 整数型
    .参数 dwStartType, 整数型
    .参数 dwErrorControl, 整数型, , 误差控制
    .参数 lpBinaryPathName, 文本型, , 加载顺序组名称
    .参数 lpLoadOrderGroup, 文本型
    .参数 lpdwTagId, 整数型, , 标签标识
    .参数 lpDependencies, 文本型, , 依赖名称阵列
    .参数 lpServiceStartName, 文本型, , 帐户名称
    .参数 lpPassword, 文本型, , 帐户密码
    .参数 lpDisplayName, 文本型, , 显示名称

.DLL命令 CreateService, 整数型, "advapi32.dll", "CreateServiceA", 公开, 服务类
    .参数 hSCManager, 整数型
    .参数 lpServiceName, 文本型
    .参数 lpDisplayName, 文本型
    .参数 dwDesiredAccess, 整数型
    .参数 dwServiceType, 整数型
    .参数 dwStartType, 整数型
    .参数 dwErrorControl, 整数型
    .参数 lpBinaryPathName, 文本型
    .参数 lpLoadOrderGroup, 文本型
    .参数 lpdwTagId, 整数型
    .参数 lpDependencies, 文本型
    .参数 lpServiceStartName, 文本型
    .参数 lpPassword, 文本型

.DLL命令 QueryServiceConfig2, 逻辑型, "Advapi32.dll", "QueryServiceConfig2A", 公开
    .参数 hService, 整数型, , SC_HANDLE
    .参数 dwInfoLevel, 整数型
    .参数 lpBuffer
    .参数 cbBufSize, 整数型
    .参数 pcbBytesNeeded, 整数型, 传址

.DLL命令 UnlockServiceDatabase, 整数型, "advapi32.dll", "UnlockServiceDatabase", 公开, 开锁数据库
    .参数 ScLock, 整数型

.DLL命令 QueryServiceConfig2A_字节, 逻辑型, "Advapi32.dll", "QueryServiceConfig2A", 公开
    .参数 hService, 整数型, , SC_HANDLE
    .参数 dwInfoLevel, 整数型
    .参数 lpBuffer, 字节集, 传址
    .参数 cbBufSize, 整数型
    .参数 pcbBytesNeeded, 整数型, 传址

.DLL命令 ZwQuerySystemInformation, 整数型, "ntdll.dll", "ZwQuerySystemInformation", 公开, _进程隐藏 ntdll.dll
    .参数 SystemInformationClass, 整数型, , 未知类型：SYSTEM_INFORMATION_CLASS。
    .参数 SystemInformation, 整数型, , any
    .参数 SystemInformationLength, 整数型
    .参数 ReturnLength, 整数型, 传址

.DLL命令 CreateRemoteThread, 整数型, "kernel32.dll", "CreateRemoteThread", 公开, 在另一进程中建立线索　
    .参数 hProcess, 整数型
    .参数 lpThreadAttributes, 整数型
    .参数 dwStackSize, 整数型
    .参数 lpStartAddress, 整数型
    .参数 lpParameter, 整数型
    .参数 dwCreationFlags, 整数型
    .参数 lpThreadId, 整数型

.DLL命令 GetExitCodeThread, 整数型, "kernel32.dll", "GetExitCodeThread", 公开, _取中止线程退出代码
    .参数 线程句柄, 整数型
    .参数 退出代码, 整数型, 传址

.DLL命令 InternetGetConnectedStateExA, 逻辑型, "wininet.dll", "InternetGetConnectedStateExA", 公开, _取网络连接状态
    .参数 标志, 整数型, 传址, lpdwFlags
    .参数 连接名称, 文本型, , lpszConnectionName
    .参数 名称长度, 整数型, , dwNameLen
    .参数 保留参数, 整数型, , dwReserved

.DLL命令 原子递增变量, 整数型, "kernel32.dll", "InterlockedIncrement", 公开, _递增变量值
    .参数 递增变量, 整数型, 传址

.DLL命令 原子递减变量, 整数型, "kernel32.dll", "InterlockedDecrement", 公开, _递减变量值
    .参数 递减的一个变量, 整数型, 传址

.DLL命令 DragFinish, 整数型, "shell32.dll", "DragFinish", 公开, 释放文件拖放 释放分配用于托动文件的内容
    .参数 hDrop, 整数型

.DLL命令 DragAcceptFiles, , "shell32.dll", "DragAcceptFiles", 公开, 注册拖放类 登记窗口是否接受托动文件的内容
    .参数 hWnd, 整数型, , 对象句柄
    .参数 fAccept, 整数型, , 是否打开

.DLL命令 RegCloseKey, 整数型, "advapi32.dll", "RegCloseKey", 公开, _注册表_关闭项 advapi32.dll关闭系统注册表中的一个项（或键）  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 要关闭的项;

.DLL命令 RegCreateKeyA, 整数型, "advapi32.dll", "RegCreateKeyA", 公开, _注册表_创建项 advapi32.dll在指定的项下创建一个新项。如指定的项已经存在，那么函数会打开现有的项  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 要打开项的句柄，或者一个标准项名
    .参数 lpSubKey, 文本型, , 欲创建的新子项。可同时创建多个项，只需用反斜杠将它们分隔开即可。例如level1\level2\newkey
    .参数 phkResult, 整数型, 传址, 指定一个变量，用于装载新子项的句柄;

.DLL命令 RegDeleteValueA, 整数型, "advapi32.dll", "RegDeleteValueA", , _注册表_删除值删除指定项下方的一个值  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或标准项名之一
    .参数 lpValueName, 文本型, , 要删除的值名。可设为vbNull或一个空串，表示删除那个项的默认值;

.DLL命令 RegFlushKey, 整数型, "advapi32.dll", "RegFlushKey", , _注册表_实际写入将对项和它的子项作出的改动实际写入磁盘 Long，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , Long，欲刷新的一个项的句柄，或指定一个标准项名

.DLL命令 RegQueryValueExA, 整数型, "advapi32.dll", "RegQueryValueExA", 公开, _注册表_取值获取一个项的设置值  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 lpValueName, 文本型, , 要获取值的名字
    .参数 lpReserved, 整数型, , 未用，设为零
    .参数 lpType, 整数型, 传址, 用于装载取回数据类型的一个变量
    .参数 lpData, 字节集, 传址, 用于装载指定值的一个缓冲区
    .参数 lpcbData, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际装载到缓冲区的字节数;

.DLL命令 RegOpenCurrentUser, 整数型, "advapi32.dll", "RegOpenCurrentUser", 公开
    .参数 samDesired, 整数型
    .参数 phkResult, 整数型, 传址

.DLL命令 RegEnumValueA, 整数型, "advapi32.dll", "RegEnumValueA", 公开, _注册表_枚举值 零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 句柄, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 表项索引, 整数型, , 欲获取值的索引。注意第一个值的索引编号为零
    .参数 子键名, 文本型, , 用于装载位于指定索引处值名的一个缓冲区
    .参数 子键长度, 整数型, 传址, 用于装载lpValueName缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量
    .参数 lpReserved, 整数型, , 未用设为零
    .参数 键值类型, 整数型, 传址, 值的类型，用于装载值的类型代码的变量
    .参数 键值数据, 字节集, 传址, 用于装载值数据的一个缓冲区
    .参数 键值缓寸, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量

.DLL命令 API_RegEnumKey, 整数型, "advapi32.dll", "RegEnumKeyA", , 枚举指定项的子项。在Win32环境中应使用RegEnumKeyEx  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 dwIndex, 整数型, , 欲获取的子项的索引。第一个子项的索引编号为零
    .参数 lpName, 文本型, , 用于装载指定索引处项名的一个缓冲区
    .参数 cbName, 整数型, , lpName缓冲区的长度;

.DLL命令 RegEnumKeyA, 整数型, "advapi32.dll", "RegEnumKeyA", 公开, _注册表_枚举子项
    .参数 hKey, 整数型
    .参数 dwIndex, 整数型
    .参数 lpName, 文本型, 传址
    .参数 cbName, 整数型

.DLL命令 RegDeleteKeyA, 整数型, "advapi32.dll", "RegDeleteKeyA", 公开, _注册表_删除项删除现有项下方一个指定的子项  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或者标准项名之一
    .参数 lpSubKey, 文本型, , 要删除项的名字。这个项的所有子项也会删除;

.DLL命令 RegOpenKeyA, 整数型, "advapi32.dll", "RegOpenKeyA", 公开, _注册表_打开项 打开一个现有的注册表项  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或指定一个标准项名
    .参数 lpSubKey, 文本型, , 要打开的项名
    .参数 phkResult, 整数型, 传址, 指定一个变量，用于装载（保存）打开注册表项的一个句柄;

.DLL命令 RegSetValueExA, 整数型, "advapi32.dll", "RegSetValueExA", 公开, _注册表_置值设置指定项的值  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或指定一个标准项名
    .参数 lpValueName, 文本型, , 要设置值的名字
    .参数 Reserved, 整数型, , 未用，设为零
    .参数 dwType, 整数型, , 要设置的数量类型
    .参数 lpData, 字节集, , 包含数据的缓冲区中的第一个字节
    .参数 cbData, 整数型, , lpData缓冲区的长度;

.DLL命令 RegSetValueExA_数值, 整数型, "advapi32.dll", "RegSetValueExA", 公开, _注册表_置值_文本型 设置指定项的值  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或指定一个标准项名
    .参数 lpValueName, 文本型, , 要设置值的名字
    .参数 Reserved, 整数型, , 未用，设为零
    .参数 dwType, 整数型, , 要设置的数量类型
    .参数 lpData, 字节集, , 包含数据的缓冲区中的第一个字节
    .参数 cbData, 整数型, , lpData缓冲区的长度;

.DLL命令 RasDialA, 整数型, "rasapi32.dll", "RasDialA", 公开, _ADSL拨号
    .参数 lprasdialextensions, 整数型, , 拔号参数
    .参数 lpszPhonebook, 整数型, , 电话本名称,0
    .参数 lprasdialparamsa, ADSL拨号0, , 拔号参数
    .参数 dwNotifierType, 整数型, , 消息通知方式
    .参数 lpvNotifier, 整数型, , 消息处理回调子程序
    .参数 lphrasconn, 整数型, 传址, 返回的成功连接的连接句柄

.DLL命令 RasHangUpA, 整数型, "rasapi32.dll", "RasHangUpA", 公开, RasApi32.DLL挂断当前拔号连接 0表示成功
    .参数 hRasConn, 整数型, , 连接句柄

.DLL命令 RasGetEntryDialParams, 整数型, "rasapi32.dll", "RasGetEntryDialParamsA", 公开
    .参数 lpszPhoneBook, 文本型, 传址
    .参数 lpDialParams, ADSL拨号0, 传址, 未知类型：TRasDialParams。
    .参数 lpfPassword, 逻辑型, 传址

.DLL命令 GlobalSize_RASDIALPARAMS, 整数型, "kernel32.dll", "GlobalSize", , 取结构尺寸
    .参数 结构, ADSL拨号0, 传址

.DLL命令 GlobalSize_取连接信息用结构, 整数型, "kernel32.dll", "GlobalSize", 公开, kernel32.dll取结构尺寸
    .参数 结构, 取连接信息用结构, 传址

.DLL命令 GetPrivateProfileInt, 整数型, "kernel32.dll", "GetPrivateProfileIntA", 公开, 读配置项数值
    .参数 小节名, 字节集
    .参数 项目名, 文本型
    .参数 默认返回值, 整数型
    .参数 文件名, 文本型, ,   

.DLL命令 ConvertSidToStringSid, 整数型, "ADVAPI32.DLL", "ConvertSidToStringSidW", 公开, 　
    .参数 Sid, 字节集, 传址
    .参数 StringSid, 整数型, 传址

.DLL命令 IsValidSid, 整数型, "advapi32.dll", "IsValidSid", 公开, 使SID有效　
    .参数 pSid, 整数型

.DLL命令 LookupAccountName, 整数型, "advapi32.dll", "LookupAccountNameA", 公开, 把帐户名转为SID　
    .参数 lpSystemName, 文本型, 传址
    .参数 lpAccountName, 文本型
    .参数 Sid, 字节集, 传址
    .参数 cbSid, 整数型, 传址
    .参数 ReferencedDomainName, 文本型
    .参数 cbReferencedDomainName, 整数型, 传址
    .参数 peUse, 整数型, 传址

.DLL命令 LsaOpenPolicy, 整数型, "ADVAPI32.DLL", "LsaOpenPolicy", 公开
    .参数 SystemName, 整数型, , 未知类型：PLSA_UNICODE_STRING。
    .参数 ObjectAttributes, LSA_OBJECT_ATTRIBUTES, , 未知类型：PLSA_OBJECT_ATTRIBUTES。
    .参数 DesiredAccess, 整数型
    .参数 PolicyHandle, 整数型, 传址, 未知类型：PLongWord。

.DLL命令 RasEnumEntrie, 整数型, "rasapi32.dll", "RasEnumEntriesA", 公开
    .参数 reserved, 整数型
    .参数 lpszPhoneBook, 整数型
    .参数 entrynamesArray, 取连接信息用结构, 传址, 未知类型：LPRasEntryNameA。
    .参数 lpcb, 整数型, 传址
    .参数 lpcEntries, 整数型, 传址

.DLL命令 RasEnumEntries, 整数型, "rasapi32.dll", "RasEnumEntriesA", 公开, rasapi32.dll 取连接信息结构,连接名称,数量等等
    .参数 lpStrNull, 整数型, , 保留字段,必须为NIL
    .参数 lpszphonebook, 整数型, , 电话本名称,在Win9X下无作用
    .参数 lprasetryname, 取连接信息用结构, 传址 数组, RASENTRYNAME类型数组的指针
    .参数 lpcb, 整数型, 传址, 接收拨号连接名称的缓冲区的大小
    .参数 lpcentries, 整数型, 传址, 实际获得的拨号连接名称的数目

.DLL命令 InternetGetConnectedStateEx, 整数型, "wininet.dll", "InternetGetConnectedStateEx", 公开, _取连接状态 wininet.dll
    .参数 lpdwFlags, 整数型, 传址
    .参数 lpszConnectionName, 文本型, 传址
    .参数 dwNameLen, 整数型
    .参数 dwReserved, 整数型

.DLL命令 RasSetEntryPropertiesA, 整数型, "rasapi32.dll", "RasSetEntryPropertiesA", 公开, _创建新拨号连接 rasapi32.dll 0=建立成功,其他为失败
    .参数 lpszPhonebook, 整数型, , 电话本名称,0
    .参数 lpszEntry, 文本型, , 连接名称
    .参数 lpRasEntry, 创建连接所用结构
    .参数 dwEntryInfoSize, 整数型
    .参数 lpbDeviceInfo, 整数型
    .参数 wDeviceInfoSize, 整数型

.DLL命令 RasSetCredentialsA, 整数型, "rasapi32.dll", "RasSetCredentialsA", 公开, _设置拨号连接 rasapi32.dll
    .参数 lpszPhonebook, 整数型, , 电话本名称,0
    .参数 lpszEntry, 文本型, , 连接名称
    .参数 lpCredentials, 设置拨号所以结构
    .参数 fClearCredentials, 整数型

.DLL命令 GetKeyState, 逻辑型, "user32.dll", "GetKeyState", 公开, _取键盘状态 针对已处理过的按键，在最近一次输入信息时，判断指定虚拟键的状态  如开关键打开，则位0设为1（开关键包括CapsLock， ;    NumLock，ScrollLock）；如某个键当时正处于按下状态，则位15为1；如已经抬起，则为0
    .参数 键代码, 整数型, , 欲测试的虚拟键键码。对字母、数字字符（A-Z、a-z、0-9），用它们实际的ASCII值;

.DLL命令 GetKeyState_EX, 整数型, "user32.dll", "GetKeyState", 公开, _取键盘状态 针对已处理过的按键，在最近一次输入信息时，判断指定虚拟键的状态  如开关键打开，则位0设为1（开关键包括CapsLock， ;    NumLock，ScrollLock）；如某个键当时正处于按下状态，则位15为1；如已经抬起，则为0
    .参数 键代码, 整数型, , 欲测试的虚拟键键码。对字母、数字字符（A-Z、a-z、0-9），用它们实际的ASCII值;

.DLL命令 GetOpenFileNamePreview, 逻辑型, "msvfw32.dll", "GetOpenFileNamePreview", , 系统_多文件对话框
    .参数 格式, OPENFILENAME

.DLL命令 GetSaveFileNamePreview, 逻辑型, "msvfw32.dll", "GetSaveFileNamePreviewA", , 对话框_保存文件
    .参数 格式, OPENFILENAME

.DLL命令 GetOpenFileNameA, 逻辑型, "Comdlg32.dll", "GetOpenFileNameA", 公开, _打开文件对话框
    .参数 结构, OPENFILENAME

.DLL命令 GetSaveFileNameA, 逻辑型, "Comdlg32.dll", "GetSaveFileNameA", 公开, _另存文件对话框
    .参数 结构, OPENFILENAME

.DLL命令 ExtractIconA, 整数型, "shell32.dll", "ExtractIconA", 公开, _图标取数量
    .参数 实例句柄, 整数型, , 可为0
    .参数 程序的全名, 文本型
    .参数 图标的索引, 整数型, , 欲获取的图标的索引。如果为-1，表示取得文件中的图标总数

.DLL命令 SHAutoComplete, , "Shlwapi.dll", "SHAutoComplete", 公开
    .参数 编辑框句柄, 整数型
    .参数 表示IE历史, 整数型

.DLL命令 GetShortPathNameA, 整数型, "kernel32.dll", "GetShortPathNameA", 公开, 取短文件名
    .参数 lpszLongPath, 文本型, 传址
    .参数 lpszShortPath, 文本型, 传址
    .参数 cchBuffer, 整数型

.DLL命令 GetShortPathNameW, 整数型, "kernel32", "GetShortPathNameW"
    .参数 lpszLongPath, 字节集
    .参数 lpszShortPath, 字节集
    .参数 cchBuffer, 整数型

.DLL命令 GetLongPathNameA, 整数型, "kernel32.dll", "GetLongPathNameA", 公开, 取长文件名
    .参数 lpszShortPath, 文本型, 传址
    .参数 lpszLongPath, 文本型, 传址
    .参数 cchBuffer, 整数型

.DLL命令 GetAdaptersInfo_字节集, 整数型, "IPHlpApi.dll", "GetAdaptersInfo"
    .参数 IpAdapterInfo, 字节集
    .参数 pOutBufLen, 整数型, 传址

.DLL命令 GetAdaptersInfo, 整数型, "IPHlpApi.dll", "GetAdaptersInfo", 公开
    .参数 IpAdapterInfo, 整数型
    .参数 pOutBufLen, 整数型, 传址

.DLL命令 CopyMemory_ip_adapter_info, 整数型, "kernel32.dll", "RtlMoveMemory", 公开
    .参数 Destination, IP_ADAPTER_INFO
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 CopyMemory_ias, , "kernel32.dll", "RtlMoveMemory", 公开
    .参数 Destination, IP_ADDR_STRING, 传址
    .参数 Source, IP_ADDR_STRING
    .参数 Length, 整数型

.DLL命令 ImageList_Read, 整数型, "comctl32.dll", "ImageList_Read", 公开, 成功返回图片组句柄
    .参数 pstm, 整数型

.DLL命令 ImageList_Write, 逻辑型, "comctl32.dll", "ImageList_Write", 公开, 成功返回真,失败返回假
    .参数 图片组句柄, 整数型, , 图片组句柄
    .参数 pstm, 整数型

.DLL命令 ImageList_Replace, 整数型, "comctl32.dll", "ImageList_Replace", 公开
    .参数 图片组句柄, 整数型
    .参数 i, 整数型
    .参数 hbmImage, 整数型
    .参数 hbmMask, 整数型

.DLL命令 ImageList_ReplaceIcon, 整数型, "comctl32.dll", "ImageList_ReplaceIcon", 公开
    .参数 图片组句柄, 整数型, , ImageList_Create创建成功后的返回值
    .参数 位置, 整数型, , 索引从0开始
    .参数 图标句柄, 整数型

.DLL命令 ImageList_AddIcon, 整数型, "comctl32.dll", "ImageList_AddIcon", 公开, 添加图标到图片组
    .参数 图片组句柄, 整数型
    .参数 ico句柄, 整数型

.DLL命令 ImageList_Add, 整数型, "comctl32.dll", "ImageList_Add", 公开
    .参数 图标列表句柄, 整数型
    .参数 位图句柄, 整数型
    .参数 掩码位位图句柄, 整数型

.DLL命令 ImageList_SetBkColor, 逻辑型, "comctl32.dll", "ImageList_SetBkColor", 公开, 设置图片组背景颜色
    .参数 图片组句柄, 整数型
    .参数 欲设置的颜色, 整数型, , 其它选项可使用 CLR_开头的常量

.DLL命令 ImageList_GetBkColor, 整数型, "comctl32.dll", "ImageList_GetBkColor", 公开, 返回图片组背景颜色
    .参数 图片组句柄, 整数型

.DLL命令 ImageList_SetIconSize, 逻辑型, "comctl32.dll", "ImageList_SetIconSize", 公开, 设置图片组图标大小
    .参数 图片组句柄, 整数型, , 图片组句柄,ImageList_Create创建成功后的返回值
    .参数 宽度, 整数型, 传址
    .参数 高度, 整数型, 传址

.DLL命令 ImageList_SetImageCount, 逻辑型, "comctl32.dll", "ImageList_SetImageCount", 公开, 设置图片组图片数
    .参数 图片组句柄, 整数型, , ImageList_Create创建成功后的返回值
    .参数 欲设置的图片数, 整数型

.DLL命令 ImageList_GetImageCount, 整数型, "comctl32.dll", "ImageList_GetImageCount", 公开, 取图片组图片数
    .参数 图片组句柄, 整数型, , 图片组句柄,ImageList_Create创建成功后的返回值

.DLL命令 ImageList_GetIconSize, 逻辑型, "comctl32.dll", "ImageList_GetIconSize", 公开, 取图片组图标大小
    .参数 图片组句柄, 整数型, , ImageList_Create创建成功后的返回值
    .参数 宽度, 整数型, 传址
    .参数 高度, 整数型, 传址

.DLL命令 ImageList_Remove, 逻辑型, "comctl32.dll", "ImageList_Remove", 公开, 删除指定图片组图片
    .参数 图片组句柄, 整数型, , 图片组句柄,ImageList_Create创建成功后的返回值
    .参数 位置, 整数型, , 位置0为第一个,如果本参数设置为-1表示删除图片组所有图标

.DLL命令 ImageList_Create, 整数型, "comctl32.dll", "ImageList_Create", 公开, 创建图片组,返回图片组句柄
    .参数 宽度, 整数型
    .参数 高度, 整数型
    .参数 位深, 整数型
    .参数 初始数量, 整数型
    .参数 是否手动销毁, 整数型

.DLL命令 ImageList_Destroy, 整数型, "comctl32.dll", "ImageList_Destroy", 公开, 销毁图片组
    .参数 图片组句柄, 整数型, , ImageList_Create创建成功后的返回值

.DLL命令 SetWindowLongA, 整数型, "user32.dll", "SetWindowLongA", 公开, 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 句柄
    .参数 nIndex, 整数型, , -16=样式，-20=扩展样式
    .参数 dwNewLong, 整数型, , 新样式

.DLL命令 SetWindowLongW, 整数型, "user32.dll", "SetWindowLongW", 公开
    .参数 hWnd, 整数型
    .参数 nIndex, 整数型
    .参数 dwNewLong, 整数型

.DLL命令 GetCommandLineA, 文本型, "kernel32.dll", "GetCommandLineA", 公开, 取命令行

.DLL命令 LsaRetrievePrivateData, 整数型, "ADVAPI32.DLL", "LsaRetrievePrivateData", 公开
    .参数 LSA_HANDLE, 整数型
    .参数 KeyName, LSA_UNICODE_STRING, , 未知类型：PLSA_UNICODE_STRING。
    .参数 PrivateData, 整数型, 传址, 未知类型：PLSA_UNICODE_STRING。

.DLL命令 RtlMoveMemory_LSA_UNICODE_STRING, , "kernel32.dll", "RtlMoveMemory", , 复制内存数据_MIB_IPFORWARDROW参数
    .参数 Destination, LSA_UNICODE_STRING, 传址, 目标地址
    .参数 Source, 字节集, , 要复制的数据MIB_IPFORWARDROW
    .参数 Length, 整数型, , 长度

.DLL命令 GetVersionEx, 逻辑型, "kernel32.dll", "GetVersionExA", 公开, 在一个OSVERSIONINFO结构中载入与平台和操作系统有关的版本信息  非零表示成功，零表示失败
    .参数 版本, OSVERSIONINFOEX, , OSVERSIONINFO，用于装载版本信息的结构。在正式调用函数之前，必须先将这个结构的dwOSVersionInfoSize字段设为结构的大小（148）;

.DLL命令 GetVersion, 整数型, "kernel32.dll", "GetVersion", 公开, ,

.DLL命令 GlobalSize_RASENTRY, 整数型, "kernel32.dll", "GlobalSize", 公开, 取结构尺寸
    .参数 结构, RasEntry, 传址

.DLL命令 RasGetEntryProperties, 整数型, "rasapi32.dll", "RasGetEntryPropertiesA", , 　
    .参数 lpcstr, 文本型
    .参数 lpcstr, 字节型, 传址 数组
    .参数 TLPRASENTRYA, RasEntry
    .参数 lpdword, 整数型, 传址
    .参数 lpbyte, 文本型
    .参数 lpdword, 整数型

.DLL命令 IsBadStringPtrA, 整数型, "kernel32.dll", "IsBadStringPtrA", 公开, 指针是否有效,无否返回1
    .参数 指针, 整数型
    .参数 ucchMax, 整数型, , 指针长度

.DLL命令 GetLastError, 整数型, "kernel32.dll", "GetLastError", 公开, 取错误信息

.DLL命令 QueryServiceConfig_字节, 整数型, "advapi32.dll", "QueryServiceConfigA", 公开, 函数检索指定服务的配置参数。使用QueryServiceConfig2功能，可选的配置参数都是可用
    .参数 hService, 整数型
    .参数 lpServiceConfig, 字节集, 传址
    .参数 cbBufSize, 整数型
    .参数 pcbBytesNeeded, 整数型, 传址

.DLL命令 QueryServiceConfig, 逻辑型, "advapi32.dll", "QueryServiceConfigA", 公开, 函数检索指定服务的配置参数。使用QueryServiceConfig2功能，可选的配置参数都是可用
    .参数 hService, 整数型
    .参数 lpServiceConfig
    .参数 cbBufSize, 整数型
    .参数 pcbBytesNeeded, 整数型, 传址

.DLL命令 GetServiceKeyName, 逻辑型, "advapi32.dll", "GetServiceKeyNameA", 公开, 通过显示名称取服务名称
    .参数 hSCManager, 整数型
    .参数 lpDisplayName, 文本型
    .参数 lpServiceName, 文本型
    .参数 lpcchBuffer, 整数型, 传址

.DLL命令 GetServiceDisplayName, 逻辑型, "advapi32.dll", "GetServiceDisplayNameA", 公开, 通过服务名称取显示名称
    .参数 hSCManager, 整数型
    .参数 lpServiceName, 文本型
    .参数 lpDisplayName, 文本型
    .参数 lpcchBuffer, 整数型, 传址

.DLL命令 LockServiceDatabase, 整数型, "advapi32.dll", "LockServiceDatabase", 公开
    .参数 hSCManager, 整数型

.DLL命令 ChangeServiceConfig2A, 逻辑型, "ADVAPI32.DLL", "ChangeServiceConfig2A", 公开
    .参数 hService, 整数型
    .参数 dwInfoLevel, 整数型
    .参数 lpInfo, , 传址

.DLL命令 StartServiceCtrlDispatcher, 整数型, "advapi32.dll", "StartServiceCtrlDispatcherA", 公开
    .参数 SERVICE_TABLE, SERVICE_Table, 数组

.DLL命令 RegisterServiceCtrlHandler, 整数型, "advapi32.dll", "RegisterServiceCtrlHandlerA", 公开
    .参数 lpServiceName, 文本型
    .参数 lpHandlerProc, 整数型

.DLL命令 SetServiceStatus, 整数型, "advapi32.dll", "SetServiceStatus", 公开
    .参数 hServiceStatus, 整数型
    .参数 lpServiceStatus, SERVICE_STATUS

.DLL命令 GdipLoadImageFromStream, 整数型, "GdiPlus.dll", "GdipLoadImageFromStream", 公开
    .参数 stream, 整数型
    .参数 image, 整数型, 传址

.DLL命令 GdipGetImageDimension, 整数型, "GdiPlus.dll", "GdipGetImageDimension", 公开
    .参数 image, 整数型
    .参数 width, 小数型, 传址
    .参数 height, 小数型, 传址

.DLL命令 GdipCreateFromHDC, 整数型, "GdiPlus.dll", "GdipCreateFromHDC", 公开
    .参数 hdc, 整数型
    .参数 graphics, 整数型, 传址

.DLL命令 GdipDrawImageRect, 整数型, "GdiPlus.dll", "GdipDrawImageRect", 公开
    .参数 graphics, 整数型
    .参数 image, 整数型
    .参数 x, 小数型
    .参数 y, 小数型
    .参数 width, 小数型
    .参数 height, 小数型

.DLL命令 GdipGetImageThumbnail, 整数型, "gdiplus.dll", "GdipGetImageThumbnail", 公开
    .参数 Image, 整数型
    .参数 thumbWidth, 整数型
    .参数 thumbHeight, 整数型
    .参数 thumbImage, 整数型, 传址
    .参数 callback, 整数型
    .参数 callbackData, 整数型

.DLL命令 GdipDisposeImage, 整数型, "gdiplus.dll", "GdipDisposeImage", 公开
    .参数 image, 整数型

.DLL命令 GdipDeleteGraphics, 整数型, "GdiPlus.dll", "GdipDeleteGraphics", 公开
    .参数 graphics, 整数型

.DLL命令 UpdateLayeredWindow, 整数型, "user32.dll", "UpdateLayeredWindow", 公开
    .参数 hWnd, 整数型
    .参数 hdcDst, 整数型
    .参数 pptDst, 整数型
    .参数 psize, Size
    .参数 hdcSrc, 整数型
    .参数 pptSrc, 精易_坐标
    .参数 crKey, 整数型
    .参数 pblend, BLENDFUNCTION
    .参数 dwFlags, 整数型

.DLL命令 RAROpenArchiveEx, 整数型, "unrar.dll", "RAROpenArchiveEx", , 打开 RAR 档案并分配内存结构，可指定 Unicode 档案名并可获取档案标志信息，返回档案打开句柄，失败返回 0
    .参数 ArchiveData, RAROpenArchiveDataEx, 传址, 打开数据结构

.DLL命令 RARSetPassword, , "unrar.dll", "RARSetPassword", , 为加密文件设置密码，无返回值
    .参数 hArcData, 整数型, , 档案打开句柄
    .参数 Password, 文本型, , 密码文本

.DLL命令 RARReadHeader, 整数型, "unrar.dll", "RARReadHeader", , 读取档案文件头，返回 0 表示成功，其他返回 ERAR_END_ARCHIVE/ERAR_BAD_DATA
    .参数 hArcData, 整数型, , 档案打开句柄
    .参数 HeaderData, RARHeaderData, 传址, 文件头数据结构

.DLL命令 RARSetCallback, , "unrar.dll", "RARSetCallback", , 设置用户定义的回调函数来处理事件，无返回值
    .参数 hArcData, 整数型, , 档案打开句柄
    .参数 CallbackProc, 子程序指针, , 回调函数指针，注意回调函数中不可使用其他 UnRAR.dll 函数
    .参数 UserData, 整数型, , 传递到回调函数的用户定义数据

.DLL命令 RARProcessFile, 整数型, "unrar.dll", "RARProcessFile", , 提取、测试并移动档案中文件位置到下一位置，实际操作要根据打开方式和指定参数决定。返回值: 0 表示成功, 失败参见 ERAR_* 错误码(仅 12-19)
    .参数 hArcData, 整数型, , 档案打开句柄
    .参数 Operation, 整数型, , 文件操作方式（RAR_SKIP/RAR_TEST/RAR_EXTRACT）
    .参数 DestPath, 文本型, , 文件提取的目标目录，留空表示提取到当前目录。该参数仅在 DestName 参数为空时有效。
    .参数 DestName, 文本型, , 文件提取的完整路径和提取文件的名称，留空则使用默认文件名。不为空则以指定名称提取档案中的文件。

.DLL命令 RARCloseArchive, 整数型, "unrar.dll", "RARCloseArchive", , 档案处理完毕后调用该函数，关闭档案文件并释放内存。成功返回 0，失败返回 ERAR_ECLOSE。
    .参数 hArcData, 整数型, , 档案打开句柄

.DLL命令 SQLAllocHandle, 短整数型, "odbc32.dll", "SQLAllocHandle"
    .参数 hType, 短整数型, , SQL_HANDLE_
    .参数 inputHandle, 整数型
    .参数 outputHandle, 整数型, 传址

.DLL命令 SQLSetEnvAttr, 短整数型, "odbc32.dll", "SQLSetEnvAttr"
    .参数 henv, 整数型
    .参数 attributes, 整数型
    .参数 valuePtr, 整数型
    .参数 strLength, 整数型

.DLL命令 SQLConnect, 短整数型, "odbc32.dll", "SQLConnect"
    .参数 ConnectionHandle, 整数型
    .参数 ServerName, 文本型
    .参数 NameLength1, 短整数型
    .参数 UserName, 文本型
    .参数 NameLength2, 短整数型
    .参数 Authentication, 文本型
    .参数 NameLength3, 短整数型

.DLL命令 SQLDriverConnect, 短整数型, "odbc32.dll", "SQLDriverConnect"
    .参数 Hdbc, 整数型
    .参数 WindowHandle, 整数型
    .参数 InConnectionString, 文本型, , 连接字符串
    .参数 StringLength1, 短整数型, , 连接字符串长度
    .参数 OutConnecctionString, 文本型, , 输出连接字符串缓冲区
    .参数 BufferLength, 短整数型, , 缓冲区长度
    .参数 StringLength2Ptr, 整数型, 传址, 返回实际长度
    .参数 DriverCompletion, 短整数型, , 指定函数执行的标志。其值可为：SQL_DRIVER_PROMPT:如果连接字符串未包括Driver，DSN，FileDSN关键字，系统会弹出Data Source窗口；SQL_DRIVER_COMPLETE或SQL_DRIVER_COMPLETE_REQUIRED:如果指定数据源，则应用程序使用此数据源，否则，系统弹出DataSource窗口；SQL_DRIVER_NOPROMPT:使用指定的数据源，不弹出Data Source窗口 

.DLL命令 SQLDisconnect, 短整数型, "odbc32.dll", "SQLDisconnect", , 断开连接
    .参数 Hdbc, 整数型

.DLL命令 SQLExecDirect, 短整数型, "odbc32.dll", "SQLExecDirect"
    .参数 StatementHandle, 整数型
    .参数 StatementText, 文本型
    .参数 TextLength, 整数型

.DLL命令 SQLFreeHandle, 短整数型, "odbc32.dll", "SQLFreeHandle"
    .参数 HandleType, 短整数型
    .参数 Handle, 整数型

.DLL命令 SQLGetDiagRec, 短整数型, "odbc32.dll", "SQLGetDiagRec"
    .参数 HandleType, 整数型
    .参数 Handle, 整数型
    .参数 RecNumber, 短整数型
    .参数 Sqlstate, 文本型, 传址
    .参数 NativeError, 整数型, 传址
    .参数 MessageText, 文本型, 传址
    .参数 BufferLength, 短整数型
    .参数 TextLength, 整数型, 传址

.DLL命令 SQLRowCount, 短整数型, "odbc32.dll", "SQLRowCount"
    .参数 StatementHandle, 整数型
    .参数 RowCount, 整数型, 传址

.DLL命令 SQLFetch, 短整数型, "odbc32.dll", "SQLFetch"
    .参数 StatementHandle, 整数型

.DLL命令 SQLGetData, 短整数型, "odbc32.dll", "SQLGetData"
    .参数 StatementHandle, 整数型
    .参数 ColumnNumber, 短整数型, , 列号，从1开始
    .参数 TargetType, 短整数型
    .参数 TargetValuePtr, 整数型
    .参数 BufferLength, 整数型
    .参数 StrLen_or_Ind, 整数型, 传址

.DLL命令 SQLNumResultCols, 短整数型, "odbc32.dll", "SQLNumResultCols"
    .参数 StatementHandle, 整数型
    .参数 ColumnCountPtr, 整数型, 传址

.DLL命令 SQLDescribeCol, 短整数型, "odbc32.dll", "SQLDescribeCol"
    .参数 StatementHandle, 整数型
    .参数 ColumnNumber, 短整数型
    .参数 ColumnName, 文本型
    .参数 BufferLength, 短整数型
    .参数 NameLengthPtr, 整数型, 传址
    .参数 DataTypePtr, 整数型, 传址
    .参数 ColumnSizePtr, 整数型, 传址
    .参数 DecimalDigitsPtr, 整数型, 传址
    .参数 NullablePtr, 整数型, 传址

.DLL命令 SQLSetConnectAttr, 短整数型, "odbc32.dll", "SQLSetConnectAttr"
    .参数 ConnectionHandle, 整数型
    .参数 Attribute, 整数型
    .参数 ValuePtr, 整数型
    .参数 StringLength, 整数型

.DLL命令 SQLGetConnectAttr, 短整数型, "odbc32.dll", "SQLGetConnectAttr"
    .参数 ConnectionHandle, 整数型
    .参数 Attribute, 整数型
    .参数 ValuePtr, 整数型
    .参数 BufferLength, 整数型
    .参数 StringLength, 整数型, 传址

.DLL命令 SQLBindParameter, 短整数型, "odbc32.dll", "SQLBindParameter"
    .参数 StatementHandle, 整数型
    .参数 ParameterNumber, 短整数型
    .参数 InputOutputType, 短整数型, , SQL_PARAM_INPUT，SQL_PARAM_OUTPUT ，SQL_PARAM_INPUT_OUTPUT
    .参数 ValueType, 短整数型
    .参数 ParameterType, 短整数型
    .参数 ColumnSize, 整数型
    .参数 DecimalDigits, 短整数型
    .参数 ParameterValuePtr, 字节集
    .参数 BufferLength, 整数型
    .参数 StrLen_or_IndPtr, 整数型, 传址

.DLL命令 SQLPrepare, 短整数型, "odbc32.dll", "SQLPrepare"
    .参数 StatementHandle, 整数型
    .参数 StatementText, 文本型
    .参数 TextLength, 整数型

.DLL命令 SQLExecute, 短整数型, "odbc32.dll", "SQLExecute"
    .参数 StatementHandle, 整数型

.DLL命令 SQLEndTran, 短整数型, "odbc32.dll", "SQLEndTran"
    .参数 HandleType, 短整数型
    .参数 Handle, 整数型
    .参数 CompletionType, 短整数型

.DLL命令 SQLSetStmtAttr, 短整数型, "odbc32.dll", "SQLSetStmtAttr"
    .参数 StatementHandle, 整数型
    .参数 Attribute, 整数型
    .参数 Value, 整数型
    .参数 StringLength, 整数型

.DLL命令 SQLFetchScroll, 短整数型, "odbc32.dll", "SQLFetchScroll"
    .参数 StatementHandle, 整数型
    .参数 FetchOrientation, 短整数型
    .参数 FetchOffset, 整数型

.DLL命令 SQLGetStmtAttr, 短整数型, "odbc32.dll", "SQLGetStmtAttr"
    .参数 StatementHandle, 整数型
    .参数 Attribute, 整数型
    .参数 Value, 整数型, 传址
    .参数 BufferLength, 整数型
    .参数 StringLength, 整数型, 传址

.DLL命令 SQLBindCol, 短整数型, "odbc32.dll", "SQLBindCol"
    .参数 StatementHandle, 整数型
    .参数 ColumnNumber, 短整数型
    .参数 TargetType, 短整数型
    .参数 TargetValue, 整数型
    .参数 BufferLength, 整数型
    .参数 StrLen_or_Ind, 整数型, 传址

.DLL命令 InitCompression, 整数型, "gzip.dll", "InitCompression", 公开

.DLL命令 CreateCompression, 整数型, "gzip.dll", "CreateCompression", 公开
    .参数 context, 整数型, 传址
    .参数 flags, 整数型

.DLL命令 Compress, 整数型, "gzip.dll", "Compress", 公开, 压缩
    .参数 context, 整数型
    .参数 inBytes, 字节集
    .参数 input_size, 整数型
    .参数 outBytes, 字节集
    .参数 output_size, 整数型
    .参数 input_used, 整数型, 传址
    .参数 output_used, 整数型, 传址
    .参数 compressionLevel, 整数型

.DLL命令 DestroyCompression, 整数型, "gzip.dll", "DestroyCompression", 公开
    .参数 context, 整数型

.DLL命令 InitDecompression, 整数型, "gzip.dll", "InitDecompression", 公开, gzip.dll 请自行到这里来下载http://pan.baidu.com/share/link?shareid=222122&uk=2013335237

.DLL命令 CreateDecompression, 整数型, "gzip.dll", "CreateDecompression", 公开
    .参数 context, 整数型, 传址
    .参数 flags, 整数型

.DLL命令 Decompress, 整数型, "gzip.dll", "Decompress", , 解压
    .参数 context, 整数型
    .参数 inBytes, 字节集
    .参数 input_size, 整数型
    .参数 outBytes, 字节集
    .参数 output_size, 整数型
    .参数 input_used, 整数型, 传址
    .参数 output_used, 整数型, 传址

.DLL命令 DestroyDecompression, , "gzip.dll", "DestroyDecompression", 公开
    .参数 context, 整数型

.DLL命令 lstrcpy_bin, 整数型, "kernel32.dll", "lstrcpyA", , 复制字符串
    .参数 lpString1, 字节集, 传址, 传址
    .参数 lpString2, 字节集, 传址, 传址

.DLL命令 lstrcpy_int, 整数型, "kernel32.dll", "lstrcpyA", , 复制字符串
    .参数 lpString1, 整数型, 传址, 传址
    .参数 lpString2, 整数型, 传址, 传址

.DLL命令 lstrcpy_text, 整数型, "kernel32.dll", "lstrcpyA", , 复制字符串
    .参数 lpString1, 文本型, 传址, 传址
    .参数 lpString2, 文本型, 传址, 传址

.DLL命令 RtlMoveMemory_LARGE_INTEGER, , "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, LARGE_INTEGER
    .参数 Source, 长整数型, 传址
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_LARGE_DOUBLE, , "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, LARGE_INTEGER
    .参数 Source, 双精度小数型, 传址
    .参数 Length, 整数型

.DLL命令 ShellExecuteEx, 整数型, "shell32.dll", "ShellExecuteEx", 公开, 　
    .参数 lpExecInfo, SHELLEXECUTEINFOA

.DLL命令 ShellExecuteExW, 逻辑型, "shell32.dll", "ShellExecuteExW"
    .参数 lpExecInfo, SHELLEXECUTEINFOW, , 0

.DLL命令 RegOpenKeyExA, 整数型, "advapi32.dll", "RegOpenKeyExA", 公开
    .参数 hKey, 整数型
    .参数 lpSubKey, 文本型
    .参数 ulOptions, 整数型
    .参数 samDesired, 整数型
    .参数 phkResult, 整数型, 传址

.DLL命令 RegCreateKeyExA, 整数型, "advapi32.dll", "RegCreateKeyExA", 公开
    .参数 hKey, 整数型
    .参数 lpSubKey, 文本型
    .参数 Reserved, 整数型
    .参数 lpClass, 整数型
    .参数 dwOptions, 整数型
    .参数 samDesired, 整数型
    .参数 lpSecurityAttributes, 整数型
    .参数 phkResult, 整数型, 传址
    .参数 lpdwDisposition, 整数型, 传址

.DLL命令 DrawTextA, 整数型, "user32.dll", "DrawTextA", 公开, 将文本描绘到指定的矩形中　描绘文字的高度
    .参数 HDC, 整数型, , 欲在其中显示文字的一个设备场景的句柄
    .参数 String, 文本型, , 欲描绘的文本字串
    .参数 StringCount, 整数型, , 欲描绘的字符数量。如果要描绘整个字串（直到空中止符），则可将这个参数设为-1
    .参数 rect, 精易_矩形, , RECT，指定用于绘图的一个格式化矩形（采用逻辑坐标）
    .参数 format, 整数型, , 一个标志位数组，决定了以何种形式执行绘图。参考下面总结的常数类型列表标志常数说明DT_BOTTOM必须同时指定DT_SINGLE。指示文本对齐格式化矩形的底边DT_CALCRECT象下面这样计算格式化矩形：多行绘图时矩形的底边根据需要进行延展，以便容下所有文字；单行绘图时，延展矩形的右侧。不描绘文字。由lpRect参数指定的矩形会载入计算出来的值DT_CENTER文本垂直居中DT_EXPANDTABS描绘文字的时候，对制表站进行扩展。默认的制表站间距是8个字符。但是，可用DT_TABSTOP标志改变这项设定DT_EXTERNALLEADING计算文本行高度的时候，使用当前字体的外部间距属性（the external leading attribute）DT_LEFT文本左对齐DT_NOCLIP描绘文字时不剪切到指定的矩形DT_NOPREFIX通常，函数认为 & 字符表示应为下一个字符加上下划线。该标志禁止这种行为DT_RIGHT文本右对齐DT_SINGLELINE只画单行DT_TABSTOP指定新的制表站间距，采用这个整数的高8位DT_TOP必须同时指定DT_SINGLE。指示文本对齐格式化矩形的顶部DT_VCENTER必须同时指定DT_SINGLE。指示文本对齐格式化矩形的中部DT_WORDBREAK进行自动换行。如用SetTextAlign函数设置了TA_UPDATECP标志，这里的设置则无效;

.DLL命令 FindWindowExA, 整数型, "user32.dll", "FindWindowExA", 公开, 取子窗口句柄
    .参数 hWndParent, 整数型, , 父窗口要搜索其子窗口的句柄
    .参数 hWndChildAfter, 整数型, , 子窗口的句柄
    .参数 lpszClass, 整数型, , 窗口类名
    .参数 lpszWindow, 整数型, , 窗口名称

.DLL命令 capGetDriverDescriptionA, 逻辑型, "avicap32.dll", "capGetDriverDescriptionA", 公开
    .参数 dwDriverIndex, 整数型
    .参数 lpszName, 文本型
    .参数 cbName, 整数型
    .参数 lpszVer, 文本型
    .参数 cbVer, 整数型

.DLL命令 AddFontResourceA, 整数型, "gdi32.dll", "AddFontResourceA", 公开, 在Windows系统中添加一种字体资源
    .参数 LPCSTR, 文本型

.DLL命令 RemoveFontResourceA, 逻辑型, "gdi32.dll", "RemoveFontResourceA", 公开, 通常情况下，只允许卸载由“AddFontResourceA()”安装的字体资源
    .参数 LPCSTR, 文本型

.DLL命令 RtlMoveMemory_字节集2, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, RtlMoveMemory
    .参数 目标数据地址, 字节集, , lpvDest
    .参数 源数据, 字节集, , lpvSource
    .参数 尺寸, 整数型, , cbCopy

.DLL命令 PathFileExistsA, 整数型, "shlwapi.dll", "PathFileExistsA", 公开
    .参数 pszPath, 文本型

.DLL命令 mciSendStringA, 整数型, "winmm.dll", "mciSendStringA", , 播放音乐文件
    .参数 lpstrCommand, 文本型
    .参数 lpstrRetumString, 文本型
    .参数 uReturnLength, 整数型
    .参数 hwndCallback, 整数型

.DLL命令 StrToIntEx, 整数型, "shlwapi.dll", "StrToIntExA", 公开
    .参数 pszString, 文本型
    .参数 dwFlags, 整数型
    .参数 piRet, 整数型, 传址

.DLL命令 lstrcmp, 整数型, "kernel32.dll", "lstrcmpA", 公开, 比较两个字符串
    .参数 lpString1, 文本型
    .参数 lpString2, 文本型

.DLL命令 Sleep, 整数型, "kernel32.dll", "Sleep", 公开, 延时
    .参数 毫秒, 整数型

.DLL命令 CreatePipe, 逻辑型, "kernel32.dll", "CreatePipe"
    .参数 phReadPipe, 整数型, 传址
    .参数 phWritePipe, 整数型, 传址
    .参数 lpPipeAttributes, SECURITY_ATTRIBUTES
    .参数 nSize, 整数型

.DLL命令 PeekNamedPipe_字节集, 逻辑型, "kernel32.dll", "PeekNamedPipe", 公开
    .参数 hNamedPipe, 整数型
    .参数 lpBuffer, 字节集
    .参数 nBufferSize, 整数型
    .参数 lpBytesRead, 整数型, 传址
    .参数 lpTotalBytesAvail, 整数型, 传址
    .参数 lpBytesLeftThisMessage, 整数型, 传址

.DLL命令 PeekNamedPipe, 逻辑型, "kernel32.dll", "PeekNamedPipe"
    .参数 hNamedPipe, 整数型
    .参数 lpBuffer, 整数型
    .参数 nBufferSize, 整数型
    .参数 lpBytesRead, 整数型
    .参数 lpTotalBytesAvail, 整数型, 传址
    .参数 lpBytesLeftThisMessage, 整数型

.DLL命令 ReadFile, 整数型, "kernel32.dll", "ReadFile"
    .参数 hFile, 整数型
    .参数 lpBuffer, 字节集, 传址
    .参数 nNumberOfBytesToRead, 整数型
    .参数 lpNumberOfBytesRead, 整数型, 传址
    .参数 lpOverlapped, 整数型

.DLL命令 GetExitCodeProcess, 整数型, "kernel32.dll", "GetExitCodeProcess"
    .参数 hProcess, 整数型
    .参数 lpExitCode, 整数型, 传址

.DLL命令 CreateProcessA, 逻辑型, "kernel32.dll", "CreateProcessA"
    .参数 lpApplicationName, 整数型
    .参数 lpCommandLine, 文本型
    .参数 lpProcessAttributes, 整数型
    .参数 lpThreadAttributes, 整数型
    .参数 bInheritHandles, 逻辑型
    .参数 dwCreationFlags, 整数型
    .参数 lpEnvironment, 整数型
    .参数 lpCurrentDriectory, 整数型
    .参数 lpStartupInfo, STARTUPINFO, 传址
    .参数 lpProcessInformation, 精易_进程结构, 传址

.DLL命令 UrlMkSetSessionOption, 整数型, "urlmon.dll", "UrlMkSetSessionOption", , 设置当前程序中浏览器的UserAgent
    .参数 dwOption, 整数型, , INTERNET_OPTION_PROXY ,INTERNET_OPTION_REFRESH ,URLMON_OPTION_USERAGENT,URLMON_OPTION_USERAGENT_REFRESH 
    .参数 pBuffer, 文本型
    .参数 dwBufferLength, 整数型, , Length
    .参数 dwReserved, 整数型, , 0

.DLL命令 GetPrivateProfileSection, 整数型, "kernel32.dll", "GetPrivateProfileSectionA", , 文件_取配置项名数组1  枚举节成员
    .参数 小节名, 文本型, , lpAppName
    .参数 返回文本, 字节集, , lpReturnedString
    .参数 返回文本大小, 整数型, , nSize
    .参数 配置项文件名, 文本型, , lpFileName

.DLL命令 WritePrivateProfileSection, 逻辑型, "kernel32.dll", "WritePrivateProfileSectionA"
    .参数 lpAppName, 文本型
    .参数 lpString, 字节集
    .参数 lpFileName, 文本型

.DLL命令 GetPrivateProfileString, 整数型, "kernel32.dll", "GetPrivateProfileStringA", , 读配置项文本
    .参数 lpApplicationName, 文本型
    .参数 lpKeyName, 文本型
    .参数 lpDefault, 文本型
    .参数 lpReturnedString, 文本型
    .参数 nSize, 整数型
    .参数 lpFileName, 文本型

.DLL命令 WritePrivateProfileString, 逻辑型, "kernel32.dll", "WritePrivateProfileStringA", , 写配置项文本
    .参数 lpApplicationName, 文本型
    .参数 lpKeyName, 文本型
    .参数 lpString, 文本型
    .参数 lpFileName, 文本型

.DLL命令 WritePrivateProfileStruct, 逻辑型, "kernel32.dll", "WritePrivateProfileStructA", , 写配置项结构
    .参数 lpszSection, 文本型
    .参数 lpszKey, 文本型
    .参数 lpStruct, 字节集
    .参数 uSizeStruct, 整数型
    .参数 szFile, 文本型

.DLL命令 GetPrivateProfileStruct, 整数型, "kernel32.dll", "GetPrivateProfileStructA", , 配置项_读配置项结构
    .参数 lpszSection, 文本型
    .参数 lpszKey, 文本型
    .参数 lpStruct, 字节集
    .参数 uSizeStruct, 整数型
    .参数 szFile, 文本型

.DLL命令 GetPrivateProfileSectionNames, 整数型, "kernel32.dll", "GetPrivateProfileSectionNamesA", , 枚举项
    .参数 lpszReturnBuffer, 字节集
    .参数 nSize, 整数型
    .参数 lpFileName, 文本型

.DLL命令 WriteProfileSection, 逻辑型, "kernel32.dll", "WriteProfileSectionA", , 写系统节
    .参数 lpAppName, 文本型
    .参数 lpString, 字节集

.DLL命令 GetProfileSection, 整数型, "kernel32.dll", "GetProfileSectionA", , 取系统项数
    .参数 lpAppName, 文本型
    .参数 lpReturnedString, 字节集
    .参数 nSize, 整数型

.DLL命令 GetProfileString, 整数型, "kernel32.dll", "GetProfileStringA", , 读系统项文本
    .参数 lpAppName, 文本型
    .参数 lpKeyName, 文本型
    .参数 lpDefault, 文本型
    .参数 lpReturnedString, 文本型
    .参数 nSize, 整数型

.DLL命令 WriteProfileString, 逻辑型, "kernel32.dll", "WriteProfileStringA", , 写系统项文本
    .参数 lpszSection, 文本型
    .参数 lpszKeyName, 文本型
    .参数 lpszString, 文本型

.DLL命令 GetProfileInt, 整数型, "kernel32.dll", "GetProfileIntA", , 读系统项数值
    .参数 lpAppName, 文本型
    .参数 lpKeyName, 文本型
    .参数 nDefault, 整数型

.DLL命令 InternetTimeFromSystemTime, 逻辑型, "wininet.dll", "InternetTimeFromSystemTime", , 时间_转为GMT格式1
    .参数 pst, 精易_时间
    .参数 dwRFC, 整数型
    .参数 lpszTime, 文本型
    .参数 cbTime, 整数型

.DLL命令 InternetTimeToSystemTime, 逻辑型, "wininet.dll", "InternetTimeToSystemTime", , 时间_GMT转为时间
    .参数 lpszTime, 文本型
    .参数 pst, 精易_时间
    .参数 dwReserved, 整数型

.DLL命令 WinHttpTimeFromSystemTime, 逻辑型, "Winhttp.dll", "WinHttpTimeFromSystemTime", , 时间_转为GMT格式2
    .参数 pst, 精易_时间
    .参数 pwszTime, 字节集

.DLL命令 WinHttpTimeToSystemTime, 逻辑型, "Winhttp.dll", "WinHttpTimeToSystemTime", , 时间_GMT转为时间1
    .参数 pwszTime, 字节集
    .参数 pst, 精易_时间

.DLL命令 CommandLineToArgvW, 整数型, "Shell32.dll", "CommandLineToArgvW", , 程序_取命令行 ()
    .参数 lpCmdLine, 整数型
    .参数 pNumArgs, , 传址

.DLL命令 GetCommandLineW, 整数型, "Kernel32.dll", "GetCommandLineW", , 程序_取命令行 ()

.DLL命令 PeekMessage, 逻辑型, "user32.dll", "PeekMessageA", , 系统_处理事件1
    .参数 lpMsg, MSG
    .参数 hwnd, 整数型
    .参数 wMsgFilterMin, 整数型
    .参数 wMsgFilterMax, 整数型
    .参数 wRemoveMsg, 整数型

.DLL命令 TranslateMessage, 逻辑型, "user32.dll", "TranslateMessage", , 系统_处理事件1
    .参数 消息结构, MSG, , lpMsg

.DLL命令 DispatchMessage, 整数型, "user32.dll", "DispatchMessageA", , 系统_处理事件1
    .参数 消息结构, MSG, , lpMsg

.DLL命令 NetJoinDomain, 整数型, "NETAPI32.DLL", "NetJoinDomain"
    .参数 lpServer
    .参数 lpDomain, 字节集
    .参数 lpAccountOU
    .参数 lpAccount, 字节集
    .参数 lpPassword, 字节集
    .参数 fJoinOptions, 整数型

.DLL命令 NetUnjoinDomain, 整数型, "NETAPI32.DLL", "NetUnjoinDomain"
    .参数 lpServer
    .参数 lpAccount, 字节集
    .参数 lpPassword, 字节集
    .参数 fUnjoinOptions

.DLL命令 SRSetRestorePoint, 逻辑型, "SrClient.dll", "SRSetRestorePointA", , 创建还原点
    .参数 pRestorePtSpec, RESTOREPTINFO
    .参数 pSMgrStatus, SMGRSTATUS

.DLL命令 SRRemoveRestorePoint, 整数型, "SrClient.dll", "SRRemoveRestorePoint", , 删除还原点
    .参数 dwRPNum, 整数型

.DLL命令 lstrcpy_bytes, 整数型, "kernel32.dll", "lstrcpyA", , 创建还原点
    .参数 文本1, 字节型, 传址 数组, RetVal
    .参数 文本2, 文本型, , Ptr

.DLL命令 GetFontResourceInfoW, 逻辑型, "gdi32.dll", "GetFontResourceInfoW", , 系统_取字体名
    .参数 pwszFontPath, 字节集
    .参数 lLen, 整数型, 传址
    .参数 fontRes, FONT_RESOURCE
    .参数 dwType, 整数型

.DLL命令 GetNativeSystemInfo, 整数型, "kernel32.dll", "GetNativeSystemInfo", , 系统_取CPU占用率
    .参数 lpSystemInfo, SYSTEM_INFO

.DLL命令 GetSystemInfo, 整数型, "kernel32.dll", "GetSystemInfo", , 系统_取CPU占用率
    .参数 系统信息, SYSTEM_INFO

.DLL命令 NtQuerySystemInformation, 整数型, "ntdll.dll", "NtQuerySystemInformation", ,  系统_取CPU占用率
    .参数 SystemInformationClass, 整数型
    .参数 SystemInformation, 整数型
    .参数 SystemInformationLength, 整数型
    .参数 ReturnLength, 整数型, 传址

.DLL命令 RtlAdjustPrivilege, 整数型, "ntdll.dll", "RtlAdjustPrivilege", 公开
    .参数 Privilege, 整数型, , #Se
    .参数 Enable, 字节型
    .参数 CurrentThread, 字节型
    .参数 Enabled, 整数型, 传址

.DLL命令 ZwShutdownSystem, 整数型, "ntdll.dll", "ZwShutdownSystem", , 系统_关电源
    .参数 参数

.DLL命令 FlashWindowEx, 逻辑型, "user32.dll", "FlashWindowEx"
    .参数 pfwi, PFLASHWINFO

.DLL命令 SysAllocString, 整数型, "OleAut32.dll", "SysAllocString"
    .参数 psz, 字节集

.DLL命令 GdipLoadImageFromFile, 整数型, "gdiplus.dll", "GdipLoadImageFromFile", ,  
    .参数 filename, 字节集
    .参数 image, 整数型, 传址

.DLL命令 CLSIDFromString, 整数型, "ole32.dll", "CLSIDFromString"
    .参数 lpsz, 整数型
    .参数 pclsid, 字节集

.DLL命令 IIDFromString, 整数型, "ole32.dll", "IIDFromString", , StringtoIID
    .参数 lpsz, 字节集
    .参数 lpiid, GUID

.DLL命令 CoInitializeEx, 整数型, "ole32.dll", "CoInitializeEx"
    .参数 pvReserved, 整数型
    .参数 dwCoInit, 整数型

.DLL命令 CoInitializeSecurity, 整数型, "ole32.dll", "CoInitializeSecurity"
    .参数 pSecDesc
    .参数 cAuthSvc, 整数型
    .参数 asAuthSvc
    .参数 pReserved1, 整数型
    .参数 dwAuthnLevel, 整数型
    .参数 dwImpLevel, 整数型
    .参数 pAuthList, 整数型
    .参数 dwCapabilities, 整数型
    .参数 pReserved3, 整数型

.DLL命令 CoCreateInstance_字节集, 整数型, "ole32.dll", "CoCreateInstance"
    .参数 rclsid, 字节集
    .参数 pUnkOuter, 整数型
    .参数 dwClsContext, 整数型
    .参数 riid, 字节集
    .参数 ppv, 对象, 传址

.DLL命令 CoCreateInstance, 整数型, "ole32.dll", "CoCreateInstance", , 窗口_在任务栏中显示
    .参数 rclsid, GUID
    .参数 pUnkOuter, 整数型
    .参数 dwClsContext, 整数型
    .参数 riid, GUID
    .参数 ppv, 整数型, 传址

.DLL命令 CoCreateInstance1, 整数型, "Ole32.dll", "CoCreateInstance"
    .参数 rclsid, 整数型
    .参数 pUnkOuter, 整数型
    .参数 dwClsContext, 整数型
    .参数 riid, 整数型
    .参数 ppv, 整数型, 传址

.DLL命令 CoSetProxyBlanket, 整数型, "ole32.dll", "CoSetProxyBlanket"
    .参数 pProxy, 整数型
    .参数 dwAuthnSvc, 整数型
    .参数 dwAuthzSvc, 整数型
    .参数 pServerPrincName
    .参数 dwAuthnLevel, 整数型
    .参数 dwImpLevel, 整数型
    .参数 pAuthInfo, 整数型
    .参数 dwCapabilities, 整数型

.DLL命令 CoTaskMemAlloc, 整数型, "ole32.dll", "CoTaskMemAlloc"
    .参数 cb, 整数型

.DLL命令 lstrcat, 文本型, "kernel32.dll", "lstrcatA", , 文本_指针到文本
    .参数 内存指针, 整数型
    .参数 lpString2, 整数型, 传址

.DLL命令 GetTimeZoneInformation, 整数型, "kernel32.dll", "GetTimeZoneInformation", , 系统_取系统时区
    .参数 时区结构设置, 时区信息_

.DLL命令 GetLocaleInfo, 整数型, "kernel32.dll", "GetLocaleInfoA"
    .参数 地方ID, 整数型
    .参数 类型, 整数型
    .参数 数据, 文本型
    .参数 数据尺寸, 整数型

.DLL命令 GetWindowInfo, 逻辑型, "user32.dll", "GetWindowInfo", , 窗口_是否激活
    .参数 hwnd, 整数型
    .参数 pwi, WINDOWINFO

.DLL命令 RtlAllocateHeap, , "ntdll.dll", "RtlAllocateHeap", , 堆内存分配
    .参数 hHeap, , , 堆句柄;可用GetProcessHeap()获取
    .参数 dwFlags, , , 标志
    .参数 dwBytes, , , 长度；单位为字节

.DLL命令 MakeSureDirectoryPathExists, 逻辑型, "dbghelp.dll", "MakeSureDirectoryPathExists", , 目录_创建
    .参数 DirPath, 文本型

.DLL命令 ILCreateFromPathA, 整数型, "Shell32.dll", "ILCreateFromPathA", 公开, 文件_定位
    .参数 lpFileName, 文本型

.DLL命令 ILCreateFromPathW, 整数型, "Shell32.dll", "ILCreateFromPathW"
    .参数 pszPath, 字节集

.DLL命令 ILFree, , "Shell32.dll", "ILFree", 公开, 文件_定位
    .参数 lngPidl, 整数型

.DLL命令 SHOpenFolderAndSelectItems, 整数型, "shell32.dll", "SHOpenFolderAndSelectItems", 公开, 文件_定位
    .参数 pidlfolder, 整数型
    .参数 cidl, 整数型
    .参数 apidl, 整数型
    .参数 dwFlags, 整数型

.DLL命令 GetFileInformationByHandle, 逻辑型, "kernel32.dll", "GetFileInformationByHandle", 公开, 文件_句柄取路径
    .参数 hFile, 整数型
    .参数 lpFileInformation, BY_HANDLE_FILE_INFORMATION

.DLL命令 GetVolumeInformation, 逻辑型, "kernel32.dll", "GetVolumeInformationA", 公开, 文件_句柄取路径
    .参数 lpRootPathName, 文本型
    .参数 lpVolumeNameBuffer, 文本型
    .参数 nVolumeNameSize, 整数型
    .参数 lpVolumeSerialNumber, 整数型, 传址
    .参数 lpMaximumComponentLength, 整数型, 传址
    .参数 lpFileSystemFlags, 整数型, 传址
    .参数 lpFileSystemNameBuffer, 文本型, 传址
    .参数 nFileSystemNameSize, 整数型

.DLL命令 ZwQueryInformationFile, 整数型, "ntdll.dll", "ZwQueryInformationFile", 公开, 文件_句柄取路径
    .参数 FileHandle
    .参数 IoStatusBlock, IO_STATUS_BLOCK
    .参数 FileInformation
    .参数 Length
    .参数 FileInformationClass

.DLL命令 GetFileAttributes, 整数型, "kernel32.dll", "GetFileAttributesA", 公开, 文件_取属性
    .参数 文件名, 文本型

.DLL命令 EnumProcesses, 逻辑型, "Psapi.dll", "EnumProcesses", 公开
    .参数 lpidProcess, 整数型
    .参数 cb, 整数型
    .参数 lpcbNeeded, 整数型, 传址

.DLL命令 GetNetworkParams, 整数型, "IPHLPAPI.DLL", "GetNetworkParams", 公开, 系统_取网络主机名
    .参数 pFixedInfo
    .参数 pOutBufLen, 整数型, 传址

.DLL命令 PathFindFileName, 文本型, "shlwapi.dll", "PathFindFileNameA"
    .参数 pszPath, 文本型

.DLL命令 GetPriorityClass, 整数型, "kernel32.dll", "GetPriorityClass", , 进程_取优先级
    .参数 hProcess, 整数型

.DLL命令 SetPriorityClass, 逻辑型, "kernel32.dll", "SetPriorityClass", , 进程_置优先级
    .参数 hProcess, 整数型
    .参数 dwPriorityClass, 整数型

.DLL命令 GetActiveWindow, 整数型, "user32.dll", "GetActiveWindow", , 窗口_取激活句柄

.DLL命令 GetProcessHandleCount, 逻辑型, "Kernel32.dll", "GetProcessHandleCount", , 进程_取句柄数
    .参数 hProcess
    .参数 pdwHandleCount, , 传址

.DLL命令 GetProcessIoCounters, 逻辑型, "kernel32.dll", "GetProcessIoCounters", , 进程_取IO写入计数  进程_取IO写入字节 
    .参数 hProcess, 整数型
    .参数 lpIoCounters, IO_COUNTERS

.DLL命令 CopyMemory_Bytes2int, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 内存拷贝
    .参数 Destination, 整数型
    .参数 字节集指针, 字节集
    .参数 数据长度, 整数型

.DLL命令 WinHelpA, 整数型, "user32.dll", "WinHelpA", 公开, 系统_调用帮助
    .参数 窗口句柄, 整数型, , hwnd
    .参数 帮助文件, 文本型, , lpHelpFile
    .参数 命令, 整数型, , wCommand
    .参数 数据, 整数型, , dwData

.DLL命令 GetMessageA, 逻辑型, "user32.dll", "GetMessageA", 公开
    .参数 lpMsg, MSG
    .参数 hwnd, 整数型
    .参数 wMsgFilterMin, 整数型
    .参数 wMsgFilterMax, 整数型

.DLL命令 GetEnvironmentVariable, 整数型, "kernel32.dll", "GetEnvironmentVariableA", 公开, 类_环境存取->读环境变量
    .参数 lpName, 文本型
    .参数 lpBuffer, 文本型
    .参数 nSize, 整数型

.DLL命令 GetEnvironmentVariableW, 整数型, "kernel32.dll", "GetEnvironmentVariableW"
    .参数 lpName, 字节集, , 0
    .参数 lpBuffer, 字节集, , 0
    .参数 nSize, 整数型, , 0

.DLL命令 SetEnvironmentVariable, 逻辑型, "kernel32.dll", "SetEnvironmentVariableA", 公开, 类_环境存取->写环境变量
    .参数 lpName, 文本型
    .参数 lpValue, 文本型

.DLL命令 GetEnvironmentStrings, 整数型, "kernel32.dll", "GetEnvironmentStringsA"

.DLL命令 CopyMemory_objcet2int, 整数型, "kernel32.dll", "RtlMoveMemory", 公开
    .参数 Destination, 整数型, 传址
    .参数 Source, 对象
    .参数 Length, 整数型

.DLL命令 lstrcat_int2variant, 整数型, "kernel32.dll", "lstrcatA", 公开
    .参数 lpString1, 变体型, 传址
    .参数 lpString2, 整数型, 传址

.DLL命令 GetCurrentDirectory, 整数型, "kernel32.dll", "GetCurrentDirectoryA", 公开
    .参数 nBufferLength, 整数型
    .参数 lpBuffer, 文本型

.DLL命令 GetCurrentDirectoryW, 整数型, "Kernel32.dll", "GetCurrentDirectoryW"
    .参数 nBufferLength, 整数型
    .参数 lpBuffer, 整数型

.DLL命令 CopyMemory_int2minmaxinfo, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, MINMAXINFO
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 CopyMemory_minmaxinfo2int, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, 整数型
    .参数 Source, MINMAXINFO
    .参数 Length, 整数型

.DLL命令 MD5Init, , "Cryptdll.dll", "MD5Init"
    .参数 context, MD5_CTX

.DLL命令 MD5Update, , "Cryptdll.dll", "MD5Update"
    .参数 context, MD5_CTX
    .参数 input, 整数型
    .参数 inlen, 整数型

.DLL命令 MD5Update_bin, , "Cryptdll.dll", "MD5Update"
    .参数 context, MD5_CTX
    .参数 input, 字节集
    .参数 inlen, 整数型

.DLL命令 MD5Final, , "Cryptdll.dll", "MD5Final"
    .参数 context, MD5_CTX

.DLL命令 WinHttpCrackUrl, 逻辑型, "Winhttp.dll", "WinHttpCrackUrl", 公开
    .参数 pwszUrl, 字节集
    .参数 dwUrlLength
    .参数 dwFlags
    .参数 lpUrlComponents, URL_COMPONENTS

.DLL命令 MessageBoxTimeoutA, 整数型, "user32.dll", "MessageBoxTimeoutA", 公开, 系统_信息框Ex
    .参数 hwnd, 整数型, , 父窗口句柄
    .参数 lpText, 文本型, , 文本
    .参数 lpCaption, 文本型, , 标题
    .参数 wtype, 整数型, , 按钮类型
    .参数 wlange, 整数型
    .参数 dwtimeout, 整数型, , 毫秒

.DLL命令 IsDBCSLeadByteEx, 逻辑型, "kernel32.dll", "IsDBCSLeadByteEx"
    .参数 CodePage, 整数型
    .参数 TestChar, 字节型

.DLL命令 IsCharAlpha, 逻辑型, "user32.dll", "IsCharAlphaA"
    .参数 cChar, 字节型

.DLL命令 MulDiv, 整数型, "kernel32.dll", "MulDiv", , 通用对话框控件->选择字体
    .参数 nNumber, 整数型
    .参数 nNumerator, 整数型
    .参数 nDenominator, 整数型

.DLL命令 CopyMemory_logfont2int, 整数型, "kernel32.dll", "RtlMoveMemory", , 对话框_选择字体
    .参数 目标数据地址, 整数型
    .参数 源数据, LOGFONT
    .参数 尺寸, 整数型

.DLL命令 ChooseFont, 逻辑型, "comdlg32.dll", "ChooseFontA", , 对话框_选择字体
    .参数 pChoosefont, CHOOSEFONT

.DLL命令 CopyMemory_int2logfont, 整数型, "kernel32.dll", "RtlMoveMemory", , 对话框_选择字体
    .参数 目的地址, LOGFONT, ,  
    .参数 源地址, 整数型, ,  
    .参数 复制尺寸, 整数型

.DLL命令 CreateTimerQueueTimer, 逻辑型, "kernel32.dll", "CreateTimerQueueTimer", 公开, 控件_时钟
    .参数 phNewTimer, 整数型, 传址
    .参数 TimerQueue, 整数型
    .参数 Callback, 整数型, , 时钟回调
    .参数 Parameter, 整数型, , 传递给时钟回调的参数
    .参数 DueTime, 整数型, , 首次触发时钟的延时
    .参数 Period, 整数型, , 时钟周期
    .参数 Flags, 整数型

.DLL命令 CreateTimerQueue, 整数型, "kernel32.dll", "CreateTimerQueue", 公开, 控件_时钟

.DLL命令 DeleteTimerQueueTimer, 逻辑型, "kernel32.dll", "DeleteTimerQueueTimer", 公开, 控件_时钟
    .参数 TimerQueue, 整数型
    .参数 Timer, 整数型
    .参数 CompletionEvent, 整数型

.DLL命令 DeleteTimerQueue, 逻辑型, "kernel32.dll", "DeleteTimerQueue", 公开, 控件_时钟
    .参数 TimerQueue, 整数型

.DLL命令 ChangeTimerQueueTimer, 逻辑型, "kernel32.dll", "ChangeTimerQueueTimer", 公开, 控件_时钟
    .参数 TimerQueue, 整数型
    .参数 Timer, 整数型
    .参数 DueTime, 整数型
    .参数 Period, 整数型

.DLL命令 PathIsURL, 逻辑型, "shlwapi.dll", "PathIsURLA", 公开
    .参数 pszPath, 文本型

.DLL命令 CryptDeriveKey, 逻辑型, "advapi32.dll", "CryptDeriveKey"
    .参数 hProv, 整数型
    .参数 Algid, 整数型
    .参数 hBaseData, 整数型
    .参数 dwFlags, 整数型
    .参数 phKey, 整数型, 传址

.DLL命令 CryptEncrypt, 逻辑型, "advapi32.dll", "CryptEncrypt", ,  
    .参数 hKey, 整数型
    .参数 hHash, 整数型
    .参数 Final, 整数型
    .参数 dwFlags, 整数型
    .参数 pbData, 字节集
    .参数 pdwDataLen, 整数型, 传址
    .参数 dwBufLen, 整数型

.DLL命令 CryptDestroyKey, 逻辑型, "advapi32.dll", "CryptDestroyKey", ,  
    .参数 hKey, 整数型

.DLL命令 CryptDecrypt, 逻辑型, "advapi32.dll", "CryptDecrypt", ,  
    .参数 hKey, 整数型
    .参数 hHash, 整数型
    .参数 Final, 整数型
    .参数 dwFlags, 整数型
    .参数 pbData, 字节集
    .参数 pdwDataLen, 整数型, 传址

.DLL命令 CopyMemory_IconDirEntry, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, IconDirEntry
    .参数 Source, 字节集
    .参数 cbCopy, 整数型

.DLL命令 CreateIconFromResource, 整数型, "user32.dll", "CreateIconFromResource"
    .参数 presbits, 字节集
    .参数 dwResSize
    .参数 fIcon, 逻辑型
    .参数 dwVer

.DLL命令 Shell_NotifyIcon, 逻辑型, "shell32.dll", "Shell_NotifyIconA", 公开
    .参数 dwMessage, 整数型
    .参数 lpData, NOTIFYICONDATA

.DLL命令 GetTopWindow, 整数型, "user32.dll", "GetTopWindow", 公开
    .参数 hwnd, 整数型

.DLL命令 GetNextWindow, 整数型, "user32.dll", "GetWindow", 公开
    .参数 hwnd, 整数型
    .参数 wFlag, 整数型

.DLL命令 GetWindowTextLengthA, 整数型, "user32.dll", "GetWindowTextLengthA", 公开
    .参数 hwnd, 整数型

.DLL命令 GetWindowTextLengthW, 整数型, "user32.dll", "GetWindowTextLengthW", 公开
    .参数 hwnd, 整数型

.DLL命令 AttachThreadInput, 逻辑型, "user32.dll", "AttachThreadInput", 公开
    .参数 idAttach, 整数型
    .参数 idAttachTo, 整数型
    .参数 fAttach, 逻辑型

.DLL命令 Thread32First, 逻辑型, "KERNEL32.DLL", "Thread32First", 公开
    .参数 hSnapshot, 整数型
    .参数 lpte, 线程入口结构

.DLL命令 gethostbyaddr, 整数型, "wsock32.dll", "gethostbyaddr", 公开
    .参数 addr, 整数型, 传址
    .参数 len, 整数型, 传址
    .参数 type, 整数型, 传址

.DLL命令 CopyMemory_int2hostent, 整数型, "kernel32.dll", "RtlMoveMemory", 公开
    .参数 目标数据地址, hostent
    .参数 源数据, 整数型
    .参数 尺寸, 整数型

.DLL命令 IcmpCreateFile, 整数型, "iphlpapi.dll", "IcmpCreateFile", 公开

.DLL命令 IcmpSendEcho, 整数型, "ICMP.DLL", "IcmpSendEcho", 公开
    .参数 IcmpHandle, 整数型
    .参数 DestinationAddress, 整数型
    .参数 RequestData, 文本型
    .参数 RequestSize, 短整数型
    .参数 RequestOptions, 整数型
    .参数 ReplyBuffer, ICMP_ECHO_REPLY
    .参数 ReplySize, 整数型
    .参数 Timeout, 整数型

.DLL命令 IcmpCloseHandle, 整数型, "ICMP.DLL", "IcmpCloseHandle", 公开
    .参数 IcmpHandle, 整数型

.DLL命令 waveOutGetDevCaps, 整数型, "winmm.dll", "waveOutGetDevCapsA"
    .参数 uDeviceID, 整数型
    .参数 lpCaps, WAVEOUTCAPS
    .参数 uSize, 整数型

.DLL命令 SysFreeString, 整数型, "oleaut32.dll", "SysFreeString"
    .参数 bstr

.DLL命令 WinHttpCheckPlatform, 逻辑型, "Winhttp.dll", "WinHttpCheckPlatform", 公开, BOOL WinHttpCheckPlatform(void);

.DLL命令 WinHttpOpen, 整数型, "Winhttp.dll", "WinHttpOpen", 公开, HINTERNET WINAPI WinHttpOpen
    .参数 pwszUserAgent, 整数型, , __in_opt  LPCWSTR pwszUserAgent
    .参数 dwAccessType, 整数型, , __in      DWORD dwAccessType
    .参数 pwszProxyName, 字节集, , __in      LPCWSTR pwszProxyName
    .参数 pwszProxyBypass, 整数型, , __in      LPCWSTR pwszProxyBypass
    .参数 dwFlags, 整数型, , __in      DWORD dwFlags

.DLL命令 WinHttpConnect, 整数型, "Winhttp.dll", "WinHttpConnect", 公开, HINTERNET WINAPI WinHttpConnect
    .参数 hSession, 整数型, , __in        HINTERNET hSession
    .参数 pswzServerName, 字节集, , __in        LPCWSTR pswzServerName
    .参数 nServerPort, 整数型, , __in        INTERNET_PORT nServerPort
    .参数 dwReserved, 整数型, , __reserved  DWORD dwReserved

.DLL命令 WinHttpOpenRequest, 整数型, "Winhttp.dll", "WinHttpOpenRequest", 公开, HINTERNET WINAPI WinHttpOpenRequest
    .参数 hConnect, 整数型, , __in  HINTERNET hConnect
    .参数 pwszVerb, 字节集, , __in  LPCWSTR pwszVerb
    .参数 pwszObjectName, 字节集, , __in  LPCWSTR pwszObjectName
    .参数 pwszVersion, , , __in  LPCWSTR pwszVersion
    .参数 pwszReferrer, 整数型, , __in  LPCWSTR pwszReferrer
    .参数 ppwszAcceptTypes, 整数型, , __in  LPCWSTR *ppwszAcceptTypes
    .参数 dwFlags, 整数型, , __in  DWORD dwFlags

.DLL命令 WinHttpCloseHandle, 逻辑型, "Winhttp.dll", "WinHttpCloseHandle", 公开, BOOL WINAPI WinHttpCloseHandle
    .参数 hInternet, 整数型, , __in  HINTERNET hInternet

.DLL命令 WinHttpSetTimeouts, 逻辑型, "Winhttp.dll", "WinHttpSetTimeouts", 公开, BOOL WINAPI WinHttpSetTimeouts
    .参数 hInternet, 整数型, , __in  HINTERNET hInternet
    .参数 dwResolveTimeout, 整数型, , __in  int dwResolveTimeout
    .参数 dwConnectTimeout, 整数型, , __in  int dwConnectTimeout
    .参数 dwSendTimeout, 整数型, , __in  int dwSendTimeout
    .参数 dwReceiveTimeout, 整数型, , __in  int dwReceiveTimeout

.DLL命令 WinHttpSetCredentials, 逻辑型, "Winhttp.dll", "WinHttpSetCredentials", , BOOL WINAPI WinHttpSetCredentials
    .参数 hRequest, 整数型, , __in        HINTERNET hRequest
    .参数 AuthTargets, 整数型, , __in        DWORD AuthTargets
    .参数 AuthScheme, 整数型, , __in        DWORD AuthScheme
    .参数 pwszUserName, 字节集, , __in        LPCWSTR pwszUserName
    .参数 pwszPassword, 字节集, , __in        LPCWSTR pwszPassword
    .参数 pAuthParams, 整数型, , __reserved  LPVOID pAuthParams

.DLL命令 WinHttpSetOption, 逻辑型, "Winhttp.dll", "WinHttpSetOption", 公开, BOOL WINAPI WinHttpSetOption
    .参数 hInternet, 整数型, , __in  HINTERNET hInternet
    .参数 dwOption, 整数型, , __in  DWORD dwOption
    .参数 lpBuffer, 整数型, 传址, __in  LPVOID lpBuffer
    .参数 dwBufferLength, 整数型, , __in  DWORD dwBufferLength

.DLL命令 WinHttpAddRequestHeaders, 逻辑型, "Winhttp.dll", "WinHttpAddRequestHeaders", 公开, BOOL WINAPI WinHttpAddRequestHeaders
    .参数 hRequest, 整数型, , __in  HINTERNET hRequest
    .参数 pwszHeaders, 字节集, , __in  LPCWSTR pwszHeaders
    .参数 dwHeadersLength, 整数型, , __in  DWORD dwHeadersLength
    .参数 dwModifiers, 整数型, , __in  DWORD dwModifiers

.DLL命令 WinHttpSendRequest, 逻辑型, "Winhttp.dll", "WinHttpSendRequest", 公开, BOOL WINAPI WinHttpSendRequest
    .参数 hRequest, 整数型, , __in      HINTERNET hRequest
    .参数 pwszHeaders, 整数型, , __in_opt  LPCWSTR pwszHeaders
    .参数 dwHeadersLength, 整数型, , __in      DWORD dwHeadersLength
    .参数 lpOptional, 字节集, , __in_opt  LPVOID lpOptional
    .参数 dwOptionalLength, 整数型, , __in      DWORD dwOptionalLength
    .参数 dwTotalLength, 整数型, , __in      DWORD dwTotalLength
    .参数 dwContext, 整数型, , __in      DWORD_PTR dwContext

.DLL命令 WinHttpReceiveResponse, 逻辑型, "Winhttp.dll", "WinHttpReceiveResponse", 公开, BOOL WINAPI WinHttpReceiveResponse
    .参数 hRequest, 整数型, , __in        HINTERNET hRequest
    .参数 lpReserved, 整数型, , __reserved  LPVOID lpReserved

.DLL命令 WinHttpQueryDataAvailable, 逻辑型, "Winhttp.dll", "WinHttpQueryDataAvailable", 公开, 查询是否有可读数据
    .参数 hRequest, 整数型, , 请求句柄
    .参数 lpdwNumberOfBytesAvailable, 整数型, 传址, 可读数据长度

.DLL命令 WinHttpReadData, 逻辑型, "Winhttp.dll", "WinHttpReadData", 公开, BOOL WINAPI WinHttpReadData
    .参数 hRequest, 整数型, , __in   HINTERNET hRequest
    .参数 lpBuffer, 字节集, , __out  LPVOID lpBuffer
    .参数 dwNumberOfBytesToRead, 整数型, , __in   DWORD dwNumberOfBytesToRead
    .参数 lpdwNumberOfBytesRead, 整数型, 传址, __out  LPDWORD lpdwNumberOfBytesRead

.DLL命令 WinHttpQueryHeaders, 逻辑型, "Winhttp.dll", "WinHttpQueryHeaders", 公开, BOOL WINAPI WinHttpQueryHeaders
    .参数 hRequest, 整数型, , __in      HINTERNET hRequest
    .参数 dwInfoLevel, 整数型, , __in      DWORD dwInfoLevel
    .参数 pwszName, 整数型, , __in_opt  LPCWSTR pwszName
    .参数 lpBuffer, 字节集, , __out     LPVOID lpBuffer
    .参数 lpdwBufferLength, 整数型, 传址, __inout   LPDWORD lpdwBufferLength
    .参数 lpdwIndex, 整数型, 传址, __inout   LPDWORD lpdwIndex

.DLL命令 GetCalendarInfo, 整数型, "kernel32.dll", "GetCalendarInfoA", 公开
    .参数 Locale, 整数型
    .参数 Calendar, 整数型
    .参数 CalType, 整数型
    .参数 lpCalData, 文本型
    .参数 cchData, 整数型, 传址
    .参数 lpValue, 整数型

.DLL命令 GetCompressedFileSize, 整数型, "kernel32.dll", "GetCompressedFileSizeA", 公开
    .参数 lpFileName, 文本型
    .参数 lpFileSizeHigh, 整数型, 传址

.DLL命令 RtlGetNtProductType, 逻辑型, "ntdll.dll", "RtlGetNtProductType", 公开, 系统_取系统版本
    .参数 wProductType, , 传址

.DLL命令 RtlGetProductInfo, 整数型, "ntdll.dll", "RtlGetProductInfo", 公开, 系统_取系统版本，不支持XP
    .参数 dwOSMajorVersion
    .参数 dwOSMinorVersion
    .参数 dwSpMajorVersion
    .参数 dwSpMinorVersion
    .参数 pdwReturnedProductType, , 传址

.DLL命令 RtlGetNtVersionNumbers, 整数型, "ntdll.dll", "RtlGetNtVersionNumbers", 公开, 系统_取系统版本
    .参数 major, , 传址
    .参数 minor, , 传址
    .参数 build, 短整数型, 传址

.DLL命令 InternetQueryOption, 逻辑型, "wininet.dll", "InternetQueryOptionA", 公开
    .参数 hInternet, 整数型
    .参数 dwOption, 整数型
    .参数 lpBuffer, 整数型
    .参数 lpdwBufferLength, 整数型, 传址

.DLL命令 RegQueryInfoKey, 整数型, "advapi32.dll", "RegQueryInfoKeyA", , 注册表_取子项数  注册表_取修改时间
    .参数 hKey, 整数型
    .参数 lpClass, 文本型
    .参数 lpcbClass, 文本型
    .参数 lpReserved, 整数型
    .参数 lpcSubKeys, 整数型, 传址
    .参数 lpcbMaxSubKeyLen, 整数型, 传址
    .参数 lpcbMaxClassLen, 整数型, 传址
    .参数 lpcValues, 整数型, 传址
    .参数 lpcbMaxValueNameLen, 整数型, 传址
    .参数 lpcbMaxValueLen, 整数型, 传址
    .参数 lpcbSecurityDescriptor, 整数型, 传址
    .参数 lpftLastWriteTime, FILETIME

.DLL命令 CopyMemory_system_process_information, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 pDest, SYSTEM_PROCESS_INFORMATION
    .参数 pSrc, 整数型
    .参数 ByteLen, 整数型

.DLL命令 CreateMailslot, 整数型, "kernel32.dll", "CreateMailslotA", , 邮槽服务端->创建
    .参数 lpName, 文本型
    .参数 nMaxMessageSize, 整数型
    .参数 lReadTimeout, 整数型
    .参数 lpSecurityAttributes

.DLL命令 GetMailslotInfo, 逻辑型, "kernel32.dll", "GetMailslotInfo", , 邮槽服务端->读数据
    .参数 hMailslot, 整数型
    .参数 lpMaxMessageSize, 整数型, 传址
    .参数 lpNextSize, 整数型, 传址
    .参数 lpMessageCount, 整数型, 传址
    .参数 lpReadTimeout, 整数型, 传址

.DLL命令 ReadFile_字节集, 逻辑型, "kernel32.dll", "ReadFile", 公开
    .参数 hFile, 整数型
    .参数 lpBuffer, 字节集
    .参数 nNumberOfBytesToRead, 整数型
    .参数 lpNumberOfBytesRead, 整数型, 传址
    .参数 lpOverlapped, 整数型

.DLL命令 ReadFile_整数型, 逻辑型, "kernel32.dll", "ReadFile"
    .参数 hFile, 整数型
    .参数 lpBuffer, 整数型
    .参数 nNumberOfBytesToRead, 整数型
    .参数 lpNumberOfBytesRead, 整数型, 传址
    .参数 lpOverlapped, 整数型

.DLL命令 HeapFree, 整数型, "kernel32.dll", "HeapFree"
    .参数 hHeap, 整数型
    .参数 dwFlags, 整数型
    .参数 lpMem, 整数型

.DLL命令 VariantTimeToSystemTime, 整数型, "oleaut32.dll", "VariantTimeToSystemTime"
    .参数 vtime, 日期时间型
    .参数 lpSystemTime, 精易_时间

.DLL命令 SetThreadAffinityMask, 整数型, "kernel32.dll", "SetThreadAffinityMask"
    .参数 hThread, 整数型
    .参数 dwThreadAffinityMask, 整数型

.DLL命令 IsNTAdmin, 逻辑型, "advpack.dll", "IsNTAdmin"
    .参数 dwReserved, 整数型
    .参数 lpdwReserved, 整数型, 传址

.DLL命令 CryptBinaryToStringA, 逻辑型, "Crypt32.dll", "CryptBinaryToStringA", , 编码_BASE64编码A
    .参数 pbBinary, 字节集, , 需要转换的数据
    .参数 cbBinary, 整数型, , 数据长度
    .参数 dwFlags, 整数型, , 解码标志
    .参数 pszString, 整数型, , 数据缓存
    .参数 pcchString, 整数型, 传址, 返回长度

.DLL命令 CryptStringToBinaryA, 逻辑型, "Crypt32.dll", "CryptStringToBinaryA", , 编码_BASE64解码A
    .参数 pszString, 字节集, , 需要转换的数据
    .参数 cchString, 整数型, , 数据长度
    .参数 dwFlags, 整数型, , 编码标志
    .参数 pbBinary, 整数型, , 数据缓存
    .参数 pcbBinary, 整数型, 传址, 返回长度
    .参数 pdwSkip, 整数型
    .参数 pdwFlags, 整数型

.DLL命令 EnumProcessModulesEx, 逻辑型, "psapi.dll", "EnumProcessModulesEx", , 窗口_句柄取文件路径
    .参数 hProcess, 整数型
    .参数 lphModule, 整数型
    .参数 cb, 整数型
    .参数 lpcbNeeded, 整数型, 传址
    .参数 dwFilterFlag, 整数型

.DLL命令 InternetCheckConnection, 逻辑型, "wininet.dll", "InternetCheckConnectionA", , 系统_是否已联网
    .参数 lpszUrl, 文本型
    .参数 dwFlags, 整数型
    .参数 dwReserved, 整数型

.DLL命令 CopyMemory_QUERY_SERVICE_CONFIG, 整数型, "kernel32.dll", "RtlMoveMemory", , 系统服务_枚举系统服务
    .参数 目标数据地址, QUERY_SERVICE_CONFIG, , lpvDest
    .参数 源数据, 整数型, , lpvSource
    .参数 尺寸, 整数型, , cbCopy

.DLL命令 EnumServicesStatus, 逻辑型, "advapi32.dll", "EnumServicesStatusA", , 系统服务_枚举系统服务
    .参数 SC管理者句柄, 整数型, , hSCManager
    .参数 服务类型, 整数型, , dwServiceType
    .参数 服务状态, 整数型, , dwServiceState
    .参数 服务, , , any，lpServices
    .参数 缓冲区大小, 整数型, , cbBufSize
    .参数 需求字节数, 整数型, 传址, pcbBytesNeeded
    .参数 返回服务名, 整数型, 传址, lpServicesReturned
    .参数 返回句柄, 整数型, , lpResumeHandle

.DLL命令 EnumServicesStatusEx, 逻辑型, "ADVAPI32.DLL", "EnumServicesStatusExA"
    .参数 hSCManager, 整数型
    .参数 InfoLevel
    .参数 dwServiceType, 整数型
    .参数 dwServiceState, 整数型
    .参数 lpServices
    .参数 cbBufSize, 整数型
    .参数 pcbBytesNeeded, 整数型, 传址
    .参数 lpServicesReturned, 整数型, 传址
    .参数 lpResumeHandle, 整数型
    .参数 pszGroupName, 文本型

.DLL命令 CopyMemory_enum_service_status_process, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 目标数据地址, ENUM_SERVICE_STATUS_PROCESS
    .参数 源数据, 字节集
    .参数 尺寸, 整数型

.DLL命令 EnumDependentServices, 逻辑型, "advapi32.dll", "EnumDependentServicesA"
    .参数 hService, 整数型
    .参数 dwServiceState, 整数型
    .参数 lpServices
    .参数 cbBufSize, 整数型
    .参数 pcbBytesNeeded, 整数型, 传址
    .参数 lpServicesReturned, 整数型, 传址

.DLL命令 CopyMemory_ENUM_SERVICE_STATUS, 整数型, "kernel32.dll", "RtlMoveMemory", , 系统服务_枚举系统服务
    .参数 目标数据地址, ENUM_SERVICE_STATUS, , lpvDest
    .参数 源数据, 字节集, , lpvSource
    .参数 尺寸, 整数型, , cbCopy

.DLL命令 AllocConsole, 逻辑型, "kernel32.dll", "AllocConsole"

.DLL命令 GetStdHandle, 整数型, "kernel32.dll", "GetStdHandle"
    .参数 nStdHandle, 整数型

.DLL命令 SetConsoleTitleA, 逻辑型, "kernel32.dll", "SetConsoleTitleA"
    .参数 lpConsoleTitle, 文本型

.DLL命令 SetConsoleTextAttribute, 逻辑型, "kernel32.dll", "SetConsoleTextAttribute"
    .参数 hConsoleOutput, 整数型
    .参数 wAttributes, 整数型

.DLL命令 WriteConsoleA, 逻辑型, "kernel32.dll", "WriteConsoleA"
    .参数 hConsoleOutput, 整数型
    .参数 lpBuffer, 文本型
    .参数 nNumberOfCharsToWrite, 整数型
    .参数 lpNumberOfCharsWritten, 整数型
    .参数 lpReserved, 整数型

.DLL命令 OutputDebugStringA, , "kernel32.dll", "OutputDebugStringA"
    .参数 lpOutputString, 文本型

.DLL命令 FreeConsole, 整数型, "kernel32.dll", "FreeConsole"

.DLL命令 GdipGetImageWidth, 整数型, "gdiplus.dll", "GdipGetImageWidth", ,  
    .参数 image
    .参数 width, , 传址

.DLL命令 GdipGetImageHeight, 整数型, "gdiplus.dll", "GdipGetImageHeight", ,  
    .参数 image
    .参数 height, , 传址

.DLL命令 GetFileSizeEx, 逻辑型, "kernel32.dll", "GetFileSizeEx", , 取文件长度
    .参数 hFile, 整数型
    .参数 lpFileSizeHigh, 整数型

.DLL命令 _lopen, 整数型, "kernel32.dll", "_lopen", , 打开文件
    .参数 lpPathName, 文本型
    .参数 iReadWrite, 整数型

.DLL命令 _lclose, 整数型, "kernel32.dll", "_lclose", , 文件_取尺寸
    .参数 文件句柄, 整数型

.DLL命令 StrFormatByteSize64A, 整数型, "shlwapi.dll", "StrFormatByteSize64A", , 文件_格式化字节Ex
    .参数 数值, 长整数型, , qdw
    .参数 文本缓冲区, 文本型, , szBuf
    .参数 文本缓冲区大小, 整数型, , uiBufSize

.DLL命令 CopyMemory_LongLongToFiletime, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 pDest, FILETIME
    .参数 pSrc, 长整数型, 传址
    .参数 ByteLen, 整数型

.DLL命令 SQLBrowseConnect, 整数型, "odbc32.dll", "SQLBrowseConnect"
    .参数 hdbc, 整数型
    .参数 szConnStrIn, 文本型
    .参数 cbConnStrIn, 短整数型
    .参数 szConnStrOut, 文本型
    .参数 cbConnStrOutMax, 短整数型
    .参数 pcbConnStrOut, 短整数型, 传址

.DLL命令 ImmConfigureIME, 逻辑型, "imm32.dll", "ImmConfigureIMEA"
    .参数 hkl, 整数型
    .参数 hwnd, 整数型
    .参数 dwMode, 整数型
    .参数 lpData

.DLL命令 CopyMemory_SERVICE_DESCRIPTION, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 目标数据地址, SERVICE_DESCRIPTION, , lpvDest
    .参数 源数据, 整数型, , lpvSource
    .参数 尺寸, 整数型, , cbCopy

.DLL命令 GetFileVersionInfoSize, 整数型, "version.dll", "GetFileVersionInfoSizeA"
    .参数 文件路径, 文本型
    .参数 保留, 整数型

.DLL命令 GetFileVersionInfo, 逻辑型, "version.dll", "GetFileVersionInfoA"
    .参数 文件路径, 文本型
    .参数 保留, 整数型
    .参数 缓冲区长度, 整数型, , 通过GetFileVersionInfoSize获取的长度
    .参数 数据, 字节集, 传址

.DLL命令 VerQueryValue_x, 整数型, "VERSION.DLL", "VerQueryValueA"
    .参数 内存块首区域位置, 字节集, 传址
    .参数 版本信息相对路径, 文本型, 传址
    .参数 装载缓冲变量, 整数型, 传址
    .参数 缓冲变量长度, 整数型, 传址

.DLL命令 VerQueryValue, 逻辑型, "version.dll", "VerQueryValueA"
    .参数 pBlock, 字节集, 传址
    .参数 lpSubBlock, 文本型
    .参数 lplpBuffer, 整数型, 传址
    .参数 puLen, 整数型, 传址

.DLL命令 lstrcpy, 整数型, "Kernel32.dll", "lstrcpyA"
    .参数 lpString1, 文本型
    .参数 lpString2, 整数型

.DLL命令 GetProcessMemoryInfo, 整数型, "psapi.dll", "GetProcessMemoryInfo", , 取进程内存信息_
    .参数 Process, 整数型, , 进程句柄
    .参数 ppsmemCounters, 整数型, , 进程内存结构
    .参数 cb, 整数型, , 结构大小

.DLL命令 CreateSemaphore, 整数型, "kernel32.dll", "CreateSemaphoreA", 公开, 创建一个新的信号机  如执行成功，返回信号机对象的句柄；零表示出错。会设置GetLastError。即使返回一个有效的句柄，但倘若它指出同名的一个信号机已经存在，那么GetLastError也会返回ERROR_ALREADY_EXISTS
    .参数 信号量安全特性, 整数型, , 安全结构。默认可不写，留0即可。
    .参数 信号量初始计数, 整数型, , 设置信号机的初始计数。
    .参数 信号量最大计数, 整数型, , 设置信号机的最大计数
    .参数 信号量对象的名称, 文本型, , 指定信号机对象的名称。名字是用作多进程同步的，一般不使用。

.DLL命令 OpenSemaphore, 整数型, "kernel32.dll", "OpenSemaphoreA", 公开, 打开命名信号量对象
    .参数 dwDesiredAccess, 整数型, , 权限,2031619
    .参数 是否继承, 逻辑型, , 是否继承句柄
    .参数 lpName, 文本型, , 名称

.DLL命令 ReleaseSemaphore, 逻辑型, "kernel32.dll", "ReleaseSemaphore", 公开, 释放信号量对象
    .参数 hSemaphore, 整数型, , 句柄
    .参数 lReleaseCount, 整数型, , 增加的数量
    .参数 lpPreviousCount, 整数型, 传址, 之前的数量

.DLL命令 COM_创建GUID_, 整数型, "ole32.dll", "CoCreateGuid", , CoCreateGuid
    .参数 GUID, GUID, 传址

.DLL命令 StringFromGUID, 整数型, "ole32.dll", "StringFromGUID2", , GUID到文本ID...把一个GUID转转成文本型.返回值如 {72C24DD5-D70A-438B-8A42-98424B88AFB8}
    .参数 GUID, GUID
    .参数 宽文, 字节集, , 宽文本型
    .参数 长度, 整数型

.DLL命令 GetDeviceCaps, 整数型, "gdi32.dll", "GetDeviceCaps", 公开, 获取系统DPI大小
    .参数 HDC, 整数型, , 0
    .参数 int, 整数型, , 0

.DLL命令 WaitForInputIdle, 整数型, "user32.dll", "WaitForInputIdle"
    .参数 hProcess, 整数型, , 0
    .参数 dwMilliseconds, 整数型, , 0

.DLL命令 GetDeviceGammaRamp, 逻辑型, "gdi32.dll", "GetDeviceGammaRamp"
    .参数 HDC, 整数型, , 0
    .参数 LPVOID, 整数型, , 0

.DLL命令 IsBadReadPtr, 逻辑型, "kernel32.dll", "IsBadReadPtr"
    .参数 lpMemory, 整数型, , 目标地址指针
    .参数 dwSize, 整数型, , 长度

.DLL命令 IsBadCodePtr, 逻辑型, "kernel32.dll", "IsBadCodePtr"
    .参数 lpMemory, 整数型, , 目标内存地址指针

.DLL命令 RtlMoveMemory_MOUSEHOOKSTRUCT, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, MOUSEHOOKSTRUCT
    .参数 Source, 整数型
    .参数 cbCopy, 整数型

.DLL命令 GetInterfaceInfo, 整数型, "IPHLPAPI.DLL", "GetInterfaceInfo", , 　
    .参数 pIfTable, 整数型
    .参数 dwOutBufLen, 整数型, 传址

.DLL命令 LocalSize_IP_INTERFACE_INFO, 整数型, "kernel32.dll", "LocalSize", , 返回本地内存块大小,类似sizeof
    .参数 hMem, IP_INTERFACE_INFO, 传址

.DLL命令 LocalSize_IP_ADAPTER_INDEX_MAP, 整数型, "kernel32.dll", "LocalSize", , 返回本地内存块大小,类似sizeof
    .参数 hMem, IP_ADAPTER_INDEX_MAP, 传址

.DLL命令 CopyMemory_P2IP_INTERFACE_INFO, , "kernel32.dll", "RtlMoveMemory"
    .参数 pDest, IP_INTERFACE_INFO, 传址
    .参数 pSrc, 整数型
    .参数 ByteLen, 整数型

.DLL命令 CopyMemory_P2IP_ADAPTER_INDEX_MAP_Array, , "kernel32.dll", "RtlMoveMemory"
    .参数 pDest, IP_ADAPTER_INDEX_MAP, 传址 数组
    .参数 pSrc, 整数型
    .参数 ByteLen, 整数型

.DLL命令 LocalSize_IP_PER_ADAPTER_INFO, 整数型, "kernel32.dll", "LocalSize", , 返回本地内存块大小,类似sizeof
    .参数 hMem, IP_PER_ADAPTER_INFO_彗星, 传址

.DLL命令 CopyMemory_P2IP_PER_ADAPTER_INFO, , "kernel32.dll", "RtlMoveMemory"
    .参数 pDest, IP_PER_ADAPTER_INFO_彗星
    .参数 pSrc, 整数型
    .参数 ByteLen, 整数型

.DLL命令 GetPerAdapterInfo_Ptr, 整数型, "IPHLPAPI.DLL", "GetPerAdapterInfo", , 　
    .参数 IfIndex, 整数型
    .参数 pPerAdapterInfo, 整数型
    .参数 pOutBufLen, 整数型, 传址

.DLL命令 MprConfigGetFriendlyName, 整数型, "mprapi.dll", "MprConfigGetFriendlyName", , 　
    .参数 hMprConfig, 整数型
    .参数 pszGuidName, 字节集
    .参数 pszBuffer, 字节集
    .参数 dwBufferSize, 整数型

.DLL命令 MprConfigServerConnect, 整数型, "mprapi.dll", "MprConfigServerConnect", , 　
    .参数 lpwsServerName, 整数型
    .参数 phMprConfig, 整数型, 传址

.DLL命令 FormatMessageA, 整数型, "kernel32.dll", "FormatMessageA"
    .参数 dwFlags, 整数型
    .参数 lpSource, 整数型
    .参数 dwMessageId, 整数型
    .参数 dwLanguageId, 整数型
    .参数 lpBuffer, 整数型
    .参数 nSize, 整数型
    .参数 Arguments, 整数型

.DLL命令 SendMessageTimeoutW, 整数型, "user32.dll", "SendMessageTimeoutW", , 同步发送消息
    .参数 hWnd, 整数型, , 要接收消息的一个窗口的句柄
    .参数 Msg, 整数型, , 消息的标识符
    .参数 wParam, 整数型, , 消息1
    .参数 lParam, 整数型, , 消息2
    .参数 fuFlags, 整数型, , 下述常数的一个或多个SMTO_ABORTIFHUNG如目标进程挂起
    .参数 uTimeout, 整数型, , 超时值
    .参数 lpdwResult, 整数型, , 用于装载函数结果的一个变量

.DLL命令 lstrlenW, 整数型, "kernel32.dll", "lstrlenW"
    .参数 lpString, 整数型

.DLL命令 EnumClipboardFormats, 整数型, "user32.dll", "EnumClipboardFormats"
    .参数 format, 整数型

.DLL命令 GetClipboardFormatNameA, 整数型, "user32.dll", "GetClipboardFormatNameA", 公开
    .参数 iFormat, 整数型
    .参数 psBuffer, 文本型
    .参数 iMaxCount, 整数型

.DLL命令 RtlMoveMemory, 整数型, "kernel32.dll", "RtlMoveMemory", 公开
    .参数 Destination, 整数型
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 DwmUpdateThumbnailProperties, 整数型, "Dwmapi.dll", "DwmUpdateThumbnailProperties", 公开, 更新桌面窗口管理器（DWM）缩略图的属性  返回0为成功
    .参数 HTHUMBNAIL, 整数型, , hThumbnailId  略缩图指针
    .参数 DWM_THUMBNAIL_PROPERTIES, 缩略图属性, , 略缩图属性

.DLL命令 DwmUnregisterThumbnail, 整数型, "Dwmapi.dll", "DwmUnregisterThumbnail", 公开, 删除由DwmRegisterThumbnail函数创建的桌面窗口管理器（DWM）缩略图关系
    .参数 HTHUMBNAIL, 整数型, , hThumbnailId 略缩图指针

.DLL命令 DwmSetIconicThumbnail, 整数型, "Dwmapi.dll", "DwmSetIconicThumbnail", 公开, 在窗口或选项卡上设置静态的图标位图，以用作缩略图表示。任务栏可以将此位图用作窗口或选项卡的缩略图切换目标
    .参数 HWND, 整数型
    .参数 HBITMAP, 整数型, , 位图句柄
    .参数 DWORD, 整数型, , 显示选项 0=无框架；1=有框架

.DLL命令 DwmRegisterThumbnail, 整数型, "Dwmapi.dll", "DwmRegisterThumbnail", 公开, 在目标窗口和源窗口之间创建桌面窗口管理器（DWM）缩略图关系
    .参数 HWND, 整数型, , hwndDestination
    .参数 HWND, 整数型, , hwndSource
    .参数 PHTHUMBNAIL, 整数型, 传址, phThumbnailId  略缩图指针

.DLL命令 DwmIsCompositionEnabled, 整数型, "Dwmapi.dll", "DwmIsCompositionEnabled", 公开, 获取一个值，该值指示是否启用了桌面窗口管理器（DWM）组合。运行Windows 7或更早版本的计算机上的应用程序可以通过处理WM_DWMCOMPOSITIONCHANGED通知来侦听组合状态更改。
    .参数 pfEnabled, 逻辑型, 传址, 指向一个值的指针，当该函数成功返回时，如果启用了DWM组合，则该值为TRUE ; 否则，FALSE。

.DLL命令 DwmEnableComposition, 整数型, "Dwmapi.dll", "DwmEnableComposition", 公开, 启用或禁用桌面窗口管理器（DWM）组合。
    .参数 uCompositionAction, 整数型

.DLL命令 DwmExtendFrameIntoClientArea, 整数型, "Dwmapi.dll", "DwmExtendFrameIntoClientArea", 公开, 将窗口框架扩展到客户端区域。
    .参数 hWnd, 整数型
    .参数 pMarInset, 精易_位置和大小, 传址

.DLL命令 CreateStreamOnHGlobal_Object, 整数型, "ole32.dll", "CreateStreamOnHGlobal"
    .参数 hGlobal, 整数型
    .参数 fDeleteOnRelease, 逻辑型
    .参数 ppstm, 对象, 传址

.DLL命令 GdipCreateBitmapFromScan0, 整数型, "GdiPlus.dll", "GdipCreateBitmapFromScan0"
    .参数 width, 整数型
    .参数 height, 整数型
    .参数 stride, 整数型
    .参数 format, 整数型
    .参数 scan0, 整数型
    .参数 bitmap, 整数型, 传址

.DLL命令 GdipCreateSolidFill, 整数型, "GdiPlus.dll", "GdipCreateSolidFill"
    .参数 color, 整数型
    .参数 brush, 整数型, 传址

.DLL命令 GdipDrawImageRectRect_NULL, 整数型, "GdiPlus.dll", "GdipDrawImageRectRect"
    .参数 graphics, 整数型
    .参数 image, 整数型
    .参数 dstx, 小数型
    .参数 dsty, 小数型
    .参数 dstwidth, 小数型
    .参数 dstheight, 小数型
    .参数 srcx, 小数型
    .参数 srcy, 小数型
    .参数 srcwidth, 小数型
    .参数 srcheight, 小数型
    .参数 srcUnit, 整数型
    .参数 imageAttributes, 整数型
    .参数 callback, 整数型
    .参数 callbackData, 整数型

.DLL命令 GdipFillRectangle, 整数型, "GdiPlus.dll", "GdipFillRectangle"
    .参数 graphics, 整数型
    .参数 brush, 整数型
    .参数 x, 小数型
    .参数 y, 小数型
    .参数 width, 小数型
    .参数 height, 小数型

.DLL命令 GdipGetImageGraphicsContext, 整数型, "GdiPlus.dll", "GdipGetImageGraphicsContext"
    .参数 image, 整数型
    .参数 graphics, 整数型, 传址

.DLL命令 GetObjectPtr, 整数型, "Kernel32.dll", "lstrcpyn"
    .参数 lpString1, 对象, 传址
    .参数 lpString2, 对象, 传址
    .参数 iMaxLength, 整数型

.DLL命令 DwmEnableBlurBehindWindow, 整数型, "Dwmapi.dll", "DwmEnableBlurBehindWindow", 公开, 在指定窗口上启用模糊效果。
    .参数 hWnd, 整数型
    .参数 pBlurBehind, 模糊属性, 传址

.DLL命令 GdipGetPropertyItemSize, 整数型, "gdiplus.dll", "GdipGetPropertyItemSize", 公开
    .参数 Image, 整数型
    .参数 propId, 整数型
    .参数 size, 整数型, 传址

.DLL命令 GdipGetPropertyItem, 整数型, "gdiplus.dll", "GdipGetPropertyItem", 公开
    .参数 Image, 整数型
    .参数 propId, 整数型
    .参数 propSize, 整数型
    .参数 buffer, 字节集

.DLL命令 GetScrollInfo, 整数型, "user32.dll", "GetScrollInfo", , 　
    .参数 hWnd, 整数型
    .参数 n, 整数型
    .参数 lpScrollInfo, SCROLLINFO

.DLL命令 LocalSize_SCROLLBARINFO, 整数型, "kernel32.dll", "LocalSize", , 返回本地内存块大小　
    .参数 hMem, SCROLLBARINFO

.DLL命令 GetScrollBarInfo, 整数型, "user32.dll", "GetScrollBarInfo", , 　
    .参数 hwnd, 整数型
    .参数 idObject, 整数型
    .参数 psbi, SCROLLBARINFO

.DLL命令 LocalSize_SCROLLINFO, 整数型, "kernel32.dll", "LocalSize", , 返回本地内存块大小　
    .参数 hMem, SCROLLINFO

.DLL命令 GetCaretPos, 整数型, "user32.dll", "GetCaretPos", 公开, 将插入标记的位置（按客户区坐标）信息拷贝到指定的POINT结构中
    .参数 IpPoint, 精易_坐标

.DLL命令 EnumDisplayMonitors, 整数型, "user32.dll", "EnumDisplayMonitors", 公开, ,
    .参数 hdc, 整数型
    .参数 lprcClip, 整数型
    .参数 lpfnEnum, 整数型
    .参数 dwData, 整数型

.DLL命令 ChangeClipboardChain, 逻辑型, "user32.dll", "ChangeClipboardChain", 公开, 从剪贴板查看器链中删除指定的窗口。
    .参数 hWndRemove, 整数型, , 要从链中移除的窗口的句柄。句柄必须已传递给SetClipboardViewer函数。
    .参数 hWndNewNext, 整数型, , 剪贴板查看器链中hWndRemove窗口后面的窗口句柄 。（这是SetClipboardViewer返回的句柄，除非响应WM_CHANGECBCHAIN消息更改了序列。）

.DLL命令 SetClipboardViewer, 整数型, "user32.dll", "SetClipboardViewer", 公开, 将指定的窗口添加到剪贴板查看器链。每当剪贴板的内容发生变化时，剪贴板查看器窗口将收到WM_DRAWCLIPBOARD消息。
    .参数 hWndNewViewer, 整数型, , 标识要添加到剪贴板链的窗口。

.DLL命令 GetClipboardViewer, 整数型, "user32.dll", "GetClipboardViewer", 公开, 检索剪贴板查看器链中第一个窗口的句柄。

.DLL命令 GetSystemTime, 整数型, "kernel32.dll", "GetSystemTime", , 获取当前系统时间
    .参数 lpSystemTime, 精易_时间, 传址

.DLL命令 SHGetFolderPathA, 整数型, "Shell32.dll", "SHGetFolderPathA", 公开
    .参数 hWnd, 整数型
    .参数 csidl, 整数型
    .参数 hToken, 整数型
    .参数 dwFlags, 整数型
    .参数 pszPath, 整数型

.DLL命令 GetComboBoxInfo, 逻辑型, "user32.dll", "GetComboBoxInfo", 公开, ,
    .参数 hwndCombo, 整数型, , 0
    .参数 pcbi, COMBOBOXINFO, , 0

.DLL命令 GetExtendedTcpTable, 整数型, "iphlpapi.dll", "GetExtendedTcpTable", , https://msdn.microsoft.com/en-us/library/aa365928.aspx
    .参数 pTcpTable, 整数型, , 指向表结构的指针，其中包含应用程序可用的已过滤TCP端点。有关如何确定基于特定输入参数组合返回的表的类型的信息，请参阅本文档后面的备注部分。
    .参数 pdwSize, 整数型, 传址, pTcpTable中返回的结构的估计大小（以字节为单位）。如果此值设置得太小，则此函数将返回ERROR_INSUFFICIENT_BUFFER，此字段将包含正确的结构大小。
    .参数 bOrder, 逻辑型, , 指定TCP连接表是否应该排序的值。如果此参数设置为TRUE，则表中的TCP端点按升序排列，从本地IP地址开始。如果此参数设置为FALSE，表中的TCP端点将按照它们被检索的顺序显示。
    .参数 ulAf, 整数型, , TCP端点使用的IP版本#AF_INET=使用IPv4。#AF_INET6=使用IPv6。
    .参数 TableClass, 整数型, , 要检索的TCP表结构的类型。此参数可以是TCP_TABLE_CLASS枚举中的值之一。
    .参数 Reserved, 整数型, , 保留。该值必须为零。

.DLL命令 GetExtendedUdpTable, 整数型, "iphlpapi.dll", "GetExtendedUdpTable", , https://msdn.microsoft.com/en-us/library/aa365930(v=vs.85).aspx
    .参数 pUdpTable, 整数型, , 指向表结构的指针，其中包含应用程序可用的已过滤TCP端点。有关如何确定基于特定输入参数组合返回的表的类型的信息，请参阅本文档后面的备注部分。
    .参数 pdwSize, 整数型, 传址, pTcpTable中返回的结构的估计大小（以字节为单位）。如果此值设置得太小，则此函数将返回ERROR_INSUFFICIENT_BUFFER，此字段将包含正确的结构大小。
    .参数 bOrder, 逻辑型, , 指定TCP连接表是否应该排序的值。如果此参数设置为TRUE，则表中的TCP端点按升序排列，从本地IP地址开始。如果此参数设置为FALSE，表中的TCP端点将按照它们被检索的顺序显示。
    .参数 ulAf, 整数型, , TCP端点使用的IP版本#AF_INET=使用IPv4。#AF_INET6=使用IPv6。
    .参数 TableClass, 整数型, , 要检索的TCP表结构的类型。此参数可以是TCP_TABLE_CLASS枚举中的值之一。
    .参数 Reserved, 整数型, , 保留。该值必须为零。

.DLL命令 IsTextUnicode, 逻辑型, "advapi32", "IsTextUnicode", , IsTextUnicode 函数是确定一个缓冲区是否可能包含 Unicode 文本，包含Unicode 文本返回真。
    .参数 lpv, 字节集, , 指向要检查的输入缓冲区
    .参数 iSize, 整数型, , 由lpv指向的缓冲区大小，以字节为单位。
    .参数 lpiResult, 整数型, 传址, 返回值，是Unicode 文本返回非零值，不是返回0

.DLL命令 PostThreadMessageA, 逻辑型, "user32.dll", "PostThreadMessageA"
    .参数 idThread, 整数型, , 0
    .参数 Msg, 整数型, , 0
    .参数 wParam, 整数型, , 0
    .参数 lParam, 整数型, , 0

.DLL命令 LoadCursorW, 整数型, "user32.dll", "LoadCursorW", , 该函数从一个与应用事例相关的可执行文件（EXE文件）中载入指定的光标资源。该函数已被Loadlmage函数替代。
    .参数 hInstance, 整数型, , 标识一个模块事例，它的可执行文件包含要载入的光标
    .参数 lpCursorName, 整数型, , 指向以NULL结束的字符串的指针，该字符串存有等载入的光标资源名。常量 #IDC_ 开头

.DLL命令 SetWindowCompositionAttribute, 逻辑型, "user32.dll", "SetWindowCompositionAttribute"
    .参数 hwnd, 整数型
    .参数 pAttrData, WINDOWCOMPOSITIONATTRIBDATA

.DLL命令 IsDBCSLeadByte, 逻辑型, "kernel32.dll", "IsDBCSLeadByte"
    .参数 TestChar, 字节型

.DLL命令 MprConfigServerDisconnect, , "Mprapi.dll", "MprConfigServerDisconnect"
    .参数 hMprConfig, 整数型, , 0

.DLL命令 DeviceIoControl_DESCRIPTOR, 逻辑型, "Kernel32.dll", "DeviceIoControl"
    .参数 Handle, 整数型
    .参数 dwIoControlCode, 整数型
    .参数 lpInBuffer, STORAGE_PROPERTY_QUERY, 传址
    .参数 nInBufferSize, 整数型
    .参数 lpOutBuffer, STORAGE_DEVICE_DESCRIPTOR, 传址
    .参数 nOutBufferSize, 整数型
    .参数 lpBytesReturned, 整数型, 传址
    .参数 lpOverlapped, 整数型

.DLL命令 Wow64DisableWow64FsRedirection, 逻辑型, "Kernel32.dll", "Wow64DisableWow64FsRedirection", , 禁用调用线程的文件系统重定向
    .参数 OldValue, 整数型

.DLL命令 Wow64RevertWow64FsRedirection, 逻辑型, "Kernel32.dll", "Wow64RevertWow64FsRedirection", , 恢复调用线程的文件系统重定向
    .参数 OldValue, 整数型

.DLL命令 malloc, 整数型, "msvcrt.dll", "@malloc"
    .参数 size, 整数型

.DLL命令 free, 整数型, "msvcrt.dll", "@free"
    .参数 ptr, 整数型

.DLL命令 API_ReadProcessMemory_int_lua, 逻辑型, "Kernel32.dll", "ReadProcessMemory"
    .参数 进程句柄, 整数型
    .参数 内存地址, 整数型
    .参数 缓冲指针, 整数型, 传址
    .参数 内存长度, 整数型
    .参数 实际长度, 整数型

.DLL命令 API_ReadProcessMemory_Ptr_lua, 逻辑型, "Kernel32.dll", "ReadProcessMemory"
    .参数 进程句柄, 整数型
    .参数 内存地址, 整数型
    .参数 缓冲指针, 整数型
    .参数 内存长度, 整数型
    .参数 实际长度, 整数型, 传址

.DLL命令 API_lstrlen_lua, 整数型, "kernel32.dll", "lstrlenA"
    .参数 字符串, 文本型

.DLL命令 API_GlobalAlloc_lua, 整数型, "kernel32.dll", "GlobalAlloc"
    .参数 内存标志, 整数型
    .参数 内存大小, 整数型

.DLL命令 API_GlobalFree_lua, 整数型, "kernel32.dll", "GlobalFree"
    .参数 内存指针, 整数型

.DLL命令 API_WaitForSingleObject_lua, 整数型, "kernel32.dll", "WaitForSingleObject"
    .参数 线程句柄, 整数型
    .参数 等待时间, 整数型

.DLL命令 API_GetExitCodeThread_lua, 整数型, "kernel32.dll", "GetExitCodeThread"
    .参数 线程句柄, 整数型
    .参数 返回结果, 整数型, 传址

.DLL命令 API_CopyToBin_FromInt_lua, , "kernel32.dll", "RtlMoveMemory"
    .参数 附加字节, 字节集
    .参数 内存指针, 整数型, 传址
    .参数 拷贝长度, 整数型

.DLL命令 API_VirtualAllocEx_lua, 整数型, "kernel32.dll", "VirtualAllocEx"
    .参数 进程句柄, 整数型
    .参数 保留地址, 整数型
    .参数 内存大小, 整数型
    .参数 分配类型, 整数型
    .参数 保护方式, 整数型

.DLL命令 API_VirtualFreeEx_lua, 整数型, "kernel32.dll", "VirtualFreeEx"
    .参数 进程句柄, 整数型
    .参数 释放地址, 整数型
    .参数 地址大小, 整数型
    .参数 释放方式, 整数型

.DLL命令 API_WriteProcessMemory_lua, 逻辑型, "kernel32.dll", "WriteProcessMemory"
    .参数 进程句柄, 整数型
    .参数 内存地址, 整数型
    .参数 缓冲指针, 字节集
    .参数 内存长度, 整数型
    .参数 实际长度, 整数型, 传址

.DLL命令 API_CreateRemoteThread_lua, 整数型, "kernel32.dll", "CreateRemoteThread"
    .参数 进程句柄, 整数型
    .参数 线程属性, 整数型
    .参数 堆栈大小, 整数型
    .参数 起始地址, 整数型
    .参数 待传参数, 整数型
    .参数 线程状态, 整数型
    .参数 线程PID, 整数型

.DLL命令 API_CreateToolhelp32Snapshot_lua, 整数型, "kernel32.dll", "CreateToolhelp32Snapshot"
    .参数 结构大小, 整数型
    .参数 进程对象, 整数型

.DLL命令 API_Process32First_lua, 整数型, "kernel32.dll", "Process32First"
    .参数 进程句柄, 整数型
    .参数 进程信息, 进程型_lua

.DLL命令 API_Process32Next_lua, 整数型, "kernel32.dll", "Process32Next"
    .参数 进程句柄, 整数型
    .参数 进程信息, 进程型_lua

.DLL命令 API_Module32First_lua, 整数型, "kernel32.dll", "Module32First"
    .参数 快照句柄, 整数型
    .参数 模块信息, 模块型_lua

.DLL命令 API_Module32Next_lua, 整数型, "kernel32.dll", "Module32Next"
    .参数 快照句柄, 整数型
    .参数 模块信息, 模块型_lua

.DLL命令 API_GetCurrentProcess_lua, 整数型, "kernel32", "GetCurrentProcess"

.DLL命令 API_OpenProcess_lua, 整数型, "kernel32.dll", "OpenProcess"
    .参数 进程对象, 整数型
    .参数 继承句柄, 整数型
    .参数 进程标识符, 整数型

.DLL命令 API_CloseHandle_lua, 逻辑型, "Kernel32", "CloseHandle"
    .参数 对象句柄, 整数型

.DLL命令 API_ReadProcessMemory_字节集_lua, 整数型, "kernel32.dll", "ReadProcessMemory"
    .参数 进程句柄, 整数型
    .参数 内存地址, 整数型
    .参数 缓冲指针, 字节集, 传址
    .参数 内存长度, 整数型
    .参数 实际长度, 整数型, 传址

.DLL命令 API_ReadProcessMemory_整数型_lua, 整数型, "kernel32.dll", "ReadProcessMemory"
    .参数 进程句柄, 整数型
    .参数 内存地址, 整数型
    .参数 缓冲指针, 整数型, 传址
    .参数 内存长度, 整数型
    .参数 实际长度, 整数型

.DLL命令 API_WriteProcessMemory_字节集_lua, 整数型, "kernel32.dll", "WriteProcessMemory"
    .参数 进程句柄, 整数型
    .参数 内存地址, 整数型
    .参数 缓冲指针, 字节集, 传址
    .参数 内存长度, 整数型
    .参数 实际长度, 整数型

.DLL命令 API_WriteProcessMemory_整数型_lua, 整数型, "kernel32.dll", "WriteProcessMemory"
    .参数 进程句柄, 整数型
    .参数 内存地址, 整数型
    .参数 缓冲指针, 整数型, 传址
    .参数 内存长度, 整数型
    .参数 实际长度, 整数型

.DLL命令 _vsnprintf_s, 整数型, "msvcrt.dll", "@_vsnprintf_s"
    .参数 _Buffer, 整数型, , 缓冲区指针
    .参数 _BufferCount, 整数型, , 缓冲区长度
    .参数 _MaxCount, 整数型, , 缓冲区字符最大长度
    .参数 _Format, 整数型, , 格式化文本
    .参数 _ArgList, 整数型, , va_list

.DLL命令 _vsnwprintf_s, 整数型, "msvcrt.dll", "@_vsnwprintf_s"
    .参数 _Buffer, 整数型, , 缓冲区指针
    .参数 _BufferCount, 整数型, , 缓冲区长度
    .参数 _MaxCount, 整数型, , 缓冲区字符最大长度
    .参数 _Format, 整数型, , 格式化文本
    .参数 _ArgList, 整数型, , va_list

.DLL命令 CreateDirectoryW, 逻辑型, "Kernel32.dll", "CreateDirectoryW"
    .参数 bFolderName, 整数型
    .参数 lpSecurityAttributes, 整数型

.DLL命令 SetThreadExecutionState, 整数型, "kernel32.dll", "SetThreadExecutionState"
    .参数 esFlags, 整数型

.DLL命令 WTSRegisterSessionNotification, 逻辑型, "wtsapi32.dll", "WTSRegisterSessionNotification"
    .参数 hWnd, 整数型, , HWND
    .参数 dwFlags, 整数型, , DWORD #NOTIFY_FOR_*

.DLL命令 WTSUnRegisterSessionNotification, 逻辑型, "wtsapi32.dll", "WTSUnRegisterSessionNotification"
    .参数 hWnd, 整数型, , HWND

.DLL命令 GetSystemFirmwareTable, 整数型, "Kernel32.dll", "GetSystemFirmwareTable"
    .参数 FirmwareTableProviderSignature, 整数型
    .参数 FirmwareTableID, 整数型
    .参数 pFirmwareTableBuffer, 整数型
    .参数 BufferSize, 整数型

.DLL命令 NetUserEnum, 整数型, "Netapi32.dll", "NetUserEnum"
    .参数 servername, 整数型
    .参数 level, 整数型
    .参数 filter, 整数型
    .参数 bufptr, 整数型
    .参数 prefmaxlen, 整数型
    .参数 entriesread, 整数型, 传址
    .参数 totalentries, 整数型, 传址
    .参数 OPTIONAL, 整数型, 传址

.DLL命令 NetApiBufferFree, 整数型, "Netapi32.dll", "NetApiBufferFree"
    .参数 Buffer, 整数型

.DLL命令 GetProcessTimes, 逻辑型, "kernel32.dll", "GetProcessTimes"
    .参数 hProcess, 整数型
    .参数 lpCreationTime, FILETIME
    .参数 lpExitTime, FILETIME
    .参数 lpKernelTime, FILETIME
    .参数 lpUserTime, FILETIME

.DLL命令 SetThreadPriority, 逻辑型, "kernel32.dll", "SetThreadPriority", , 如果函数成功，返回值是非零的。如果函数失败，返回值为零。
    .参数 hThread, 整数型, , 一个要设置优先级值的线程的句柄。这个句柄必须有THREAD_SET_INFORMATION或THREAD_SET_LIMITED_INFORMATION的权限。
    .参数 nPriority, 整数型, , THREAD_MODE_BACKGROUND_BEGIN 0x00010000 开始后台处理模式系统降低了线程的资源调度优先级，这样它就可以在不显著影响前台活动的情况下执行后台工作。这个值只能在hThread是当前线程的句柄时指定。如果线程已经处于后台处理模式，该函数将失败。Windows Server 2003和Windows XP/2000:不支持此值。THREAD_MODE_BACKGROUND_END 0x00020000 结束后台处理模式。系统恢复线程进入后台处理模式之前的资源调度优先级。这个值只能在hThread是当前线程的句柄时指定。如果线程不在后台处理模式下，函数将失败。Windows Server 2003和Windows XP/2000:不支持此值。THREAD_PRIORITY_ABOVE_NORMAL 1 priority类上1点。比优先级类低1点。优先级比优先级类高2点。THREAD_PRIORITY_IDLE - 15idle_priority_class的基优先级为1，低于NORMAL_PRIORITY_CLASS、NORMAL_PRIORITY_CLASS、高于NORMAL_PRIORITY_CLASS或HIGH_PRIORITY_CLASS进程的基优先级为16,REALTIME_PRIORITY_CLASS进程的基优先级为16。比优先级类低2点。优先级类的0Normal优先级。THREAD_PRIORITY_TIME_CRITICAL处理IDLE_PRIORITY_CLASS的基优先级为15，低于NORMAL_PRIORITY_CLASS、NORMAL_PRIORITY_CLASS、ABOVE_NORMAL_PRIORITY_CLASS或HIGH_PRIORITY_CLASS处理的基优先级为31,REALTIME_PRIORITY_CLASS处理的基优先级为31。

.DLL命令 ExitProcess, , "kernel32.dll", "ExitProcess"
    .参数 uExitCode, 整数型, , 0

.DLL命令 GetModuleFileNameA, 整数型, "kernel32.dll", "GetModuleFileNameA"
    .参数 hModule, 整数型
    .参数 lpFilename, 文本型
    .参数 nSize, 整数型

.DLL命令 GetModuleFileNameW, 整数型, "kernel32.dll", "GetModuleFileNameW"
    .参数 hModule, 整数型
    .参数 lpFilename, 字节集
    .参数 nSize, 整数型

.DLL命令 Process32FirstW, 逻辑型, "kernel32.dll", "Process32FirstW"
    .参数 hSnapshot, 整数型, , 0
    .参数 lppe, PROCESSENTRY32W, , 0

.DLL命令 Process32NextW, 逻辑型, "kernel32.dll", "Process32NextW"
    .参数 hSnapshot, 整数型, , 0
    .参数 lppe, PROCESSENTRY32W, , 0

.DLL命令 GetProcessImageFileNameW, 整数型, "psapi.dll", "GetProcessImageFileNameW"
    .参数 hProcess, 整数型
    .参数 lpImageFileName, 字节集
    .参数 nSize, 整数型

.DLL命令 QueryDosDeviceW, 整数型, "kernel32.dll", "QueryDosDeviceW"
    .参数 lpDeviceName, 字节集
    .参数 lpTargetPath, 字节集
    .参数 ucchMax, 整数型

.DLL命令 FindFirstFileW, 整数型, "kernel32.dll", "FindFirstFileW"
    .参数 lpFileName, 字节集
    .参数 lpFindFileData, WIN32_FIND_DATAW

.DLL命令 FindNextFileW, 逻辑型, "kernel32.dll", "FindNextFileW"
    .参数 hFindFile, 整数型
    .参数 lpFindFileData, WIN32_FIND_DATAW

.DLL命令 FindClose, 逻辑型, "kernel32.dll", "FindClose"
    .参数 hFindFile, 整数型

.DLL命令 wcslen, 整数型, "msvcrt.dll", "@wcslen", 公开
    .参数 _String, 字节集

.DLL命令 wcscmp, 整数型, "ntdll.dll", "@wcscmp", 公开
    .参数 _String1, 字节集
    .参数 _String2, 字节集

.DLL命令 RegOpenKeyExW, 整数型, "advapi32.dll", "RegOpenKeyExW"
    .参数 hKey, 整数型
    .参数 lpSubKey, 字节集
    .参数 ulOptions, 整数型
    .参数 samDesired, 整数型
    .参数 phkResult, 整数型, 传址

.DLL命令 RegQueryValueExW, 整数型, "advapi32.dll", "RegQueryValueExW"
    .参数 hKey, 整数型
    .参数 lpValueName, 字节集
    .参数 lpReserved, 整数型
    .参数 lpType, 整数型, 传址
    .参数 lpData, 整数型
    .参数 lpcbData, 整数型, 传址

.DLL命令 RegSetValueExW, 整数型, "advapi32.dll", "RegSetValueExW"
    .参数 hKey, 整数型
    .参数 lpValueName, 字节集
    .参数 Reserved, 整数型
    .参数 dwType, 整数型
    .参数 lpData, 整数型
    .参数 cbData, 整数型

.DLL命令 MapVirtualKeyA, 整数型, "user32.dll", "MapVirtualKeyA"
    .参数 uCode, 整数型
    .参数 uMapType, 整数型

.DLL命令 GetKeyNameTextA, 整数型, "user32.dll", "GetKeyNameTextA"
    .参数 lParam, 整数型
    .参数 lpString, 文本型
    .参数 nSize, 整数型

.DLL命令 RegCreateKeyExW, 整数型, "advapi32.dll", "RegCreateKeyExW"
    .参数 hKey, 整数型
    .参数 lpSubKey, 字节集
    .参数 Reserved, 整数型
    .参数 lpClass, 整数型
    .参数 dwOptions, 整数型
    .参数 samDesired, 整数型
    .参数 lpSecurityAttributes, 整数型
    .参数 phkResult, 整数型, 传址
    .参数 lpdwDisposition, 整数型

.DLL命令 GetSystemDEPPolicy, 整数型, "Kernel32.dll", "GetSystemDEPPolicy", , 获取系统的数据执行保护（DEP）策略设置

.DLL命令 SetProcessDEPPolicy, 逻辑型, "Kernel32.dll", "SetProcessDEPPolicy", , 更改32位进程的数据执行保护（DEP）和DEP-ATL转换模拟设置
    .参数 dwFlags, 整数型

.DLL命令 GetSystemTimeAsFileTime, 整数型, "kernel32.dll", "GetSystemTimeAsFileTime", , 获取当前系统时间
    .参数 lpSystemTimeAsFileTime, 整数型, , 指向一个用于装载系统时间的 FILETIME 结构

.DLL命令 SetWindowDisplayAffinity, 逻辑型, "User32.dll", "SetWindowDisplayAffinity"
    .参数 hWnd, 整数型
    .参数 dwAffinity, 整数型

.DLL命令 SetScrollPos, , "user32.dll", "SetScrollPos"
    .参数 hwnd, 整数型
    .参数 Nbar, 整数型
    .参数 nPos, 整数型
    .参数 bRedraw, 逻辑型

.DLL命令 memset, 整数型, "msvcrt.dll", "@memset", 公开
    .参数 p, 整数型
    .参数 by, 字节型
    .参数 size, 整数型

.DLL命令 strlen, 整数型, "msvcrt.dll", "@strlen"
    .参数 lpsz, 整数型

.DLL命令 memcpy, 整数型, "msvcrt.dll", "@memcpy", 公开
    .参数 p, 整数型
    .参数 p, 整数型
    .参数 size, 整数型

.DLL命令 RtlInitUnicodeString, , "ntdll.dll", "RtlInitUnicodeString"
    .参数 DestinationString, UNICODE_STRING
    .参数 SourceString, 字节集

.DLL命令 NtRenameKey, 整数型, "ntdll.dll", "NtRenameKey"
    .参数 KeyHandle, 整数型
    .参数 ReplacementName, UNICODE_STRING

.DLL命令 waveInGetNumDevs, 整数型, "winmm.dll", "waveInGetNumDevs"

.DLL命令 ShellExecuteExA, 逻辑型, "shell32.dll", "ShellExecuteExA"
    .参数 lpExecInfo, 整数型, , 0

.DLL命令 NtQueryInformationProcess, 整数型, "ntdll.dll", "NtQueryInformationProcess"
    .参数 ProcessHandle, 整数型
    .参数 ProcessInformationClass, 整数型, , #Process***
    .参数 ProcessInformation, 整数型
    .参数 ProcessInformationLength, 整数型
    .参数 ReturnLength, 整数型, 传址

.DLL命令 sprintf, 整数型, "ntdll.dll", "@sprintf"
    .参数 _Buffer, 整数型
    .参数 _Format, 文本型
    .参数 _Arg, 整数型

.DLL命令 SwitchToThisWindow, , "User32.dll", "SwitchToThisWindow"
    .参数 hwnd, 整数型
    .参数 fUnknown, 逻辑型

.DLL命令 PathFileExistsW, 逻辑型, "shlwapi.dll", "PathFileExistsW"
    .参数 pszPath, 字节集

.DLL命令 ShellExecuteW, 整数型, "shell32.dll", "ShellExecuteW", , 查找与指定文件关联在一起的程序的文件名,并执行相关操作，成功则返一个大于31的值。
    .参数 hwnd, 整数型, , 用来指定被执行文件显示的窗口所属的父窗口句柄，可以为NULL
    .参数 lpOperation, 字节集, , 指向一个表示执行方式的字符串
    .参数 lpFile, 字节集, , 用来指定文件名,文件名既可以是可执行文件也可以是数据文件,或可执行文件．
    .参数 lpParameters, 字节集, , 当lpFile参数指定了一个可执行文件(open),本参数用来指定命令行参数.如果lpFile参数指定是数据文件或其它,那么本参数必须是NULL
    .参数 lpDirctory, 字节集, , 执行或打开文件时使用的默认目录，如果lpFile同时指定了文件名(夹)的目录，此参数无效．
    .参数 nShowCmd, 整数型, , 如果函数执行了一个可执行文件,这个参数是指定窗口的打开方式,这个参数定义同ShowWindow函数中的dwCmdShow参数

.DLL命令 GetFileAttributesW, 整数型, "kernel32.dll", "GetFileAttributesW"
    .参数 lpFileName, 字节集, , 指定欲获取属性的一个文件的名字

.DLL命令 RemoveDirectoryW, 逻辑型, "kernel32", "RemoveDirectoryW"
    .参数 lpPathName, 字节集

.DLL命令 SetFileAttributesW, 逻辑型, "kernel32", "SetFileAttributesW"
    .参数 lpFileName, 字节集
    .参数 dwFileAttributes, 整数型

.DLL命令 SHGetSpecialFolderPathW, 逻辑型, "Shell32.dll", "SHGetSpecialFolderPathW"
    .参数 hwnd, 整数型
    .参数 pszPath, 整数型
    .参数 csidl, 整数型
    .参数 fCreate, 逻辑型

.DLL命令 GetTempPathW, 整数型, "Kernel32.dll", "GetTempPathW"
    .参数 nBufferLength, 整数型
    .参数 lpBuffer, 整数型

.DLL命令 sscanf, 整数型, "ntdll.dll", "@sscanf"
    .参数 _Buffer, 整数型
    .参数 _Format, 文本型
    .参数 _Result, 字节型, 传址

.DLL命令 CreateDesktopW, 整数型, "user32.dll", "CreateDesktopW"
    .参数 lpszDesktop, 字节集
    .参数 lpszDevice, 整数型
    .参数 pDevmode, 整数型
    .参数 dwFlags, 整数型
    .参数 dwDesiredAccess, 整数型
    .参数 lpsa, 整数型

.DLL命令 CloseDesktop, 逻辑型, "User32.dll", "CloseDesktop"
    .参数 hDesktop, 整数型

.DLL命令 CreateProcessW, 逻辑型, "kernel32.dll", "CreateProcessW"
    .参数 lpApplicationName, 整数型
    .参数 lpCommandLine, 整数型
    .参数 lpProcessAttributes, 整数型
    .参数 lpThreadAttributes, 整数型
    .参数 bInheritHandles, 逻辑型
    .参数 dwCreationFlags, 整数型
    .参数 lpEnvironment, 整数型
    .参数 lpCurrentDirectory, 整数型
    .参数 lpStartupInfo, STARTUPINFO
    .参数 lpProcessInformation, PROCESS_INFORMATION

.DLL命令 ProcessIdToSessionId, 逻辑型, "kernel32.dll", "ProcessIdToSessionId", , 检索与指定进程关联的远程桌面服务会话。
    .参数 dwProcessId, 整数型, , 指定进程标识符。使用 GetCurrentProcessId函数检索当前进程的进程标识符。
    .参数 pSessionId, 整数型, 传址, 指向一个变量的指针，该变量接收在其下运行指定进程的远程桌面服务会话的标识符。若要检索当前附加到控制台的会话的标识符，请使用WTSGetActiveConsoleSessionId 函数。

.DLL命令 WinStationOpenServerW, 整数型, "winsta.dll", "WinStationOpenServerW", , 打开服务器,返回打开后的标识
    .参数 ServerName, 整数型

.DLL命令 WinStationNameFromLogonIdW, 逻辑型, "winsta.dll", "WinStationNameFromLogonIdW", , 从远程会话ID获得身份名称
    .参数 hServer, 整数型, , 打开的服务器标识
    .参数 SessionID, 整数型, , 会话ID , 可通过ProcessIdToSessionId 获得
    .参数 pWinStationName, 字节集, , 返回获得到的标识 UNICODE编码的,需要解码

.DLL命令 WinStationCloseServer, 逻辑型, "winsta.dll", "WinStationCloseServer"
    .参数 hServer, 整数型

.DLL命令 SHGetDesktopFolder, 整数型, "shell32", "SHGetDesktopFolder"
    .参数 ppshf, 整数型, 传址

.DLL命令 SHGetMalloc, 整数型, "shell32", "SHGetMalloc"
    .参数 ppMalloc, 整数型, 传址

.DLL命令 SHGetFolderLocation, 整数型, "Shell32.dll", "SHGetFolderLocation"
    .参数 hwnd, 整数型
    .参数 csidl, 整数型
    .参数 hToken, 整数型
    .参数 dwFlags, 整数型
    .参数 ppidl, 整数型, 传址

.DLL命令 ExpandEnvironmentStringsW, 整数型, "Kernel32.dll", "ExpandEnvironmentStringsW"
    .参数 lpSrc, 字节集
    .参数 lpDst, 整数型
    .参数 nSize, 整数型

.DLL命令 GetAdaptersAddresses, 整数型, "Iphlpapi.dll", "GetAdaptersAddresses"
    .参数 Family, 整数型
    .参数 Flags, 整数型
    .参数 Reserved, 整数型
    .参数 AdapterAddresses, 整数型
    .参数 SizePointer, 整数型, 传址

.DLL命令 inet_ntop, 整数型, "Ws2_32.dll", "inet_ntop"
    .参数 Family, 整数型
    .参数 pAddr, 整数型
    .参数 pStringBuf, 整数型
    .参数 StringBufSize, 整数型

.DLL命令 ConvertLengthToIpv4Mask, 整数型, "Iphlpapi.dll", "ConvertLengthToIpv4Mask"
    .参数 MaskLength, 整数型
    .参数 Mask, 整数型, 传址

.DLL命令 ZwQueryKey, 整数型, "ntdll.dll", "ZwQueryKey"
    .参数 KeyHandle, 整数型
    .参数 KeyInformationClass, 整数型, , #Keyxxx
    .参数 KeyInformation, 整数型
    .参数 Length, 整数型
    .参数 ResultLength, 整数型, 传址

.DLL命令 GetModuleHandleExA, 逻辑型, "kernel32.dll", "GetModuleHandleExA"
    .参数 dwFlags, 整数型, , #GET_MODULE_HANDLE_EX_FLAG_*
    .参数 lpModuleName, 整数型, 传址
    .参数 phModule, 整数型, 传址

.DLL命令 GetModuleBaseNameA, 整数型, "psapi.dll", "GetModuleBaseNameA"
    .参数 hProcess, 整数型
    .参数 hModule, 整数型
    .参数 lpBaseName, 文本型
    .参数 nSize, 整数型

.DLL命令 RtlMoveMemory_KBDLLHOOKSTRUCT, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, KBDLLHOOKSTRUCT
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 RtlMoveMemory_MSLLHOOKSTRUCT, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, MSLLHOOKSTRUCT
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 SHFreeNameMappings, , "Shell32.dll", "SHFreeNameMappings"
    .参数 hNameMappings, 整数型

.DLL命令 GetProcessId, 整数型, "Kernel32.dll", "GetProcessId"
    .参数 hProcess, 整数型

.DLL命令 CheckRemoteDebuggerPresent, 逻辑型, "Kernel32.dll", "CheckRemoteDebuggerPresent"
    .参数 hProcess, 整数型
    .参数 pbDebuggerPresent, 逻辑型, 传址

.DLL命令 RtlMoveMemory_WIN32_FIND_DATAW, 整数型, "kernel32.dll", "RtlMoveMemory"
    .参数 Destination, WIN32_FIND_DATAW
    .参数 Source, 整数型
    .参数 Length, 整数型

.DLL命令 SHGetFileInfoW, 整数型, "Shell32.dll", "SHGetFileInfoW"
    .参数 pszPath, 整数型
    .参数 dwFileAttributes, 整数型
    .参数 psfi, 整数型
    .参数 cbFileInfo, 整数型
    .参数 uFlags, 整数型

.DLL命令 EnumFontFamiliesExW, 整数型, "Gdi32.dll", "EnumFontFamiliesExW"
    .参数 hdc, 整数型
    .参数 lpLogfont, 整数型
    .参数 lpProc, 整数型
    .参数 lParam, 整数型
    .参数 dwFlags, 整数型

.DLL命令 sprintf_长整数型, 整数型, "ntdll.dll", "@sprintf"
    .参数 _Buffer, 整数型
    .参数 _Format, 文本型
    .参数 _Arg, 长整数型

.DLL命令 EnumDisplayDevicesW, 逻辑型, "User32.dll", "EnumDisplayDevicesW"
    .参数 lpDevice, 整数型
    .参数 iDevNum, 整数型
    .参数 lpDisplayDevice, 整数型
    .参数 dwFlags, 整数型

.DLL命令 EnumDisplaySettingsW, 逻辑型, "User32.dll", "EnumDisplaySettingsW"
    .参数 lpszDeviceName, 整数型
    .参数 iModeNum, 整数型
    .参数 lpDevMode, 整数型

.DLL命令 ChangeDisplaySettingsExW, 整数型, "User32.dll", "ChangeDisplaySettingsExW"
    .参数 lpszDeviceName, 整数型
    .参数 lpDevMode, 整数型
    .参数 hwnd, 整数型
    .参数 dwFlags, 整数型
    .参数 lParam, 整数型

.DLL命令 SystemParametersInfoW, 逻辑型, "User32.dll", "SystemParametersInfoW"
    .参数 uiAction, 整数型
    .参数 uiParam, 整数型
    .参数 pvParam, 整数型
    .参数 fWinIni, 整数型

.DLL命令 InternetOpenW, 整数型, "Wininet.dll", "InternetOpenW"
    .参数 lpszAgent, 整数型
    .参数 dwAccessType, 整数型
    .参数 lpszProxy, 整数型
    .参数 lpszProxyBypass, 整数型
    .参数 dwFlags, 整数型

.DLL命令 InternetOpenUrlW, 整数型, "Wininet.dll", "InternetOpenUrlW"
    .参数 hInternet, 整数型
    .参数 lpszUrl, 整数型
    .参数 lpszHeaders, 整数型
    .参数 dwHeadersLength, 整数型
    .参数 dwFlags, 整数型
    .参数 dwContext, 整数型

.DLL命令 HttpQueryInfoW, 逻辑型, "Wininet.dll", "HttpQueryInfoW"
    .参数 hRequest, 整数型
    .参数 dwInfoLevel, 整数型
    .参数 lpBuffer, 整数型
    .参数 lpdwBufferLength, 整数型, 传址
    .参数 lpdwIndex, 整数型, 传址

.DLL命令 FindFirstChangeNotificationW, 整数型, "Kernel32.dll", "FindFirstChangeNotificationW"
    .参数 lpPathName, 字节集
    .参数 bWatchSubtree, 逻辑型
    .参数 dwNotifyFilter, 整数型

.DLL命令 FindNextChangeNotification, 逻辑型, "Kernel32.dll", "FindNextChangeNotification"
    .参数 hChangeHandle, 整数型

.DLL命令 FindCloseChangeNotification, 逻辑型, "Kernel32.dll", "FindCloseChangeNotification"
    .参数 hChangeHandle, 整数型

.DLL命令 WaitForMultipleObjects, 整数型, "Kernel32.dll", "WaitForMultipleObjects"
    .参数 nCount, 整数型
    .参数 lpHandles, 整数型
    .参数 bWaitAll, 逻辑型
    .参数 dwMilliseconds, 整数型

.DLL命令 FindFirstUrlCacheEntryW, 整数型, "Wininet.dll", "FindFirstUrlCacheEntryW"
    .参数 lpszUrlSearchPattern, 整数型
    .参数 lpFirstCacheEntryInfo, 整数型
    .参数 lpcbCacheEntryInfo, 整数型, 传址

.DLL命令 FindNextUrlCacheEntryW, 逻辑型, "Wininet.dll", "FindNextUrlCacheEntryW"
    .参数 hEnumHandle, 整数型
    .参数 lpNextCacheEntryInfo, 整数型
    .参数 lpcbCacheEntryInfo, 整数型, 传址

.DLL命令 DeleteUrlCacheEntryW, 逻辑型, "Wininet.dll", "DeleteUrlCacheEntryW"
    .参数 lpszUrlName, 整数型

.DLL命令 PathFindFileNameW, 整数型, "shlwapi.dll", "PathFindFileNameW"
    .参数 pszPath, 整数型

.DLL命令 GetLayeredWindowAttributes, 逻辑型, "User32.dll", "GetLayeredWindowAttributes"
    .参数 hwnd, 整数型
    .参数 pcrKey, 整数型, 传址
    .参数 pbAlpha, 整数型, 传址
    .参数 pdwFlags, 整数型, 传址

.DLL命令 URLDownloadToFileA, 整数型, "urlmon.dll", "URLDownloadToFileA"
    .参数 LPUNKNOWN, 整数型, , 控件的接口,如果不是控件则为0
    .参数 LPCSTR, 文本型, , 本参数指定欲读取文件在互联网上的HTTP地址(即URL),不能为空
    .参数 LPCSTR, 文本型, , 下载后保存的文件名(完整路径).例如:c:\1.exe
    .参数 DWORD, 整数型, , 保留字段,必需为0
    .参数 LPBINDSTATUSCALLBACK, 整数型, , 回调函数.若不需要填0.

.DLL命令 recv, 整数型, "ws2_32.dll", "recv"
    .参数 s, 整数型
    .参数 buf, 整数型
    .参数 len, 整数型
    .参数 flags, 整数型

.DLL命令 GetFileVersionInfoSizeW, 整数型, "version.dll", "GetFileVersionInfoSizeW"
    .参数 lptstrFilename, 字节集
    .参数 lpdwHandle, 整数型, 传址

.DLL命令 GetFileVersionInfoW, 逻辑型, "version.dll", "GetFileVersionInfoW"
    .参数 lptstrFilename, 字节集
    .参数 dwHandle, 整数型
    .参数 dwLen, 整数型
    .参数 lpData, 整数型

.DLL命令 VerQueryValueW, 逻辑型, "version.dll", "VerQueryValueW"
    .参数 pBlock, 整数型
    .参数 lpSubBlock, 字节集
    .参数 lplpBuffer, 整数型, 传址
    .参数 puLen, 整数型, 传址

.DLL命令 VerLanguageNameW, 整数型, "kernel32.dll", "VerLanguageNameW"
    .参数 wLang, 整数型
    .参数 szLang, 整数型
    .参数 cchLang, 整数型

.DLL命令 swprintf, 整数型, "ntdll.dll", "@swprintf"
    .参数 _Buffer, 字节集
    .参数 _Format, 字节集
    .参数 _Arg, 整数型

.DLL命令 getaddrinfo, 整数型, "ws2_32.dll", "getaddrinfo"
    .参数 pNodeName, 文本型
    .参数 pServiceName, 文本型
    .参数 pHints, 整数型
    .参数 ppResult, 整数型

.DLL命令 ntohl, 整数型, "Ws2_32.dll", "ntohl"
    .参数 netlong, 整数型

.DLL命令 sendto1, 整数型, "ws2_32.dll", "sendto"
    .参数 s, 整数型
    .参数 buf, 整数型
    .参数 len, 整数型
    .参数 flags, 整数型
    .参数 to, 整数型
    .参数 tolen, 整数型

.DLL命令 select1, 整数型, "ws2_32.dll", "select"
    .参数 nfds, 整数型
    .参数 readfds, 整数型
    .参数 writefds, 整数型
    .参数 exceptfds, 整数型
    .参数 timeout, 整数型

.DLL命令 recvfrom1, 整数型, "ws2_32.dll", "recvfrom"
    .参数 s, 整数型
    .参数 buf, 整数型
    .参数 len, 整数型
    .参数 flags, 整数型
    .参数 from, 整数型
    .参数 fromlen, 整数型, 传址

.DLL命令 freeaddrinfo, , "ws2_32.dll", "freeaddrinfo"
    .参数 pAddrInfo, 整数型

.DLL命令 GetTickCount64, 长整数型, "Kernel32.dll", "GetTickCount64", 公开

.DLL命令 StrFromTimeIntervalA, 整数型, "Shlwapi.dll", "StrFromTimeIntervalA"
    .参数 pszOut, 整数型
    .参数 cchMax, 整数型
    .参数 dwTimeMS, 整数型
    .参数 digits, 整数型

.DLL命令 GetNumberFormatA, 整数型, "Kernel32.dll", "GetNumberFormatA"
    .参数 Locale, 整数型
    .参数 dwFlags, 整数型
    .参数 lpValue, 文本型
    .参数 lpFormat, 整数型
    .参数 lpNumberStr, 整数型
    .参数 cchNumber, 整数型

.DLL命令 SendInput, 整数型, "User32.dll", "SendInput", 公开
    .参数 cInputs, 整数型
    .参数 pInputs, INPUT, 数组
    .参数 cbSize, 整数型

.DLL命令 CreateSymbolicLinkW, 字节型, "Kernel32.dll", "CreateSymbolicLinkW"
    .参数 lpSymlinkFileName, 字节集
    .参数 lpTargetFileName, 字节集
    .参数 dwFlags, 整数型

.DLL命令 GetWindowPlacement, 逻辑型, "User32.dll", "GetWindowPlacement", 公开
    .参数 hWnd, 整数型
    .参数 lpwndpl, 整数型, , WINDOWPLACEMENT *

.DLL命令 SetWindowPlacement, 逻辑型, "User32.dll", "SetWindowPlacement", 公开
    .参数 hWnd, 整数型
    .参数 lpwndpl, 整数型, , WINDOWPLACEMENT *

.DLL命令 SHCreateShellItem, 整数型, "Shell32.dll", "SHCreateShellItem"
    .参数 pidlParent, 整数型
    .参数 psfParent, 整数型
    .参数 pidl, 整数型
    .参数 ppsi, 整数型, 传址

.DLL命令 SHGetPropertyStoreFromParsingName, 整数型, "Shell32.dll", "SHGetPropertyStoreFromParsingName"
    .参数 pszPath, 整数型
    .参数 pbc, 整数型
    .参数 flags, 整数型
    .参数 riid, 整数型
    .参数 ppv, 整数型, 传址

.DLL命令 RegDeleteTreeW, 整数型, "Advapi32.dll", "RegDeleteTreeW"
    .参数 hKey, 整数型
    .参数 lpSubKey, 字节集

.DLL命令 GetWindowsDirectoryW, 整数型, "kernel32.dll", "GetWindowsDirectoryW"
    .参数 lpBuffer, 整数型
    .参数 uSize, 整数型

.DLL命令 SHGetPropertyStoreForWindow, 整数型, "Shell32.dll", "SHGetPropertyStoreForWindow"
    .参数 hwnd, 整数型
    .参数 riid, 整数型
    .参数 ppv, 整数型, 传址

.DLL命令 CreateProcessAsUserW, 逻辑型, "Advapi32.dll", "CreateProcessAsUserW"
    .参数 hToken, 整数型
    .参数 lpApplicationName, 整数型
    .参数 lpCommandLine, 整数型
    .参数 lpProcessAttributes, 整数型
    .参数 lpThreadAttributes, 整数型
    .参数 bInheritHandles, 逻辑型
    .参数 dwCreationFlags, 整数型
    .参数 lpEnvironment, 整数型
    .参数 lpCurrentDirectory, 整数型
    .参数 lpStartupInfo, STARTUPINFO
    .参数 lpProcessInformation, PROCESS_INFORMATION

.DLL命令 CreateProcessWithTokenW, 逻辑型, "Advapi32.dll", "CreateProcessWithTokenW"
    .参数 hToken, 整数型
    .参数 dwLogonFlags, 整数型
    .参数 lpApplicationName, 整数型
    .参数 lpCommandLine, 整数型
    .参数 dwCreationFlags, 整数型
    .参数 lpEnvironment, 整数型
    .参数 lpCurrentDirectory, 整数型
    .参数 lpStartupInfo, STARTUPINFO
    .参数 lpProcessInformation, PROCESS_INFORMATION

.DLL命令 DuplicateTokenEx, 逻辑型, "Advapi32.dll", "DuplicateTokenEx"
    .参数 hExistingToken, 整数型
    .参数 dwDesiredAccess, 整数型
    .参数 lpTokenAttributes, 整数型
    .参数 ImpersonationLevel, 整数型
    .参数 TokenType, 整数型
    .参数 phNewToken, 整数型, 传址

.DLL命令 CreateDCW, 整数型, "gdi32.dll", "CreateDCW"
    .参数 pwszDriver, 字节集
    .参数 pwszDevice, 整数型
    .参数 pszPort, 整数型
    .参数 pdm, 整数型

.DLL命令 GetObjectW, 整数型, "gdi32.dll", "GetObjectW"
    .参数 h, 整数型
    .参数 c, 整数型
    .参数 pv, 整数型

.DLL命令 SelectPalette, 整数型, "gdi32.dll", "SelectPalette"
    .参数 hdc, 整数型
    .参数 hPal, 整数型
    .参数 bForceBkgd, 逻辑型

.DLL命令 RealizePalette, 整数型, "gdi32.dll", "RealizePalette"
    .参数 hdc, 整数型

.DLL命令 GetDIBits4, 整数型, "gdi32.dll", "GetDIBits"
    .参数 hdc, 整数型
    .参数 hbm, 整数型
    .参数 start, 整数型
    .参数 cLines, 整数型
    .参数 lpvBits, 整数型
    .参数 lpbmi, 整数型
    .参数 usage, 整数型

.DLL命令 LoadBitmapA, 整数型, "User32.dll", "LoadBitmapA"
    .参数 hInstance, 整数型
    .参数 lpBitmapName, 整数型

.DLL命令 GetNamedSecurityInfoW, 整数型, "Advapi32.dll", "GetNamedSecurityInfoW"
    .参数 pObjectName, 整数型
    .参数 ObjectType, 整数型
    .参数 SecurityInfo, 整数型
    .参数 ppsidOwner, 整数型
    .参数 ppsidGroup, 整数型
    .参数 ppDacl, 整数型
    .参数 ppSacl, 整数型
    .参数 ppSecurityDescriptor, 整数型

.DLL命令 BuildExplicitAccessWithNameW, , "Advapi32.dll", "BuildExplicitAccessWithNameW"
    .参数 pExplicitAccess, 整数型
    .参数 pTrusteeName, 整数型
    .参数 AccessPermissions, 整数型
    .参数 AccessMode, 整数型
    .参数 Inheritance, 整数型

.DLL命令 SetEntriesInAclW, 整数型, "Advapi32.dll", "SetEntriesInAclW"
    .参数 cCountOfExplicitEntries, 整数型
    .参数 pListOfExplicitEntries, 整数型
    .参数 OldAcl, 整数型
    .参数 NewAcl, 整数型

.DLL命令 SetNamedSecurityInfoW, 整数型, "Advapi32.dll", "SetNamedSecurityInfoW"
    .参数 pObjectName, 整数型
    .参数 ObjectType, 整数型
    .参数 SecurityInfo, 整数型
    .参数 psidOwner, 整数型
    .参数 psidGroup, 整数型
    .参数 pDacl, 整数型
    .参数 pSacl, 整数型

.DLL命令 VerSetConditionMask, 长整数型, "Kernel32.dll", "VerSetConditionMask"
    .参数 ConditionMask, 长整数型
    .参数 TypeMask, 整数型
    .参数 Condition, 字节型

.DLL命令 VerifyVersionInfoW, 逻辑型, "Kernel32.dll", "VerifyVersionInfoW"
    .参数 lpVersionInformation, 整数型
    .参数 dwTypeMask, 整数型
    .参数 dwlConditionMask, 长整数型

.DLL命令 GetSidSubAuthority, 整数型, "advapi32.dll", "GetSidSubAuthority"
    .参数 pSid, 整数型
    .参数 nSubAuthority, 整数型

.DLL命令 GetSidSubAuthorityCount, 整数型, "advapi32.dll", "GetSidSubAuthorityCount"
    .参数 pSid, 整数型

.DLL命令 GetTokenInformation, 逻辑型, "advapi32.dll", "GetTokenInformation"
    .参数 TokenHandle, 整数型
    .参数 TokenInformationClass, 整数型
    .参数 TokenInformation, 整数型
    .参数 TokenInformationLength, 整数型
    .参数 ReturnLength, 整数型

.DLL命令 ImageRvaToVa, 整数型, "Dbghelp.dll", "ImageRvaToVa"
    .参数 NtHeaders, 整数型
    .参数 Base, 整数型
    .参数 Rva, 整数型
    .参数 LastRvaSection, 整数型, 传址

.DLL命令 CreateFileMappingW, 整数型, "kernel32.dll", "CreateFileMappingW"
    .参数 hFile, 整数型
    .参数 lpFileMappingAttributes, 整数型
    .参数 flProtect, 整数型
    .参数 dwMaximumSizeHigh, 整数型
    .参数 dwMaximumSizeLow, 整数型
    .参数 lpName, 整数型

.DLL命令 FindMimeFromData, 整数型, "Urlmon.dll", "FindMimeFromData"
    .参数 pBC, 整数型
    .参数 pwzUrl, 整数型
    .参数 pBuffer, 整数型
    .参数 cbSize, 整数型
    .参数 pwzMimeProposed, 整数型
    .参数 dwMimeFlags, 整数型
    .参数 ppwzMimeOut, 整数型, 传址
    .参数 dwReserved, 整数型

.DLL命令 AllocateAndInitializeSid, 逻辑型, "Advapi32.dll", "AllocateAndInitializeSid"
    .参数 pIdentifierAuthority, 整数型
    .参数 nSubAuthorityCount, 字节型
    .参数 nSubAuthority0, 整数型
    .参数 nSubAuthority1, 整数型
    .参数 nSubAuthority2, 整数型
    .参数 nSubAuthority3, 整数型
    .参数 nSubAuthority4, 整数型
    .参数 nSubAuthority5, 整数型
    .参数 nSubAuthority6, 整数型
    .参数 nSubAuthority7, 整数型
    .参数 pSid, 整数型, 传址

.DLL命令 EqualSid, 逻辑型, "Advapi32.dll", "EqualSid"
    .参数 pSid1, 整数型
    .参数 pSid2, 整数型

.DLL命令 FreeSid, 整数型, "Advapi32.dll", "FreeSid"
    .参数 pSid, 整数型

.DLL命令 SafeArrayDestroy, 整数型, "oleaut32.dll", "SafeArrayDestroy"
    .参数 psa, 整数型

.DLL命令 NtWow64QueryInformationProcess64, 整数型, "ntdll.dll", "NtWow64QueryInformationProcess64"
    .参数 ProcessHandle, 整数型
    .参数 ProcessInformationClass, 整数型
    .参数 ProcessInformation, 整数型
    .参数 ProcessInformationLength, 整数型
    .参数 ReturnLength, 整数型, 传址

.DLL命令 NtWow64ReadVirtualMemory64, 整数型, "ntdll.dll", "NtWow64ReadVirtualMemory64"
    .参数 ProcessHandle, 整数型
    .参数 BaseAddress, 长整数型
    .参数 Buffer, 整数型
    .参数 Size, 长整数型
    .参数 NumberOfBytesRead, 长整数型, 传址

.DLL命令 NtReadVirtualMemory, 整数型, "ntdll.dll", "NtReadVirtualMemory"
    .参数 ProcessHandle, 整数型
    .参数 BaseAddress, 整数型
    .参数 Buffer, 整数型
    .参数 Size, 整数型
    .参数 NumberOfBytesRead, 整数型, 传址

.DLL命令 GetFullPathNameW, 整数型, "Kernel32.dll", "GetFullPathNameW"
    .参数 lpFileName, 字节集
    .参数 nBufferLength, 整数型
    .参数 lpBuffer, 整数型
    .参数 lpFilePart, 整数型, 传址

.DLL命令 StrCmpLogicalW, 整数型, "shlwapi.dll", "StrCmpLogicalW"
    .参数 psz1, 字节集
    .参数 psz2, 字节集

.DLL命令 GetFileSize, 整数型, "kernel32.dll", "GetFileSize"
    .参数 hFile, 整数型
    .参数 lpFileSizeHigh, 整数型, 传址

.DLL命令 OleLoadPicture, 整数型, "olepro32.dll", "OleLoadPicture"
    .参数 lpstream, 整数型
    .参数 lSize, 整数型
    .参数 fRunmode, 逻辑型
    .参数 riid, 整数型
    .参数 lplpvObj, 整数型, 传址

.DLL命令 CopyImage, 整数型, "user32.dll", "CopyImage"
    .参数 h, 整数型
    .参数 type, 整数型
    .参数 cx, 整数型
    .参数 cy, 整数型
    .参数 flags, 整数型

.DLL命令 GetSystemPowerStatus, 逻辑型, "kernel32.dll", "GetSystemPowerStatus", 公开, 检索系统的电源状态。该状态指示系统是使用交流电源还是直流电源运行、电池当前是否正在充电、电池寿命剩余多少以及电池保护程序是打开还是关闭。
    .参数 lpSystemPowerStatus, SYSTEM_POWER_STATUS, , https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getsystempowerstatus

.DLL命令 WSASetLastError, , "Ws2_32.dll", "WSASetLastError"
    .参数 iError, 整数型

.DLL命令 WSAAddressToStringA, 整数型, "Ws2_32.dll", "WSAAddressToStringA"
    .参数 lpsaAddress, 整数型
    .参数 dwAddressLength, 整数型
    .参数 lpProtocolInfo, 整数型
    .参数 lpszAddressString, 整数型
    .参数 lpdwAddressStringLength, 整数型, 传址

.DLL命令 InitializeProcThreadAttributeList, 逻辑型, "Kernel32.dll", "InitializeProcThreadAttributeList"
    .参数 lpAttributeList, 整数型
    .参数 dwAttributeCount, 整数型
    .参数 dwFlags, 整数型
    .参数 lpSize, 整数型, 传址

.DLL命令 DeleteProcThreadAttributeList, 整数型, "kernel32.dll", "DeleteProcThreadAttributeList"
    .参数 lpAttributeList, 整数型

.DLL命令 UpdateProcThreadAttribute, 逻辑型, "Kernel32.dll", "UpdateProcThreadAttribute"
    .参数 lpAttributeList, 整数型
    .参数 dwFlags, 整数型
    .参数 Attribute, 整数型
    .参数 lpValue, 整数型
    .参数 cbSize, 整数型
    .参数 lpPreviousValue, 整数型
    .参数 lpReturnSize, 整数型

.DLL命令 RegDeleteKeyW, 整数型, "advapi32.dll", "RegDeleteKeyW"
    .参数 hKey, 整数型
    .参数 lpSubKey, 字节集

.DLL命令 RegDeleteValueW, 整数型, "advapi32.dll", "RegDeleteValueW"
    .参数 hKey, 整数型
    .参数 lpValueName, 字节集

.DLL命令 SHOpenWithDialog, 整数型, "shell32.dll", "SHOpenWithDialog"
    .参数 hwndParent, 整数型
    .参数 poainfo, OPENASINFO

.DLL命令 WTSEnumerateProcessesW, 逻辑型, "Wtsapi32.dll", "WTSEnumerateProcessesW"
    .参数 hServer, 整数型
    .参数 Reserved, 整数型
    .参数 Version, 整数型
    .参数 ppProcessInfo, 整数型, 传址
    .参数 pCount, 整数型, 传址

.DLL命令 WTSFreeMemory, , "Wtsapi32.dll", "WTSFreeMemory"
    .参数 pMemory, 整数型

.DLL命令 LookupAccountSidW, 逻辑型, "Advapi32.dll", "LookupAccountSidW"
    .参数 lpSystemName, 整数型
    .参数 Sid, 整数型
    .参数 Name, 整数型
    .参数 cchName, 整数型, 传址
    .参数 ReferencedDomainName, 整数型
    .参数 cchReferencedDomainName, 整数型, 传址
    .参数 peUse, 整数型, 传址

.DLL命令 lstrcmpiW, 整数型, "Kernel32.dll", "lstrcmpiW"
    .参数 lpString1, 整数型
    .参数 lpString2, 字节集

.DLL命令 lstrcmpW, 整数型, "Kernel32.dll", "lstrcmpW"
    .参数 lpString1, 整数型
    .参数 lpString2, 字节集

.DLL命令 EndDialog, 逻辑型, "User32.dll", "EndDialog"
    .参数 hDlg, 整数型
    .参数 nResult, 整数型

.DLL命令 GetPerformanceInfo, 逻辑型, "psapi.dll", "GetPerformanceInfo"
    .参数 pPerformanceInformation, PERFORMANCE_INFORMATION
    .参数 cb, 整数型

.DLL命令 QueryWorkingSet, 逻辑型, "psapi.dll", "QueryWorkingSet"
    .参数 hProcess, 整数型
    .参数 pv, 整数型
    .参数 cb, 整数型

.DLL命令 ImageList_DragMove, 逻辑型, "Comctl32.dll", "ImageList_DragMove"
    .参数 x, 整数型
    .参数 y, 整数型

.DLL命令 ImageList_DragShowNolock, 逻辑型, "Comctl32.dll", "ImageList_DragShowNolock"
    .参数 fShow, 逻辑型

.DLL命令 ImageList_DragLeave, 逻辑型, "Comctl32.dll", "ImageList_DragLeave"
    .参数 hwndLock, 整数型

.DLL命令 ImageList_EndDrag, , "Comctl32.dll", "ImageList_EndDrag"

.DLL命令 ImageList_BeginDrag, 逻辑型, "Comctl32.dll", "ImageList_BeginDrag"
    .参数 himlTrack, 整数型
    .参数 iTrack, 整数型
    .参数 dxHotspot, 整数型
    .参数 dyHotspot, 整数型

.DLL命令 ImageList_DragEnter, 逻辑型, "Comctl32.dll", "ImageList_DragEnter"
    .参数 hwndLock, 整数型
    .参数 x, 整数型
    .参数 y, 整数型

.DLL命令 GetMonitorInfoA, 逻辑型, "User32.dll", "GetMonitorInfoA"
    .参数 hMonitor, 整数型
    .参数 lpmi, 整数型

.DLL命令 EnumPropsA, 整数型, "User32.dll", "EnumPropsA"
    .参数 hWnd, 整数型
    .参数 lpEnumFunc, 整数型

.DLL命令 ReadDirectoryChangesW, 逻辑型, "Kernel32.dll", "ReadDirectoryChangesW"
    .参数 hDirectory, 整数型
    .参数 lpBuffer, 整数型
    .参数 nBufferLength, 整数型
    .参数 bWatchSubtree, 逻辑型
    .参数 dwNotifyFilter, 整数型
    .参数 lpBytesReturned, 整数型
    .参数 lpOverlapped, 整数型
    .参数 lpCompletionRoutine, 整数型

.DLL命令 NtQueryInformationThread, 整数型, "ntdll.dll", "NtQueryInformationThread"
    .参数 ThreadHandle, 整数型
    .参数 ThreadInformationClass, 整数型
    .参数 ThreadInformation, 整数型
    .参数 ThreadInformationLength, 整数型
    .参数 ReturnLength, 整数型, 传址

.DLL命令 GetMappedFileNameA, 整数型, "Psapi.dll", "GetMappedFileNameA"
    .参数 hProcess, 整数型
    .参数 lpv, 整数型
    .参数 lpFilename, 文本型
    .参数 nSize, 整数型

.DLL命令 CredUIPromptForWindowsCredentialsW, 整数型, "Credui.dll", "CredUIPromptForWindowsCredentialsW"
    .参数 pUiInfo, CREDUI_INFOW
    .参数 dwAuthError, 整数型
    .参数 pulAuthPackage, 整数型, 传址
    .参数 pvInAuthBuffer, 整数型
    .参数 ulInAuthBufferSize, 整数型
    .参数 ppvOutAuthBuffer, 整数型, 传址
    .参数 pulOutAuthBufferSize, 整数型, 传址
    .参数 pfSave, 逻辑型, 传址
    .参数 dwFlags, 整数型

.DLL命令 CredUnPackAuthenticationBufferW, 整数型, "Credui.dll", "CredUnPackAuthenticationBufferW"
    .参数 dwFlags, 整数型
    .参数 pAuthBuffer, 整数型
    .参数 cbAuthBuffer, 整数型
    .参数 pszUserName, 整数型
    .参数 pcchMaxUserName, 整数型, 传址
    .参数 pszDomainName, 整数型
    .参数 pcchMaxDomainName, 整数型, 传址
    .参数 pszPassword, 整数型
    .参数 pcchMaxPassword, 整数型, 传址

.DLL命令 SetWindowTheme, 整数型, "UxTheme.dll", "SetWindowTheme", 公开
    .参数 hwnd, 整数型
    .参数 pszSubAppName, 字节集
    .参数 pszSubIdList, 字节集

.DLL命令 SetConsoleCtrlHandler, 逻辑型, "Kernel32.dll", "SetConsoleCtrlHandler", 公开
    .参数 HandlerRoutine, 整数型
    .参数 Add, 逻辑型

.DLL命令 GetFileTitleW, 短整数型, "Comdlg32.dll", "GetFileTitleW"
    .参数 lpszFile, 字节集
    .参数 lpszTitle, 字节集
    .参数 cbBuf, 整数型

.DLL命令 PathFindExtensionW, 整数型, "Shlwapi.dll", "PathFindExtensionW"
    .参数 pszPath, 字节集

.DLL命令 wcscat, 整数型, "msvcrt.dll", "@wcscat"
    .参数 _Destination, 字节集
    .参数 _Source, 字节集

.DLL命令 GetBinaryTypeW, 逻辑型, "Kernel32.dll", "GetBinaryTypeW", 公开
    .参数 lpApplicationName, 字节集
    .参数 lpBinaryType, 整数型, 传址, #SCS_*

.DLL命令 LogonUserA, 逻辑型, "Advapi32.dll", "LogonUserA"
    .参数 lpszUsername, 文本型
    .参数 lpszDomain, 文本型
    .参数 lpszPassword, 文本型
    .参数 dwLogonType, 整数型
    .参数 dwLogonProvider, 整数型
    .参数 phToken, 整数型, 传址

.DLL命令 LogonUserW, 逻辑型, "Advapi32.dll", "LogonUserW"
    .参数 lpszUsername, 字节集
    .参数 lpszDomain, 字节集
    .参数 lpszPassword, 字节集
    .参数 dwLogonType, 整数型
    .参数 dwLogonProvider, 整数型
    .参数 phToken, 整数型, 传址

.DLL命令 GetFinalPathNameByHandleW, 整数型, "Kernel32.dll", "GetFinalPathNameByHandleW"
    .参数 hFile, 整数型
    .参数 lpszFilePath, 字节集
    .参数 cchFilePath, 整数型
    .参数 dwFlags, 整数型

.DLL命令 LsaEnumerateLogonSessions, 整数型, "Secur32.dll", "LsaEnumerateLogonSessions"
    .参数 LogonSessionCount, 整数型, 传址
    .参数 LogonSessionList, 整数型, 传址

.DLL命令 LsaGetLogonSessionData, 整数型, "Secur32.dll", "LsaGetLogonSessionData"
    .参数 LogonId, 整数型
    .参数 ppLogonSessionData, 整数型, 传址

.DLL命令 LsaFreeReturnBuffer, 整数型, "Secur32.dll", "LsaFreeReturnBuffer"
    .参数 Buffer, 整数型

.DLL命令 HttpSendRequestExA, 逻辑型, "wininet.dll", "HttpSendRequestExA"
    .参数 hRequest, 整数型
    .参数 lpBuffersIn, INTERNET_BUFFERSA
    .参数 lpBuffersOut, 整数型
    .参数 dwFlags, 整数型
    .参数 dwContext, 整数型

.DLL命令 InternetWriteFile, 逻辑型, "wininet.dll", "InternetWriteFile"
    .参数 hFile, 整数型
    .参数 lpBuffer, 字节集
    .参数 dwNumberOfBytesToWrite, 整数型
    .参数 lpdwNumberOfBytesWritten, 整数型, 传址

.DLL命令 HttpEndRequestA, 逻辑型, "wininet.dll", "HttpEndRequestA"
    .参数 hRequest, 整数型
    .参数 lpBuffersOut, 整数型
    .参数 dwFlags, 整数型
    .参数 dwContext, 整数型

.DLL命令 DwmSetWindowAttribute, 整数型, "Dwmapi.dll", "DwmSetWindowAttribute"
    .参数 hwnd, 整数型
    .参数 dwAttribute, 整数型
    .参数 pvAttribute, 整数型
    .参数 cbAttribute, 整数型

.DLL命令 LocalSize_tagExtractingInfoEx, 整数型, "kernel32", "LocalSize"
    .参数 hMem, tagExtractingInfoEx

.DLL命令 RtlMoveMemory_tagExtractingInfoEx, , "kernel32", "RtlMoveMemory"
    .参数 Destination, tagExtractingInfoEx, 传址
    .参数 Source, 字节集, 传址
    .参数 Length, 整数型

.DLL命令 _7z_SevenZipClearOwnerWindow, 整数型, "7zlib.dll", "SevenZipClearOwnerWindow"

.DLL命令 _7z_SevenZip, 整数型, "7zlib.dll", "SevenZip"
    .参数 参数1, 整数型
    .参数 参数2, 文本型
    .参数 参数3, 字节集, 传址
    .参数 参数4, 整数型

.DLL命令 _7z_SevenZipSetOwnerWindowEx, 整数型, "7zlib.dll", "SevenZipSetOwnerWindowEx"
    .参数 参数1, 整数型
    .参数 参数2, 子程序指针

.DLL命令 WinHttpWriteData, 逻辑型, "Winhttp.dll", "WinHttpWriteData"
    .参数 hRequest, 整数型
    .参数 lpBuffer, 字节集
    .参数 dwNumberOfBytesToWrite, 整数型
    .参数 lpdwNumberOfBytesWritten, 整数型, 传址

.DLL命令 HP_Agent_ConnectWithExtraAndLocalAddressPort, 逻辑型, "ISocket.dll", "HP_Agent_ConnectWithExtraAndLocalAddressPort", , 连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() / OnHandShake() 事件
    .参数 pAgent, 整数型
    .参数 lpszRemoteAddress, 文本型, , 服务端地址
    .参数 usPort, 短整数型, , 服务端端口
    .参数 pdwConnID, 整数型, 传址, 连接 ID（默认：nullptr，不获取连接 ID）
    .参数 pExtra, 整数型, , 连接附加数据（默认：nullptr）
    .参数 usLocalPort, 整数型, , 本地端口（默认：0）
    .参数 lpszLocalAddress, 文本型, , 本地地址（默认：nullptr，使用 Start() 方法中绑定的地址）

.版本 2

.常量 _0x80000000, "-2147483648", 公开
.常量 _0x60028, "393256", 公开
.常量 _0x160028, "1441832", 公开
.常量 SS_STARTING, "0", 公开, 正在启动
.常量 SS_STARTED, "1", 公开, 已经启动
.常量 SS_STOPPING, "2", 公开, 正在停止
.常量 SS_STOPPED, "3", 公开, 已经停止
.常量 SO_UNKNOWN, "0", 公开, 未知
.常量 SO_ACCEPT, "1", 公开, 接受
.常量 SO_CONNECT, "2", 公开, 连接
.常量 SO_SEND, "3", 公开, 发送
.常量 SO_RECEIVE, "4", 公开, 接收
.常量 SO_CLOSE, "5", 公开, 关闭
.常量 HR_OK, "0", 公开, 成功
.常量 HR_IGNORE, "1", 公开, 忽略
.常量 HR_ERROR, "2", 公开, 错误
.常量 FR_OK, "0", 公开, 成功
.常量 FR_LENGTH_TOO_LONG, "1", 公开, 抓取长度过大
.常量 FR_DATA_NOT_FOUND, "2", 公开, 找不到 ConnID 对应的数据
.常量 SP_PACK, "0", 公开, 打包模式（默认） ：尽量把多个发送操作的数据组合在一起发送，增加传输效率
.常量 SP_SAFE, "1", 公开, 安全模式   ：尽量把多个发送操作的数据组合在一起发送，并控制传输速度，避免缓冲区溢出
.常量 SP_DIRECT, "2", 公开, 直接模式   ：对每一个发送操作都直接投递，适用于负载不高但要求实时性较高的场合
.常量 OSSP_NONE, "0", 公开, 不同步（默认） ：不同步 OnSend 事件，此时可能同时触发 OnReceive 和 OnClose 事件
.常量 OSSP_CLOSE, "1", 公开, 同步 OnClose ：只同步 OnClose 事件，此时可能同时触发 OnReceive 事件
.常量 OSSP_RECEIVE, "2", 公开, 同步 OnReceive ：（只用于 TCP 组件）同步 OnReceive 和 OnClose 事件，此处不可能同时触发 OnReceive 或 OnClose 事件
.常量 RAP_NONE, "0", 公开, 不重用
.常量 RAP_ADDR_ONLY, "1", 公开, 仅重用地址
.常量 RAP_ADDR_AND_PORT, "2", 公开, 重用地址和端口
.常量 SE_OK, "0", 公开, 成功
.常量 SE_ILLEGAL_STATE, "1", 公开, 当前状态不允许操作
.常量 SE_INVALID_PARAM, "2", 公开, 非法参数
.常量 SE_SOCKET_CREATE, "3", 公开, 创建 SOCKET 失败
.常量 SE_SOCKET_BIND, "4", 公开, 绑定 SOCKET 失败
.常量 SE_SOCKET_PREPARE, "5", 公开, 设置 SOCKET 失败
.常量 SE_SOCKET_LISTEN, "6", 公开, 监听 SOCKET 失败
.常量 SE_CP_CREATE, "7", 公开, 创建完成端口失败
.常量 SE_WORKER_THREAD_CREATE, "8", 公开, 创建工作线程失败
.常量 SE_DETECT_THREAD_CREATE, "9", 公开, 创建监测线程失败
.常量 SE_SOCKE_ATTACH_TO_CP, "10", 公开, 绑定完成端口失败
.常量 SE_CONNECT_SERVER, "11", 公开, 连接服务器失败
.常量 SE_NETWORK, "12", 公开, 网络错误
.常量 SE_DATA_PROC, "13", 公开, 数据处理错误
.常量 SE_DATA_SEND, "14", 公开, 数据发送失败
.常量 SE_SSL_ENV_NOT_READY, "101", 公开, SSL 环境未就绪
.常量 SSL_SM_CLIENT, "0", 公开, 客户端模式
.常量 SSL_SM_SERVER, "1", 公开, 服务端模式
.常量 SSL_VM_NONE, "0", 公开, 没有
.常量 SSL_VM_PEER, "1", 公开, 相同证书
.常量 SSL_VM_FAIL_IF_NO_PEER_CERT, "2", 公开, 如果没有相同证书失败
.常量 SSL_VM_CLIENT_ONCE, "4", 公开
.常量 SSL_SSI_MIN, "0", 公开
.常量 SSL_SSI_CTX, "0", 公开, SSL CTX    （输出类型：SSL_CTX*）
.常量 SSL_SSI_CTX_METHOD, "1", 公开, SSL CTX Mehtod  （输出类型：SSL_METHOD*）
.常量 SSL_SSI_CTX_CIPHERS, "2", 公开, SSL CTX Ciphers  （输出类型：STACK_OF(SSL_CIPHER)*）
.常量 SSL_SSI_CTX_CERT_STORE, "3", 公开, SSL CTX Cert Store （输出类型：X509_STORE*）
.常量 SSL_SSI_SERVER_NAME_TYPE, "4", 公开, Server Name Type  （输出类型：int）
.常量 SSL_SSI_SERVER_NAME, "5", 公开, Server Name   （输出类型：LPCSTR）
.常量 SSL_SSI_VERSION, "6", 公开, SSL Version   （输出类型：LPCSTR）
.常量 SSL_SSI_METHOD, "7", 公开, SSL Method   （输出类型：SSL_METHOD*）
.常量 SSL_SSI_CERT, "8", 公开, SSL Cert    （输出类型：X509*）
.常量 SSL_SSI_PKEY, "9", 公开, SSL Private Key  （输出类型：EVP_PKEY*）
.常量 SSL_SSI_CURRENT_CIPHER, "10", 公开, SSL Current Cipher （输出类型：SSL_CIPHER*）
.常量 SSL_SSI_CIPHERS, "11", 公开, SSL Available Ciphers（输出类型：STACK_OF(SSL_CIPHER)*）
.常量 SSL_SSI_CLIENT_CIPHERS, "12", 公开, SSL Client Ciphers （输出类型：STACK_OF(SSL_CIPHER)*）
.常量 SSL_SSI_PEER_CERT, "13", 公开, SSL Peer Cert  （输出类型：X509*）
.常量 SSL_SSI_PEER_CERT_CHAIN, "14", 公开, SSL Peer Cert Chain （输出类型：STACK_OF(X509)*）
.常量 SSL_SSI_VERIFIED_CHAIN, "15", 公开, SSL Verified Chain （输出类型：STACK_OF(X509)*）
.常量 SSL_SSI_MAX, "15", 公开
.常量 HV_1_0, "1", 公开, HTTP/1.0
.常量 HV_1_1, "257", 公开, HTTP/1.1
.常量 HUF_SCHEMA, "0", 公开, 概要
.常量 HUF_HOST, "1", 公开, 主机
.常量 HUF_PORT, "2", 公开, 端口
.常量 HUF_PATH, "3", 公开, 路径
.常量 HUF_QUERY, "4", 公开, 查询
.常量 HUF_FRAGMENT, "5", 公开, 片段
.常量 HUF_USERINFO, "6", 公开, 用户信息
.常量 HUF_MAX, "7", 公开, 最大
.常量 HPR_OK, "0", 公开, 解析成功
.常量 HPR_SKIP_BODY, "1", 公开, 跳过当前请求 BODY（仅用于 OnHeadersComplete 事件）
.常量 HPR_UPGRADE, "2", 公开, 升级协议（仅用于 OnHeadersComplete 事件）
.常量 HPR_ERROR, "-1", 公开, 解析错误，终止解析，断开连接
.常量 HUT_NONE, "0", 公开, 没有升级
.常量 HUT_WEB_SOCKET, "1", 公开, WebSocket
.常量 HUT_HTTP_TUNNEL, "2", 公开, HTTP 隧道
.常量 HUT_UNKNOWN, "-1", 公开, 未知类型
.常量 TRP_CALL_FAIL, "0", 公开, 立刻返回失败
.常量 TRP_WAIT_FOR, "1", 公开, 等待（直到成功、超时或线程池关闭等原因导致失败）
.常量 TRP_CALLER_RUN, "2", 公开, 调用者线程直接执行
.常量 TBT_COPY, "0", 公开, 深拷贝->pBuffer 复制到 TSocketTask 对象。此后 TSocketTask 对象与 pBuffer 不再有任何关联,-> 适用于 pBuffer 不大或 pBuffer 生命周期不受控的场景
.常量 TBT_REFER, "1", 公开, 浅拷贝->pBuffer 不复制到 TSocketTask 对象，需确保 TSocketTask 对象生命周期内 pBuffer 必须有效,-> 适用于 pBuffer 较大或 pBuffer 可重用，并且 pBuffer 生命周期受控的场景
.常量 TBT_ATTACH, "2", 公开, 附属->执行浅拷贝，但 TSocketTask 对象会获得 pBuffer 的所有权，并负责释放 pBuffer，避免多次缓冲区拷贝,-> 注意：pBuffer 必须由 HP_SYS_Malloc() 函数分配才能使用本类型，否则可能会发生内存访问错误
.常量 CM_UNICAST, "-1", 公开, 单播
.常量 CM_MULTICAST, "0", 公开, 组播
.常量 CM_BROADCAST, "1", 公开, 广播
.常量 IPT_ALL, "0", 公开, 所有
.常量 IPT_IPV4, "1", 公开, IPv4
.常量 IPT_IPV6, "2", 公开, IPv6
.常量 HSC_CONTINUE, "100", 公开
.常量 HSC_SWITCHING_PROTOCOLS, "101", 公开
.常量 HSC_PROCESSING, "102", 公开
.常量 HSC_OK, "200", 公开
.常量 HSC_CREATED, "201", 公开
.常量 HSC_ACCEPTED, "202", 公开
.常量 HSC_NON_AUTHORITATIVE_INFORMATION, "203", 公开
.常量 HSC_NO_CONTENT, "204", 公开
.常量 HSC_RESET_CONTENT, "205", 公开
.常量 HSC_PARTIAL_CONTENT, "206", 公开
.常量 HSC_MULTI_STATUS, "207", 公开
.常量 HSC_ALREADY_REPORTED, "208", 公开
.常量 HSC_IM_USED, "226", 公开
.常量 HSC_MULTIPLE_CHOICES, "300", 公开
.常量 HSC_MOVED_PERMANENTLY, "301", 公开
.常量 HSC_MOVED_TEMPORARILY, "302", 公开
.常量 HSC_SEE_OTHER, "303", 公开
.常量 HSC_NOT_MODIFIED, "304", 公开
.常量 HSC_USE_PROXY, "305", 公开
.常量 HSC_SWITCH_PROXY, "306", 公开
.常量 HSC_TEMPORARY_REDIRECT, "307", 公开
.常量 HSC_PERMANENT_REDIRECT, "308", 公开
.常量 HSC_BAD_REQUEST, "400", 公开
.常量 HSC_UNAUTHORIZED, "401", 公开
.常量 HSC_PAYMENT_REQUIRED, "402", 公开
.常量 HSC_FORBIDDEN, "403", 公开
.常量 HSC_NOT_FOUND, "404", 公开
.常量 HSC_METHOD_NOT_ALLOWED, "405", 公开
.常量 HSC_NOT_ACCEPTABLE, "406", 公开
.常量 HSC_PROXY_AUTHENTICATION_REQUIRED, "407", 公开
.常量 HSC_REQUEST_TIMEOUT, "408", 公开
.常量 HSC_CONFLICT, "409", 公开
.常量 HSC_GONE, "410", 公开
.常量 HSC_LENGTH_REQUIRED, "411", 公开
.常量 HSC_PRECONDITION_FAILED, "412", 公开
.常量 HSC_REQUEST_ENTITY_TOO_LARGE, "413", 公开
.常量 HSC_REQUEST_URI_TOO_LONG, "414", 公开
.常量 HSC_UNSUPPORTED_MEDIA_TYPE, "415", 公开
.常量 HSC_REQUESTED_RANGE_NOT_SATISFIABLE, "416", 公开
.常量 HSC_EXPECTATION_FAILED, "417", 公开
.常量 HSC_MISDIRECTED_REQUEST, "421", 公开
.常量 HSC_UNPROCESSABLE_ENTITY, "422", 公开
.常量 HSC_LOCKED, "423", 公开
.常量 HSC_FAILED_DEPENDENCY, "424", 公开
.常量 HSC_UNORDERED_COLLECTION, "425", 公开
.常量 HSC_UPGRADE_REQUIRED, "426", 公开
.常量 HSC_PRECONDITION_REQUIRED, "428", 公开
.常量 HSC_TOO_MANY_REQUESTS, "429", 公开
.常量 HSC_REQUEST_HEADER_FIELDS_TOO_LARGE, "431", 公开
.常量 HSC_RETRY_WITH, "449", 公开
.常量 HSC_UNAVAILABLE_FOR_LEGAL_REASONS, "451", 公开
.常量 HSC_INTERNAL_SERVER_ERROR, "500", 公开
.常量 HSC_NOT_IMPLEMENTED, "501", 公开
.常量 HSC_BAD_GATEWAY, "502", 公开
.常量 HSC_SERVICE_UNAVAILABLE, "503", 公开
.常量 HSC_GATEWAY_TIMEOUT, "504", 公开
.常量 HSC_HTTP_VERSION_NOT_SUPPORTED, "505", 公开
.常量 HSC_VARIANT_ALSO_NEGOTIATES, "506", 公开
.常量 HSC_INSUFFICIENT_STORAGE, "507", 公开
.常量 HSC_LOOP_DETECTED, "508", 公开
.常量 HSC_BANDWIDTH_LIMIT_EXCEEDED, "509", 公开
.常量 HSC_NOT_EXTENDED, "510", 公开
.常量 HSC_NETWORK_AUTHENTICATION_REQUIRED, "511", 公开
.常量 HSC_UNPARSEABLE_RESPONSE_HEADERS, "600", 公开
.常量 CRLF, "“\r\n”", 公开
.常量 NV_SEPARATOR_CHAR, "“=”", 公开
.常量 HEADER_SEPARATOR, "“: ”", 公开
.常量 COOKIE_TOKENIZE, "“; ”", 公开
.常量 STR_HTTP_1_0, "“HTTP/1.0”", 公开
.常量 STR_HTTP_1_1, "“HTTP/1.1”", 公开
.常量 HOST_HEADER, "“Host”", 公开
.常量 COOKIE_HEADER, "“Cookie”", 公开
.常量 SET_COOKIE_HEADER, "“Set-Cookie”", 公开
.常量 CONTENT_TYPE_HEADER, "“Content-Type”", 公开
.常量 CONTENT_LENGTH_HEADER, "“Content-Length”", 公开
.常量 CONTENT_ENCODING_HEADER, "“Content-Encoding”", 公开
.常量 TRANSFER_ENCODING_HEADER, "“Transfer-Encoding”", 公开
.常量 UPGRADE_HEADER, "“Upgrade”", 公开
.常量 WEB_SOCKET_HEADER_VALUE, "“WebSocket”", 公开
.常量 HTTP_METHOD_POST, "“POST”", 公开
.常量 HTTP_METHOD_PUT, "“PUT”", 公开
.常量 HTTP_METHOD_PATCH, "“PATCH”", 公开
.常量 HTTP_METHOD_GET, "“GET”", 公开
.常量 HTTP_METHOD_DELETE, "“DELETE”", 公开
.常量 HTTP_METHOD_HEAD, "“HEAD”", 公开
.常量 HTTP_METHOD_TRACE, "“TRACE”", 公开
.常量 HTTP_METHOD_OPTIONS, "“OPTIONS”", 公开
.常量 HTTP_METHOD_CONNECT, "“CONNECT”", 公开
.常量 MIN_WS_HEADER_LEN, "2", 公开
.常量 MAX_WS_HEADER_LEN, "14", 公开
.常量 ST_STARTING, "0", 公开
.常量 ST_STARTED, "1", 公开
.常量 ST_CONNECTING, "2", 公开
.常量 ST_CONNECTED, "3", 公开
.常量 ST_STOPING, "4", 公开
.常量 ST_STOPED, "5", 公开
.常量 HP_Socket_常量分割尾
.常量 蓝奏云_NULL, "0", 公开
.常量 蓝奏云_js2, "<文本长度: 4398>", 公开
.常量 蓝奏云_CP_UTF8, "65001", 公开
.常量 蓝奏云_CP_gb2312, "936", 公开, ANSI/OEM Simplified Chinese (PRC, Singapore); Chinese Simplified (GB2312)
.常量 蓝奏云_CP_ACP, "0", 公开
.常量 MYSQL权限_无, "0", 公开
.常量 MYSQL权限_查询, "1", 公开
.常量 MYSQL权限_增加, "2", 公开
.常量 MYSQL权限_更改, "4", 公开
.常量 MYSQL权限_删除, "8", 公开
.常量 MYSQL权限_索引, "16", 公开
.常量 MYSQL权限_改变表, "32", 公开
.常量 MYSQL权限_创建表或库或索引, "64", 公开
.常量 MYSQL权限_删除表或库, "128", 公开
.常量 MYSQL权限_备注表或库, "256", 公开
.常量 MYSQL权限_重新装载服务器, "512", 公开
.常量 MYSQL权限_关闭服务器, "1024", 公开
.常量 MYSQL权限_服务器进程管理, "2048", 公开
.常量 MYSQL权限_服务器文件存取, "4096", 公开
.常量 MYSQL权限_所有, "8192", 公开
.常量 MYSQL_未压缩浮点数型, "0", 公开, decimal。未压缩浮点数，不能无符号。行为如同一个文本型：“未压缩”意味着数字作为一个字符串被存储，值的每一位使用一个字符。值的最大范围与DOUBLE相同。
.常量 MYSQL_字节型, "101", 公开, tinyint。一个字节。有符号的范围是-128到127，无符号的范围是0到255。
.常量 MYSQL_逻辑型, "102", 公开, bool。逻辑型，一个字节。
.常量 MYSQL_短整型, "2", 公开, smallint。短整型，有符号的范围是-32768到32767，无符号的范围是0到65535。
.常量 MYSQL_整型, "3", 公开, int。整型，有符号的范围是-2147483648到2147483647，无符号的范围是0到4294967295。
.常量 MYSQL_浮点型, "4", 公开, float。浮点型，不能无符号。允许的值是-3.402823466E+38到-1.175494351E-38，0 和1.175494351E-38到3.402823466E+38。
.常量 MYSQL_双精度浮点型, "5", 公开, double。双精度浮点型，不能无符号。允许的值是-1.7976931348623157E+308到-2.2250738585072014E-308、 0和2.2250738585072014E-308到1.7976931348623157E+308。
.常量 MYSQL_时间戳记型, "7", 公开, timestamp。时间戳记，范围是'1970-01-01 00:00:00'到2037年的某时。MySQL以YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD或YYMMDD格式来显示时间戳记的值
.常量 MYSQL_长整型, "8", 公开, bigint。长整型，有符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到18446744073709551615。
.常量 MYSQL_24位整型, "9", 公开, mediumint。24整型，有符号的范围是-8388608到8388607，无符号的范围是0到16777215。
.常量 MYSQL_日期型, "10", 公开, date。日期，支持的范围是'1000-01-01'到'9999-12-31'。MySQL以'YYYY-MM-DD'格式来显示日期值，但是允许你使用字符串或数字把值赋给类型为日期的列。
.常量 MYSQL_时间型, "11", 公开, time。时间，范围是'-838:59:59'到'838:59:59'。MySQL以'HH:MM:SS'格式来显示时间值，但是允许你使用字符串或数字把值赋给类型为时间的列。
.常量 MYSQL_日期时间型, "12", 公开, datetime。日期与时间，支持的范围是'1000-01-01 00:00:00'到'9999-12-31 23:59:59'。MySQL以'YYYY-MM-DD HH:MM:SS'格式来显示日期与时间的值。
.常量 MYSQL_年份型, "13", 公开, year。年，允许的值是1901到2155，和0000（4位年格式），如果你使用2位，1970-2069( 70-69)。MySQL以YYYY格式来显示年的值。
.常量 MYSQL_短字节集, "25201", 公开, tinyblob。短字节集，最大长度为255(2^8-1)个字符。
.常量 MYSQL_短备注型, "25202", 公开, tinytext。短备注，最大长度为255(2^8-1)个字符。
.常量 MYSQL_备注型, "25203", 公开, test。备注，最大长度为65535(2^16-1)个字符。
.常量 MYSQL_字节集型, "25204", 公开, blob。字节集，最大长度为65535(2^16-1)个字符。
.常量 MYSQL_长字节集型, "25205", 公开, mediumblob。长字节集，最大长度为16777215(2^24-1)个字符。
.常量 MYSQL_长备注型, "25206", 公开, mediumtext。长备注，最大长度为16777215(2^24-1)个字符。
.常量 MYSQL_巨字节集型, "25207", 公开, longblob。巨字节集，最大长度为4294967295(2^32-1)个字符。
.常量 MYSQL_巨备注型, "25208", 公开, longtext。巨备注，最大长度为4294967295(2^32-1)个字符。
.常量 MYSQL_变长文本型, "253", 公开, varchar。变长文本型，一个变长字符串。
.常量 MYSQL_枚举型, "25401", 公开, enum。枚举，一个仅有一个值的字符串对象，这个值式选自与值列表'value1'、'value2', ...,或NULL。一个枚举最多能有65535不同的值。
.常量 MYSQL_集合型, "25402", 公开, set。集合，能有零个或多个值的一个字符串对象，其中每一个必须从值列表'value1', 'value2', ...选出。一个集合最多能有64个成员。
.常量 MYSQL_文本型, "25403", 公开, char。文本型，一个定长字符串。
.常量 MYSQL修改表_增加字段, "1", 公开
.常量 MYSQL修改表_修改字段, "2", 公开
.常量 MYSQL修改表_删除字段, "3", 公开
.常量 MYSQL修改表_增加索引, "4", 公开
.常量 MYSQL修改表_删除索引, "5", 公开
.常量 MYSQL修改表_增加主键, "6", 公开
.常量 MYSQL修改表_删除主键, "7", 公开
.常量 MYSQL选项_连接超时, "0", 公开, MYSQL_OPT_CONNECT_TIMEOUT 值为：整数型
.常量 MYSQL选项_使用压缩协议, "1", 公开, MYSQL_OPT_COMPRESS 值为：0或1
.常量 MYSQL选项_使用命名管道, "2", 公开, MYSQL_OPT_NAMED_PIPE 值为：0或1
.常量 MYSQL选项_INIT_COMMAND, "3", 公开, MYSQL_INIT_COMMAND
.常量 MYSQL选项_READ_DEFAULT_FILE, "4"
.常量 MYSQL选项_READ_DEFAULT_GROUP, "5"
.常量 MYSQL选项_字符集定义文件目录, "6", 公开, MYSQL_SET_CHARSET_DIR 值为：文本型
.常量 MYSQL选项_默认字符集名, "7", 公开, MYSQL_SET_CHARSET_NAME 值为：文本型
.常量 MYSQL选项_OPT_LOCAL_INFILE, "8"
.常量 MYSQL选项_连接协议, "9", 公开, MYSQL_OPT_PROTOCOL 值为：{TCP | SOCKET | PIPE | MEMORY}
.常量 MYSQL选项_SHARED_MEMORY_BASE_NAME, "10"
.常量 MYSQL选项_读取超时, "11", 公开, MYSQL_OPT_READ_TIMEOUT 值为：整数型
.常量 MYSQL选项_写入超时, "12", 公开, MYSQL_OPT_WRITE_TIMEOUT 值为：整数型
.常量 MYSQL选项_OPT_USE_RESULT, "13"
.常量 MYSQL选项_OPT_USE_REMOTE_CONNECTION, "14"
.常量 MYSQL选项_OPT_USE_EMBEDDED_CONNECTION, "15"
.常量 MYSQL选项_OPT_GUESS_CONNECTION, "16"
.常量 MYSQL选项_SET_CLIENT_IP, "17"
.常量 MYSQL选项_SECURE_AUTH, "18"
.常量 MYSQL选项_REPORT_DATA_TRUNCATION, "19"
.常量 MYSQL选项_自动重新连接, "20", 公开, MYSQL选项_OPT_RECONNECT 值为：0或1
.常量 精易论坛模块注释, "<文本长度: 1339>", , 请保留此信息，勿删除或修改。
.常量 常量1, "<文本长度: 62>"
.常量 常量_IP, "<文本长度: 64759>"
.常量 旧窗口过程, "“oldWndProc”", 公开
.常量 LMEM_ZEROINIT, "64", 公开
.常量 WM_NOTIFY, "78", 公开, 当某个控件的某个事件已经发生或这个控件需要得到一些信息时，发送此消息给它的父窗口
.常量 NM_CUSTOMDRAW, "-12", 公开
.常量 CDDS_PREPAINT, "1", 公开
.常量 CDRF_NOTIFYSUBITEMDRAW, "32", 公开
.常量 CDDS_ITEMPREPAINT, "65537", 公开
.常量 CDDS_SUBITEM, "131072", 公开
.常量 DT_VCENTER, "4", 公开
.常量 DT_LEFT, "0", 公开
.常量 DT_SINGLELINE, "32", 公开
.常量 CDRF_SKIPDEFAULT, "4", 公开
.常量 WS_POPUP, "-2147483648", 公开, 该窗口是一个弹出窗口。此样式不能与WS_CHILD样式一起使用。
.常量 SMTO_ABORTIFHUNG, "2", , 如果接收线程似乎没有响应或“挂起”，则该函数无需等待超时时间结束即可返回。
.常量 IMAGE_BITMAP, "0", 公开, 复制位图。
.常量 IMAGE_ICON, "1", 公开, 复制一个图标。
.常量 IMAGE_CURSOR, "2", 公开, 复制光标。
.常量 STIF_DEFAULT, "0", 公开
.常量 STIF_SUPPORT_HEX, "1", 公开
.常量 CP_gb2312, "936", 公开, ANSI/OEM Simplified Chinese (PRC, Singapore); Chinese Simplified (GB2312)
.常量 CP_UTF8, "65001", 公开, Unicode (UTF-8)
.常量 CP_BIG5, "950", 公开, 繁体中文（Big5）
.常量 HtmlEntitiesTable, "<文本长度: 17989>", 公开,  HTML Entity 目前最全转义表，没错，就是最
.常量 GB2312_CHARSET, "134", , 此字体支持简体中文字符集
.常量 ERROR_BUFFER_OVERFLOW, "111", 公开, SizePointer参数 指示的缓冲区大小太小，无法容纳适配器信息或AdapterAddresses参数为NULL。返回的SizePointer参数指向保存适配器信息所需的缓冲区大小。
.常量 ERROR_SUCCESS, "0", 公开, 操作成功完成。
.常量 ERROR_ALREADY_EXISTS, "183", , 当文件已存在时，无法创建该文件
.常量 ERROR_NOTVERSION, "<文本长度: 28>", , 该功能不支持当前操作系统版本
.常量 MIB_IF_TYPE_ETHERNET, "6", 公开, 以太网网络接口。
.常量 MIB_IF_TYPE_FDDI, "15", 公开, 光纤分布式数据接口 (FDDI) 网络接口。
.常量 MIB_IF_TYPE_LOOPBACK, "24", 公开, 软件环回网络接口。
.常量 MIB_IF_TYPE_OTHER, "1", 公开, 一些其他类型的网络接口。
.常量 MIB_IF_TYPE_PPP, "23", 公开, PPP 网络接口。
.常量 MIB_IF_TYPE_SLIP, "28", 公开, ATM 网络接口。
.常量 MIB_IF_TYPE_TOKENRING, "9", 公开, 令牌环网络接口。
.常量 MIB_IF_TYPE_IEEE80211, "71", 公开, IEEE 802.11 无线网络接口。
.常量 ERROR_INVALID_PARAMETER, "87", , 为表分配的空间不足。表的大小在pdwSize参数中返回，并且必须用于对此函数的后续调用，才能成功检索表
.常量 ERROR_INSUFFICIENT_BUFFER, "122", 公开, 一个无效参数传递给函数。如果TableClass参数包含未在TCP_TABLE_CLASS枚举中定义的值， 则返回此错误。
.常量 WSAEAFNOSUPPORT, "10047", , 使用了与请求的协议不兼容的地址。
.常量 AF_INET, "2", , IPv4
.常量 AF_INET6, "23", , IPv6
.常量 TCP_TABLE_OWNER_PID_ALL, "5", , https://msdn.microsoft.com/en-us/library/aa366386.aspx
.常量 UDP_TABLE_OWNER_PID, "1", , https://msdn.microsoft.com/en-us/library/aa366388.aspx
.常量 TH32CS_SNAPHEAPLIST, "1", , 包括快照中th32ProcessID中指定的所有进程堆。
.常量 TH32CS_SNAPPROCESS, "2", , 在快照中包括系统中的所有进程。
.常量 TH32CS_SNAPTHREAD, "4", , 在快照中包括系统中的所有线程。
.常量 TH32CS_SNAPMODULE, "8", , 包括快照中th32ProcessID中指定的进程的所有模块。
.常量 TH32CS_SNAPALL, "15", , 包括系统中的所有进程和线程，以及th32ProcessID中指定的进程的堆和模块。
.常量 常量_过滤字符, "<文本长度: 9>"
.常量 TimestampToString, "<文本长度: 480>"
.常量 WM_GETTEXTLENGTH, "14", 公开, 得到与一个窗口有关的文本的长度（不包含空字符）
.常量 SMTO_NORMAL, "0", 公开
.常量 MAXCHAR, "127", , 表示有符号字节的最大值。
.常量 MAXBYTE, "255", , 表示无符号字节的最大值。
.常量 MAXSHORT, "32767", , 表示有符号短整型的最大值。
.常量 MAXWORD, "65535", , 表示无符号短整型的最大值。
.常量 MAXLONG, "2147483647", , 表示有符号整型的最大值。
.常量 MAXDWORD, "4294967295", , 表示无符号整型的最大值。
.常量 服务器消息, "1029", 公开, 服务器消息
.常量 客户消息, "1030", 公开, 客户消息
.常量 FD_CLOSE, "32", 公开, 客户退出
.常量 FD_ACCEPT, "8", 公开, 客户进入
.常量 FD_READ, "1", 公开, 数据到达
.常量 PF_INET, "2", 公开, TCP/IP协议族
.常量 SOCK_STREAM, "1", 公开, 流套接字类型(TCP)
.常量 SOCK_DGRAM, "2", 公开, 数据报套接字类型(UDP)
.常量 IPPROTO_TCP, "6", 公开
.常量 IPPROTO_UDP, "17", 公开, 用户数据报协议（UDP/IP），一种无连接的数据报协议。
.常量 SRCCOPY, "13369376", 公开, 直接复制，不做任何修改。
.常量 网页属性_网页标题, "“title”", 公开
.常量 网页属性_网页地址, "“location”", 公开
.常量 网页属性_网页源码, "“outerHTML”", 公开, outerHTML
.常量 网页属性_网页文本, "“innerText”", 公开, innerText
.常量 网页属性_网站域名, "“domain”", 公开, domain
.常量 网页属性_访问来源, "“referrer”", 公开, referrer
.常量 网页属性_创建时间, "“fileCreatedDate”", 公开, fileCreatedDate
.常量 网页属性_修改时间, "“lastModified”", 公开, lastModified
.常量 网页属性_Cookies, "“cookie”", 公开, cookie
.常量 网页属性_编码类型, "“charset”", 公开, charset
.常量 网页属性_文档大小, "“fileSize”", 公开, fileSize
.常量 脚本类型_JavaScript, "“JavaScript”", 公开
.常量 脚本类型_VBScript, "“VBScript”", 公开
.常量 网页事件_selectedIndex, "“selectedIndex”", 公开, 组合框被选择
.常量 网页事件_onabort, "“onabort”", 公开, 当用户中断下载图像时触发。.常量 网页事件_onactivate, "“onactivate”", 公开, 当对象设置为活动元素时触发。
.常量 网页事件_onafterprint, "“onafterprint”", 公开, 对象所关联的文档打印或打印预览后立即在对象上触发。
.常量 网页事件_onafterupdate, "“onafterupdate”", 公开, 当成功更新数据源对象中的关联对象后在数据绑定对象上触发。
.常量 网页事件_onbeforeactivate, "“onbeforeactivate”", 公开, 对象要被设置为当前元素前立即触发。
.常量 网页事件_onbeforecopy, "“onbeforecopy”", 公开, 当选中区复制到系统剪贴板之前在源对象触发。
.常量 网页事件_onbeforecut, "“onbeforecut”", 公开, 当选中区从文档中删除之前在源对象触发。
.常量 网页事件_onbeforedeactivate, "“onbeforedeactivate”", 公开, 在 activeElement 从当前对象变为父文档其它对象之前立即触发。
.常量 网页事件_onbeforeeditfocus, "“onbeforeeditfocus”", 公开, 在包含于可编辑元素内的对象进入用户界面激活状态前或可编辑容器变成控件选中区前触发。
.常量 网页事件_onbeforepaste, "“onbeforepaste”", 公开, 在选中区从系统剪贴板粘贴到文档前在目标对象上触发。
.常量 网页事件_onbeforeprint, "“onbeforeprint”", 公开, 对象的关联文档打印或打印预览前在对象上触发。
.常量 网页事件_onbeforeunload, "“onbeforeunload”", 公开, 在页面将要被卸载前触发。
.常量 网页事件_onbeforeupdate, "“onbeforeupdate”", 公开, 当成功更新数据源对象中的关联对象前在数据绑定对象上触发。
.常量 网页事件_onblur, "“onblur”", 公开, 在对象失去输入焦点时触发。***************
.常量 网页事件_onbounce, "“onbounce”", 公开, 当 marquee 对象的 behavior 属性设置为“alternate”且字幕的内容到达窗口一边时触发。
.常量 网页事件_oncellchange, "“oncellchange”", 公开, 在数据供应者中的数据变更时触发。
.常量 网页事件_onchange, "“onchange”", 公开, 当对象或选中区的内容改变时触发。
.常量 网页事件_oncontextmenu, "“oncontextmenu”", 公开, 在用户使用鼠标右键单击客户区打开上下文菜单时触发。
.常量 网页事件_oncontrolselect, "“oncontrolselect”", 公开, 当用户将要对该对象制作一个控件选中区时触发。
.常量 网页事件_oncopy, "“oncopy”", 公开, 当用户复制对象或选中区，将其添加到系统剪贴板上时在源元素上触发。
.常量 网页事件_oncut, "“oncut”", 公开, 当对象或选中区从文档中删除并添加到系统剪贴板上时在源元素上触发。
.常量 网页事件_ondataavailable, "“ondataavailable”", 公开, 每当异步传输数据的数据源对象的数据到达时触发。
.常量 网页事件_ondatasetchanged, "“ondatasetchanged”", 公开, 当数据源对象对应的数据集发生变更时触发。
.常量 网页事件_ondatasetcomplete, "“ondatasetcomplete”", 公开, 触发就表明数据源对象所有数据都可用。
.常量 网页事件_ondeactivate, "“ondeactivate”", 公开, 当 activeElement 从当前对象变为父文档其它对象时触发。
.常量 网页事件_ondrag, "“ondrag”", 公开, 当进行拖曳操作时在源对象上持续触发。
.常量 网页事件_ondragend, "“ondragend”", 公开, 当用户在拖曳操作结束后释放鼠标时在源对象上触发。
.常量 网页事件_ondragenter, "“ondragenter”", 公开, 当用户拖曳对象到一个合法拖曳目标时在目标元素上触发。
.常量 网页事件_ondragleave, "“ondragleave”", 公开, 当用户在拖曳操作过程中将鼠标移出合法拖曳目标时在目标对象上触发。
.常量 网页事件_ondragover, "“ondragover”", 公开, 当用户拖曳对象划过合法拖曳目标时持续在目标元素上触发。
.常量 网页事件_ondragstart, "“ondragstart”", 公开, 当用户开始拖曳文本选中区或选中对象时在源对象上触发。
.常量 网页事件_ondrop, "“ondrop”", 公开, 当鼠标按钮在拖曳操作过程中释放时在目标对象上触发。
.常量 网页事件_onerror, "“onerror”", 公开, 当对象装载过程中发生错误时触发。
.常量 网页事件_onerrorupdate, "“onerrorupdate”", 公开, 更新数据源对象中的关联数据出错时在数据绑定对象上触发。
.常量 网页事件_onfilterchange, "“onfilterchange”", 公开, 当可视滤镜更改状态或完成转换时触发。
.常量 网页事件_onfinish, "“onfinish”", 公开, 当字幕循环完成后触发。
.常量 网页事件_onfocus, "“onfocus”", 公开, 当对象获得焦点时触发。
.常量 网页事件_onfocusin, "“onfocusin”", 公开, 当元素将要被设置为焦点之前触发。
.常量 网页事件_onfocusout, "“onfocusout”", 公开, 在移动焦点到其它元素之后立即触发于当前拥有焦点的元素上触发。
.常量 网页事件_onhelp, "“onhelp”", 公开, 当用户在浏览器为当前窗口时按
.常量 网页事件_onkeydown, "“onkeydown”", 公开, 当用户按下键盘按键时触发。
.常量 网页事件_onkeypress, "“onkeypress”", 公开, 当用户按下字面键时触发。
.常量 网页事件_onkeyup, "“onkeyup”", 公开, 当用户释放键盘按键时触发。
.常量 网页事件_onlayoutcomplete, "“onlayoutcomplete”", 公开, 当打印或打印预览版面处理完成用来自于源文档的内容填充当前
.常量 网页事件_onload, "“onload”", 公开, 在浏览器完成对象的装载后立即触发。
.常量 网页事件_onlosecapture, "“onlosecapture”", 公开, 当对象失去鼠标捕捉时触发。
.常量 网页事件_onmousedown, "“onmousedown”", 公开, 当用户用任何鼠标按钮单击对象时触发。
.常量 网页事件_onmouseenter, "“onmouseenter”", 公开, 当用户将鼠标指针移动到对象内时触发。
.常量 网页事件_onmouseleave, "“onmouseleave”", 公开, 当用户将鼠标指针移出对象边界时触发。
.常量 网页事件_onmousemove, "“onmousemove”", 公开, 当用户将鼠标划过对象时触发。
.常量 网页事件_onmouseout, "“onmouseout”", 公开, 当用户将鼠标指针移出对象边界时触发。
.常量 网页事件_onmouseover, "“onmouseover”", 公开, 当用户将鼠标指针移动到对象内时触发。
.常量 网页事件_onmouseup, "“onmouseup”", 公开, 当用户在鼠标位于对象之上时释放鼠标按钮时触发。
.常量 网页事件_onmousewheel, "“onmousewheel”", 公开, 当鼠标滚轮按钮旋转时触发。
.常量 网页事件_onmove, "“onmove”", 公开, 当对象移动时触发。
.常量 网页事件_onmoveend, "“onmoveend”", 公开, 当对象停止移动时触发。
.常量 网页事件_onmovestart, "“onmovestart”", 公开, 当对象开始移动时触发。
.常量 网页事件_onpaste, "“onpaste”", 公开, 当用户粘贴数据以便从系统剪贴板向文档传送数据时在目标对象上触发。
.常量 网页事件_onpropertychange, "“onpropertychange”", 公开, 当在对象上发生属性更改时触发。
.常量 网页事件_onreadystatechange, "“onreadystatechange”", 公开, 当对象状态变更时触发。
.常量 网页事件_onreset, "“onreset”", 公开, 当用户重置表单时触发。
.常量 网页事件_onresize, "“onresize”", 公开, 当对象的大小将要改变时触发。
.常量 网页事件_onresizeend, "“onresizeend”", 公开, 当用户更改完控件选中区中对象的尺寸时触发。
.常量 网页事件_onresizestart, "“onresizestart”", 公开, 当用户开始更改控件选中区中对象的尺寸时触发。
.常量 网页事件_onrowenter, "“onrowenter”", 公开, 触发就表明当前行已经在数据源中更改，对象上有可用的新数据值。
.常量 网页事件_onrowexit, "“onrowexit”", 公开, 当数据源控件更改对象当前行前触发。
.常量 网页事件_onrowsdelete, "“onrowsdelete”", 公开, 当行将要从记录集中被删除时触发。
.常量 网页事件_onrowsinserted, "“onrowsinserted”", 公开, 当在当前记录集中插入新行后触发。
.常量 网页事件_onscroll, "“onscroll”", 公开, 当用户滚动对象的滚动条时触发。
.常量 网页事件_onselect, "“onselect”", 公开, 当当前选中区改变时触发。
.常量 网页事件_onselectionchange, "“onselectionchange”", 公开, 当文档的选中状态改变时触发。
.常量 网页事件_onselectstart, "“onselectstart”", 公开, 对象将要被选中时触发。
.常量 网页事件_onstart, "“onstart”", 公开, 在 marquee 对象的每次循环开始时触发。
.常量 网页事件_onstop, "“onstop”", 公开, 当用户单击停止按钮或离开
.常量 网页事件_onunload, "“onunload”", 公开, 在对象卸载前立即触发。
.常量 网页事件_onsubmit, "“onsubmit”", 公开, 当表单将要被提交时触发。
.常量 网页事件_focus, "“focus”", 公开, 控件获得焦点；
.常量 网页事件_click, "“click”", 公开, 在用户用鼠标左键单击对象时触发。
.常量 网页事件_onclick, "“onclick”", 公开, 在用户用鼠标左键单击对象时触发。
.常量 网页事件_ondblclick, "“ondblclick”", 公开, 当用户用鼠标左键双击对象时触发。
.常量 PROCESS_TERMINATE, "1", , 启用TerminateProcess功能中的进程句柄来终止进程。
.常量 PROCESS_CREATE_PROCESS, "128", , 内部使用
.常量 PROCESS_VM_OPERATION, "8", 公开, 在进程的地址空间上执行操作所必需
.常量 PROCESS_CREATE_THREAD, "2", 公开, 启用在CreateRemoteThread函数中使用进程句柄来创建一个线程。
.常量 PROCESS_DUP_HANDLE, "64", 公开, 使用DuplicateHandle功能中的进程句柄作为源或目标进程来复制句柄。
.常量 INFINITE, "-1", 公开, 对于接受参数的线程处理方法，此值用于无限期挂起线程。
.常量 PROCESS_QUERY_INFORMATION, "1024", 公开, 启用GetExitCodeProcess和GetPriorityClass功能中的进程句柄来读取进程对象中的信息。
.常量 PROCESS_QUERY_LIMITED_INFORMATION, "4096", 公开, 检索有关进程的某些信息是必需的。具有PROCESS_QUERY_INFORMATION访问权限的句柄将自动授予PROCESS_QUERY_LIMITED_INFORMATION。
.常量 PROCESS_VM_READ, "16", 公开, 在使用ReadProcessMemory的进程中读取内存所必需
.常量 PROCESS_ALL_ACCESS, "2035711", 公开, 指定进程对象的所有可能的访问标志。
.常量 MEM_PRIVATE, "131072", 公开, 内存操作
.常量 PROCESS_VM_WRITE, "32", 公开, 在使用WriteProcessMemory的进程中写入内存所必需
.常量 PAGE_READONLY, "2", , 允许将视图映射为只读或写时复制访问。尝试写入特定区域会导致访问冲突。hFile参数指定的文件句柄必须使用GENERIC_READ访问权限创建。
.常量 PAGE_READWRITE, "4", 公开, 允许将视图映射为只读、写时复制或读/写访问。hFile参数指定的文件句柄必须使用 GENERIC_READ和 GENERIC_WRITE访问权限创建。
.常量 PAGE_WRITECOPY, "8", , 允许将视图映射为只读或写时复制访问。此值等效于 PAGE_READONLY。hFile参数指定的文件句柄必须使用GENERIC_READ访问权限创建 。
.常量 取CPU序列号, "<文本长度: 240>"
.常量 备份, "“SeBackupPrivilege”", 公开, 备份文件和目录
.常量 启动, "“SeRestorePrivilege”", 公开, 还原文件和目录
.常量 关机, "“SeShutdownPrivilege”", 公开, 关闭系统
.常量 调试, "“SeDebugPrivilege”", 公开, 调试程序
.常量 常量_重启, "<文本长度: 78>"
.常量 移动并运行bat, "<文本长度: 127>", , 移动并运行bat
.常量 自我删除0, "<文本长度: 18>", , 自我删除
.常量 自我删除1, "<文本长度: 108>", , 自我删除
.常量 百家姓, "<文本长度: 814>"
.常量 GENERIC_READ, "-2147483648", 公开, 指定对对象的读访问。可以从文件读取数据，文件指针可以移动。结合GENERIC_WRITE进行读写访问。
.常量 GENERIC_ALL, "268435456"
.常量 FILE_FLAG_SEQUENTIAL_SCAN, "134217728", 公开, 针对连续访问对文件缓冲进行优化
.常量 FILE_GENERIC_READ, "1179785"
.常量 GENERIC_WRITE, "1073741824", 公开, 指定对对象的写访问。数据可以写入文件，文件指针可以移动。结合GENERIC_READ进行读写访问。
.常量 OPEN_ALWAYS, "4", 公开, 4
.常量 FILE_SHARE_DELETE, "4"
.常量 FILE_ATTRIBUTE_READONLY, "1", 公开, 只读文件。应用程序可以读取文件，但不能对其进行写入或删除。
.常量 FILE_ATTRIBUTE_HIDDEN, "2", 公开, 文件或目录被隐藏。它不包含在普通目录列表中。
.常量 FILE_ATTRIBUTE_SYSTEM, "4", 公开, 操作系统使用一部分或专门使用的文件或目录。
.常量 FILE_ATTRIBUTE_DIRECTORY, "16", 公开, 标识目录的句柄
.常量 FILE_ATTRIBUTE_ARCHIVE, "32", 公开, 作为存档文件或目录的文件或目录。应用程序通常使用此属性来标记文件以进行备份或删除。
.常量 FILE_ATTRIBUTE_TEMPORARY, "256", , 用于临时存储的文件。如果有足够的高速缓存可用，文件系统避免将数据写回大容量存储，因为通常，应用程序在句柄关闭后会删除临时文件。在这种情况下，系统可以完全避免写入数据。否则，将在关闭句柄之后写入数据。
.常量 INVALID_FILE_ATTRIBUTES, "-1", , 如果函数失败，则返回值为INVALID_FILE_ATTRIBUTES。要获取扩展错误信息，请调用GetLastError。
.常量 INVALID_SET_FILE_POINTER, "-1"
.常量 FILE_LIST_DIRECTORY, "1", , 对于目录，列出目录内容的权限。
.常量 FILE_FLAG_OVERLAPPED, "1073741824", , 正在为异步 I/O 打开或创建文件或设备。
.常量 FILE_ACTION_ADDED, "1", 公开, 该文件已添加到目录中。
.常量 FILE_ACTION_REMOVED, "2", 公开, 该文件已从目录中删除。
.常量 FILE_ACTION_MODIFIED, "3", 公开, 文件已修改。这可以是时间戳或属性的更改。
.常量 FILE_ACTION_RENAMED_OLD_NAME, "4", 公开, 该文件已重命名，这是旧名称。
.常量 FILE_ACTION_RENAMED_NEW_NAME, "5", 公开, 文件已重命名，这是新名称。
.常量 INTERNET_FLAG_RELOAD, "2147483648", 公开
.常量 INTERNET_OPTION_SECURITY_FLAGS, "31", , 证书错误处理方式
.常量 INTERNET_COOKIE_THIRD_PARTY, "16", 公开, 运行第三方COOKIE
.常量 INTERNET_FLAG_NO_COOKIES, "524288", 公开
.常量 INTERNET_FLAG_NO_CACHE_WRITE, "67108864", 公开, 0x04000000
.常量 INTERNET_FLAG_NO_AUTO_REDIRECT, "2097152", 公开, HttpSendRequest、InternetOpenUrl 不自动处理重定向
.常量 INTERNET_FLAG_SECURE, "8388608", 公开, SSL访问
.常量 INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP, "32768", 公开, 禁用检测这一特殊类型的重新传入。当这个标志使用,WinINet透明允许将从HTTPS to HTTP的网址。这个标志可以使用的,HttpOpenRequest InternetOpenUrl
.常量 INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS, "16384", 公开, 禁用检测这一特殊类型的重新传入。当这个标志使用,WinINet透明允许将从HTTP到HTTPS网址。这个标志可以使用的,HttpOpenRequest InternetOpenUrl
.常量 INTERNET_FLAG_PASSIVE, "134217728", 公开, FTP连接被动模式
.常量 INTERNET_OPTION_HTTP_DECODING, "65", 公开, Enables WinINet to perform decoding for the gzip and deflate encoding schemes. For more information, see Content Encoding
.常量 常量_SC_MANAGER_CREATE_SERVICE, "2", 公开
.常量 常量_SERVICE_ALL_ACCESS, "983551", 公开
.常量 常量_SERVICE_WIN32_OWN_PROCESS, "16", 公开
.常量 常量_SERVICE_STOPPED, "1", 公开
.常量 常量_SERVICE_ACCEPT_STOP, "1", 公开
.常量 常量_SERVICE_ACCEPT_SHUTDOWN, "4", 公开
.常量 常量_SERVICE_WIN32_SHARE_PROCESS, "32", 公开
.常量 NO_ERROR, "0"
.常量 常量_SERVICE_CONTROL_SHUTDOWN, "5", 公开, shutdown
.常量 常量_SERVICE_CONTROL_STOP, "1", 公开
.常量 常量_SERVICE_CONFIG_DESCRIPTION, "1", 公开
.常量 常量_SERVICE_ERROR_NORMAL, "1", 公开
.常量 常量_SERVICE_INTERACTIVE_PROCESS, "256", 公开
.常量 常量_SERVICE_AUTO_START, "2", 公开, 0x00000002
.常量 GENERIC_EXECUTE, "536870912", 公开, 0x20000000L
.常量 SERVICE_START, "16", 公开, 0x0010
.常量 SC_MANAGER_ALL_ACCESS, "983103", 公开, 0x000F003FL
.常量 SERVICE_QUERY_STATUS, "4", 公开, 0x0004
.常量 SERVICE_STOP, "32", 公开, 0x0020
.常量 DELETE, "65536", 公开, 0x00010000L
.常量 SC_MANAGER_LOCK, "8", 公开, 0x0008
.常量 SERVICE_CHANGE_CONFIG, "2", 公开, 0x0002
.常量 SERVICE_QUERY_CONFIG, "1", 公开, 0x0001
.常量 SERVICE_NO_CHANGE, "-1", 公开, 0xffffffff
.常量 SQL_NULL_HANDLE, "0", 公开
.常量 SQL_HANDLE_ENV, "1", 公开
.常量 SQL_HANDLE_DBC, "2", 公开
.常量 SQL_HANDLE_STMT, "3", 公开
.常量 SQL_HANDLE_DESC, "4", 公开
.常量 SQL_SUCCESS, "0", 公开
.常量 SQL_SUCCESS_WITH_INFO, "1", 公开
.常量 SQL_NO_DATA, "100", 公开
.常量 SQL_ERROR, "-1", 公开
.常量 SQL_INVALID_HANDLE, "-2", 公开
.常量 SQL_STILL_EXECUTING, "2", 公开
.常量 SQL_NEED_DATA, "99", 公开
.常量 SQL_ATTR_ODBC_VERSION, "200", 公开
.常量 SQL_ATTR_CONNECTION_POOLING, "201", 公开
.常量 SQL_ATTR_CP_MATCH, "202", 公开
.常量 SQL_OV_ODBC2, "2", 公开
.常量 SQL_OV_ODBC3, "3", 公开
.常量 SQL_IS_POINTER, "-4", 公开
.常量 SQL_IS_UINTEGER, "-5", 公开
.常量 SQL_IS_INTEGER, "-6", 公开
.常量 SQL_IS_USMALLINT, "-7", 公开
.常量 SQL_IS_SMALLINT, "-8", 公开
.常量 SQL_SIGNED_OFFSET, "-20", 公开
.常量 SQL_UNSIGNED_OFFSET, "-22", 公开
.常量 SQL_C_SLONG, "-16", 公开
.常量 SQL_DRIVER_NOPROMPT, "0", 公开
.常量 SQL_DRIVER_COMPLETE, "1", 公开
.常量 SQL_DRIVER_PROMPT, "2", 公开
.常量 SQL_DRIVER_COMPLETE_REQUIRED, "3", 公开
.常量 SQL_MAX_MESSAGE_LENGTH, "512"
.常量 SQL_C_CHAR, "1", 公开
.常量 SQL_C_LONG, "4", 公开
.常量 SQL_C_SHORT, "5", 公开
.常量 SQL_C_FLOAT, "7", 公开
.常量 SQL_C_DOUBLE, "8", 公开
.常量 SQL_C_NUMERIC, "2", 公开
.常量 SQL_C_DEFAULT, "99", 公开
.常量 SQL_C_DATE, "9", 公开
.常量 SQL_C_TIME, "10", 公开
.常量 SQL_C_TIMESTAMP, "11", 公开
.常量 SQL_C_BINARY, "-2", 公开
.常量 SQL_C_BIT, "-7", 公开
.常量 SQL_C_SBIGINT, "-22", 公开
.常量 SQL_C_UBIGINT, "-24", 公开
.常量 SQL_C_TINYINT, "-6", 公开
.常量 SQL_UNKNOWN_TYPE, "0", 公开
.常量 SQL_CHAR, "1", 公开
.常量 SQL_NUMERIC, "2", 公开
.常量 SQL_DECIMAL, "3", 公开
.常量 SQL_INTEGER, "4", 公开
.常量 SQL_SMALLINT, "5", 公开
.常量 SQL_FLOAT, "6", 公开
.常量 SQL_REAL, "7", 公开
.常量 SQL_DOUBLE, "8", 公开
.常量 SQL_DATE, "9", 公开
.常量 SQL_TIME, "10", 公开
.常量 SQL_TIMESTAMP, "11", 公开
.常量 SQL_VARCHAR, "12", 公开
.常量 SQL_LONGVARCHAR, "-1", 公开
.常量 SQL_BINARY, "-2", 公开
.常量 SQL_VARBINARY, "-3", 公开
.常量 SQL_LONGVARBINARY, "-4", 公开
.常量 SQL_BIGINT, "-5", 公开
.常量 SQL_TINYINT, "-6", 公开
.常量 SQL_BIT, "-7", 公开
.常量 SQL_GUID, "-11", 公开
.常量 SQL_ATTR_ACCESS_MODE, "101", 公开
.常量 SQL_ATTR_AUTOCOMMIT, "102", 公开
.常量 SQL_ATTR_CONNECTION_TIMEOUT, "113", 公开
.常量 SQL_ATTR_CURRENT_CATALOG, "109", 公开
.常量 SQL_ATTR_DISCONNECT_BEHAVIOR, "114", 公开
.常量 SQL_ATTR_ENLIST_IN_DTC, "1207", 公开
.常量 SQL_ATTR_ENLIST_IN_XA, "1208", 公开
.常量 SQL_ATTR_LOGIN_TIMEOUT, "103", 公开
.常量 SQL_ATTR_ODBC_CURSORS, "110", 公开
.常量 SQL_ATTR_PACKET_SIZE, "112", 公开
.常量 SQL_ATTR_QUIET_MODE, "111", 公开
.常量 SQL_ATTR_TRACE, "104", 公开
.常量 SQL_ATTR_TRACEFILE, "105", 公开
.常量 SQL_ATTR_TRANSLATE_LIB, "106", 公开
.常量 SQL_ATTR_TRANSLATE_OPTION, "107", 公开
.常量 SQL_ATTR_TXN_ISOLATION, "108", 公开
.常量 SQL_ATTR_CONNECTION_DEAD, "1209", 公开
.常量 SQL_CD_TRUE, "1", 公开
.常量 SQL_CD_FALSE, "0", 公开
.常量 SQL_PARAM_TYPE_UNKNOWN, "0", 公开
.常量 SQL_PARAM_INPUT, "1", 公开
.常量 SQL_PARAM_INPUT_OUTPUT, "2", 公开
.常量 SQL_RESULT_COL, "3", 公开
.常量 SQL_PARAM_OUTPUT, "4", 公开
.常量 SQL_RETURN_VALUE, "5", 公开
.常量 SQL_NTS, "-3", 公开
.常量 SQL_AUTOCOMMIT_OFF, "0", 公开
.常量 SQL_AUTOCOMMIT_ON, "1", 公开
.常量 SQL_COMMIT, "0", 公开
.常量 SQL_ROLLBACK, "1", 公开
.常量 SQL_ATTR_CURSOR_TYPE, "6", 公开
.常量 SQL_ATTR_ROW_NUMBER, "14", 公开
.常量 SQL_ATTR_MAX_ROWS, "1", 公开
.常量 光标类型_向前, "0", 公开, SQL_CURSOR_FORWARD_ONLY
.常量 光标类型_键集, "1", 公开, SQL_CURSOR_KEYSET_DRIVEN
.常量 光标类型_动态, "2", 公开, SQL_CURSOR_DYNAMIC
.常量 光标类型_静态, "3", 公开, SQL_CURSOR_STATIC
.常量 SQL_FETCH_NEXT, "1", 公开, 移动_下一行
.常量 SQL_FETCH_FIRST, "2", 公开, 移动_首行
.常量 SQL_FETCH_LAST, "3", 公开, 移动_尾行
.常量 SQL_FETCH_PRIOR, "4", 公开, 移动_上一行
.常量 SQL_FETCH_ABSOLUTE, "5", 公开, 移动_绝对移动
.常量 SQL_FETCH_RELATIVE, "6", 公开, 移动_相对移动
.常量 INTERNET_OPTION_PROXY, "38", 公开, Internet常量代理服务器
.常量 INTERNET_OPTION_SETTINGS_CHANGED, "39", 公开, Internet常量IE设置改变
.常量 INTERNET_OPTION_CONNECT_TIMEOUT, "2", 公开, 连接超时
.常量 INTERNET_OPTION_SEND_TIMEOUT, "5", 公开, 发送超时
.常量 INTERNET_OPTION_RECEIVE_TIMEOUT, "6", 公开, 回复超时
.常量 SQLITE_成功, "0", 公开, SQLITE_OK
.常量 SQLITE_错误, "1", 公开, SQLITE_ERROR SQL 错误或没有数据库
.常量 SQLITE_内部, "2", 公开, SQLITE_INTERNAL 一个SQLite内部的逻辑错误
.常量 SQLITE_权限, "3", 公开, SQLITE_PERM 访问权限被拒绝
.常量 SQLITE_终止, "4", 公开, SQLITE_ABORT 需要一个中断的Callback指令
.常量 SQLITE_繁忙, "5", 公开, SQLITE_BUSY 数据据库文件被锁定
.常量 SQLITE_锁定, "6", 公开, SQLITE_LOCKED 表被锁定
.常量 SQLITE_申请内存失败, "7", 公开, SQLITE_NOMEM
.常量 SQLITE_只读, "8", 公开, SQLITE_READONLY 试图写一个只读的数据库
.常量 SQLITE_中断, "9", 公开, SQLITE_INTERRUPT 操作被中断结束
.常量 SQLITE_IO错误, "10", 公开, SQLITE_IOERR 某种磁盘I/O错误发生
.常量 SQLITE_损坏, "11", 公开, SQLITE_CORRUPT 数据库磁盘镜像异常
.常量 SQLITE_为找到, "12", 公开, SQLITE_NOTFOUND 未使用。表或记录不存在
.常量 SQLITE_数据库满, "13", 公开, SQLITE_FULL 数据库满，插入失败
.常量 SQLITE_不能打开, "14", 公开, SQLITE_CANTOPEN 不能打开数据库文件
.常量 SQLITE_协议, "15", 公开, SQLITE_PROTOCOL 数据库错定协议错
.常量 SQLITE_无表, "16", 公开, SQLITE_EMPTY 数据库表为空
.常量 SQLITE_结构, "17", 公开, SQLITE_SCHEMA 数据库结构被改变
.常量 SQLITE_表太大, "18", 公开, SQLITE_TOOBIG 一个表的行数据过多
.常量 SQLITE_约束, "19", 公开, SQLITE_CONSTRAINT 由于约束冲突而中止
.常量 SQLITE_不匹配, "20", 公开, SQLITE_MISMATCH 数据类型不匹配
.常量 SQLITE_误用, "21", 公开, SQLITE_MISUSE 库被不正确使用
.常量 SQLITE_不支持OS, "22", 公开, SQLITE_NOLFS 主机不支持的OS特性
.常量 SQLITE_认证, "23", 公开, SQLITE_AUTH 授权被否定
.常量 SQLITE_格式, "24", 公开, SQLITE_FORMAT 辅助数据库格式错误
.常量 SQLITE_范围, "25", 公开, SQLITE_RANGE 绑定参数时索引超出范围
.常量 SQLITE_无数据库, "26", 公开, SQLITE_NOTADB 文件已打开但没有数据库
.常量 SQLITE_行, "100", 公开, SQLITE_ROW 有另一行就绪
.常量 SQLITE_完成, "101", 公开, SQLITE_DONE 已经完成执行
.常量 SQLITE_UTF8, "1", 公开
.常量 SQLITE_UTF16, "2", 公开
.常量 SQLITE_UTF16BE, "3", 公开
.常量 SQLITE_UTF16LE, "4", 公开
.常量 SQLITE_ANY, "5", 公开
.常量 SQLITE_OPEN_READONLY, "1", 公开
.常量 SQLITE_OPEN_READWRITE, "2", 公开
.常量 SQLITE_OPEN_CREATE, "4", 公开
.常量 S3字段类型_整型, "1", 公开, SQLITE_INTEGER
.常量 S3字段类型_浮点型, "2", 公开, SQLITE_FLOAT
.常量 S3字段类型_文本型, "3", 公开, SQLITE_TEXT
.常量 S3字段类型_字节集型, "4", 公开, SQLITE_BLOB
.常量 S3字段类型_空, "5", 公开, SQLITE_NULL
.常量 S3析构_静态, "0", 公开, SQLITE_STATIC
.常量 S3析构_临时, "-1", 公开, SQLITE_TRANSIENT
.常量 S3触发条件_插入, "0", 公开
.常量 S3触发条件_删除, "1", 公开
.常量 S3触发条件_更新, "2", 公开
.常量 S3触发条件_字段更新, "3", 公开
.常量 S3触发时间_普通模式, "0", 公开
.常量 S3触发时间_之前, "1", 公开
.常量 S3触发时间_之后, "2", 公开
.常量 JS格式化, "<文本长度: 24146>", , ysjs(code)、js_beautify(code)
.常量 eval加密, "<文本长度: 1051>"
.常量 JS格式化EX, "<文本长度: 35222>", , FJsDecoder(code)
.常量 时间取周数, "<文本长度: 1267>"
.常量 SW_SHOW, "5", , 激活窗口并将其显示为当前的大小和位置
.常量 SW_SHOWMINNOACTIVE, "7", 公开, 最小化一个窗口，同时不改变活动窗口
.常量 SW_MINIMIZE, "6", , 最小化指定的窗口并以Z顺序激活下一个顶级窗口。
.常量 SW_SHOWNOACTIVATE, "4", 公开, 用最近的大小和位置显示一个窗口，同时不改变活动窗口
.常量 SW_SHOWMAXIMIZED, "3", 公开, 激活窗口并将其显示为最大化窗口。
.常量 SW_SHOWMINIMIZED, "2", 公开, 以最小化状态显示窗口，使当前活动窗口保持活动状态。
.常量 SW_SHOWNORMAL, "1", 公开, 激活并显示一个窗口。如果窗口被最小化或最大化，系统会将其恢复到其原始大小和位置。应用程序应在第一次显示窗口时指定此标志。
.常量 SW_SHOWDEFAULT, "10", 公开, 按默认状态显示
.常量 SEE_MASK_NOCLOSEPROCESS, "64", , 用于指示hProcess成员接收进程句柄。此句柄通常用于允许应用程序查明使用ShellExecuteEx创建的进程何时终止。在某些情况下，例如当通过 DDE 对话满足执行时，将不返回句柄。调用应用程序负责在不再需要时关闭句柄。
.常量 SEE_MASK_IDLIST, "4", , 使用lpIDList成员给出的项目标识符列表。所述lpIDList构件必须指向一个ITEMIDLIST结构。
.常量 SEE_MASK_INVOKEIDLIST, "12", , 使用所选项的快捷菜单处理程序的 IContextMenu 界面。使用 lpFile 通过文件系统路径标识项目，或使用 lpIDList 通过其 PIDL 标识项目。
.常量 SEE_MASK_NOASYNC, "256", , 等待执行操作完成后再返回。此标志应该由使用 ShellExecute 表单的调用者使用，这些表单可能会导致异步激活，例如 DDE，并创建一个可能在后台线程上运行的进程。（注：的ShellExecuteEx在默认情况下在后台线程运行，如果来电者的线程模型是不是公寓。）调用的ShellExecuteEx从后台线程已经运行的进程应该总是通过此标志。此外，在调用ShellExecuteEx后立即退出的应用程序应指定此标志。
.常量 SEE_MASK_FLAG_NO_UI, "1024", , 如果发生错误，则不显示错误消息框。
.常量 SEE_MASK_UNICODE, "16384", , 使用此标志来指示 Unicode 应用程序。
.常量 WAIT_TIMEOUT, "258", , 超时时间间隔已过，对象的状态为非信号状态。
.常量 js2, "<文本长度: 4731>"
.常量 json2, "<文本长度: 7521>", , JSON官方JavaScript脚本
.常量 U码, "<文本长度: 582>", , U码转换，分别包含to16和to10
.常量 MACSet, "<文本长度: 275>"
.常量 ABE_LEFT, "0", , 左边缘。
.常量 ABE_TOP, "1", , 顶边。
.常量 ABE_RIGHT, "2", , 右边缘。
.常量 ABE_BOTTOM, "3", 公开, 底边。
.常量 SW_HIDE, "0", 公开, 隐藏窗口，活动状态给另一个窗口
.常量 SW_FORCEMINIMIZE, "11", 公开, 即使拥有窗口的线程未响应，也会最小化窗口。 仅当将窗口从不同的线程最小化时，才应使用此标志。
.常量 STARTF_USESHOWWINDOW, "1", 公开, 该wShowWindow成员包含更多的信息。
.常量 STARTF_USESTDHANDLES, "256", 公开
.常量 STILL_ACTIVE, "259", 公开
.常量 URLMON_OPTION_USERAGENT, "268435457", 公开
.常量 HKEY_DYN_DATA, "-2147483642", , 仅限Windows 95
.常量 HKEY_CURRENT_CONFIG, "-2147483643", 公开, 包含了当前系统配置的信息。 　
.常量 HKEY_PERFORMANCE_DATA, "-2147483644", 公开, 仅XP/winNT/win2000可用
.常量 HKEY_USERS, "-2147483645", 公开, 用作默认用户首选设置，也作为单个用户的首选设置。
.常量 HKEY_LOCAL_MACHINE, "-2147483646", 公开, 包含描述计算机及其配置的条目。其中包括关于处理器、系统主板、内存和已安装的软件和硬件的信息。 　
.常量 HKEY_CURRENT_USER, "-2147483647", 公开, 是用于当前（登录）用户的相关信息。 
.常量 HKEY_CLASSES_ROOT, "-2147483648", 公开, 是与文档类型和 OLE\COM 相关的信息的支持键。这个键是 HKEY_LOCAL_MACHINE的从属键。 
.常量 REG_OPTION_VOLATILE, "1"
.常量 KEY_ALL_ACCESS, "983103", 公开, 结合了 STANDARD_RIGHTS_REQUIRED、KEY_QUERY_VALUE、KEY_SET_VALUE、KEY_CREATE_SUB_KEY、KEY_ENUMERATE_SUB_KEYS、KEY_NOTIFY 和 KEY_CREATE_LINK 访问权限。
.常量 KEY_QUERY_VALUE, "1", , 需要查询注册表项的值。
.常量 KEY_CREATE_SUB_KEY, "4", , 创建注册表项的子项时需要。
.常量 KEY_WOW64_64KEY, "256", 公开, 使用32位或64位应用程序中的64位注册表项。
.常量 KEY_WOW64_32KEY, "512", 公开, 使用32位或64位应用程序中的32位注册表项。
.常量 KEY_READ, "131097", 公开, 组合 STANDARD_RIGHTS_READ、KEY_QUERY_VALUE、KEY_ENUMERATE_SUB_KEYS 和 KEY_NOTIFY 值。
.常量 KEY_WRITE, "131078", 公开, 结合 STANDARD_RIGHTS_WRITE、KEY_SET_VALUE 和 KEY_CREATE_SUB_KEY 访问权限。
.常量 REG_NONE, "0", 公开, 没有定义的值类型。
.常量 REG_BINARY, "3", 公开, 任何形式的二进制数据。
.常量 REG_DWORD, "4", 公开, 一个32位数字。
.常量 REG_SZ, "1", 公开, 空终止的字符串。根据您使用的是Unicode还是ANSI函数，它可以是Unicode或ANSI字符串。
.常量 REG_DWORD_LITTLE_ENDIAN, "4", 公开, 大计数法格式32位数字，一个字的有效字节是高端字
.常量 REG_DWORD_BIG_ENDIAN, "5", 公开, 大计数法格式32位数字，一个字的有效字节是低端字
.常量 REG_LINK, "6", 公开, 单一代码符号链
.常量 REG_EXPAND_SZ, "2", 公开, 空终止字符串，包括对"&TEMP&"之类环境变量的引用
.常量 REG_MULTI_SZ, "7", 公开, 定义包括空终止字符串的数组，数组被两个实际的空字符串结束
.常量 ERROR_MORE_DATA, "234", 公开, 并非所有数据都随此调用一起返回。要获取其他数据，请使用resume句柄再次调用该函数。
.常量 ERROR_NO_MORE_ITEMS, "259", 公开, 没有更多要枚举的条目。
.常量 WS_EX_TOPMOST, "8", 公开, 窗口置顶(停留在所有非最高层窗口的上面)
.常量 WS_DISABLED, "134217728", 公开, 不可用状态
.常量 CDS_FULLSCREEN, "4", 公开, 0x00000004
.常量 CDS_GLOBAL, "8", 公开, 0x00000008
.常量 CDS_UPDATEREGISTRY, "1", 公开, 0x00000001
.常量 WS_EX_ACCEPTFILES, "16", 公开, 窗口接受拖放文件
.常量 HEAP_NO_SERIALIZE, "1", , 指定在RtlAllocateHeap访问堆时不使用互斥。
.常量 HEAP_GENERATE_EXCEPTIONS, "4", , 指定系统将引发异常以指示函数失败（例如内存不足），而不是返回NULL。
.常量 HEAP_ZERO_MEMORY, "8", 公开, 指定分配的内存将初始化为零。否则，内存不会初始化为零。
.常量 REG_OPTION_NON_VOLATILE, "0", 公开, 打开或创建的密钥不是易失性的；系统重新启动时，信息将被保留。
.常量 REG_QWORD, "11", 公开, 一个64位数字。
.常量 托盘事件_移动鼠标, "512", 公开, 移动鼠标
.常量 托盘事件_按下鼠标左键, "513", 公开, 按下鼠标左键
.常量 托盘事件_释放鼠标左键, "514", 公开, 释放鼠标左键
.常量 托盘事件_双击鼠标左键, "515", 公开, 双击鼠标左键
.常量 托盘事件_按下鼠标右键, "516", 公开, 按下鼠标右键
.常量 托盘事件_释放鼠标右键, "517", 公开, 释放鼠标右键
.常量 托盘事件_双击鼠标右键, "518", 公开, 双击鼠标右键
.常量 托盘事件_按下鼠标中键, "519", 公开, 按下鼠标中键
.常量 托盘事件_释放鼠标中键, "520", 公开, 释放鼠标中键
.常量 托盘事件_双击鼠标中键, "521", 公开, 双击鼠标中键
.常量 托盘事件_任务重建, "1120", 公开
.常量 托盘事件_托盘退出, "1130", 公开
.常量 托盘图标_无图标, "0", 公开
.常量 托盘图标_信息图标, "1", 公开
.常量 托盘图标_警告图标, "2", 公开
.常量 托盘图标_错误图标, "3", 公开
.常量 WS_CHILD, "1073741824", 公开
.常量 GW_HWNDLAST, "1", 公开, 检索到的句柄标识Z顺序中最低的同一类型的窗口。如果指定的窗口是最顶部的窗口，则句柄标识Z顺序中最低的最顶部窗口。如果指定的窗口是顶级窗口，则句柄标识Z顺序中最低的顶级窗口。如果指定的窗口是子窗口，则句柄标识Z顺序中最低的同级窗口。
.常量 GW_HWNDNEXT, "2", 公开, 检索到的句柄以Z顺序标识指定窗口下面的窗口。如果指定的窗口是最上面的窗口，则句柄将标识指定窗口下面的最上面的窗口。如果指定的窗口是顶级窗口，则句柄将标识指定窗口下面的顶级窗口。如果指定的窗口是子窗口，则句柄标识指定窗口下面的同级窗口。
.常量 GW_HWNDPREV, "3", 公开, 检索到的句柄以Z顺序标识指定窗口上方的窗口。如果指定的窗口是最顶部的窗口，则句柄标识指定窗口上方的最顶部窗口。如果指定的窗口是顶级窗口，则句柄标识指定窗口上方的顶级窗口。如果指定的窗口是子窗口，则句柄标识指定窗口上方的同级窗口。
.常量 GW_CHILD, "5", 公开, 如果指定的窗口是父窗口，则检索到的句柄标识Z顺序顶部的子窗口；否则，检索到的句柄为空。函数只检查指定窗口的子窗口。它不检查子代窗口。
.常量 GW_ENABLEDPOPUP, "6", 公开, 属于指定窗口的处于状态为弹出式窗口
.常量 BM_CLICK, "245", 公开, 模拟用户点击按钮
.常量 WINHTTP_ACCESS_TYPE_NO_PROXY, "1", 公开, 直接访问，不使用代理。
.常量 WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, "2", 公开, 通过静态代理或注册表配置的代理访问。不继承和不共享IE的代理设置，调用WinHttpSetDefaultProxyConfiguration进行设置。
.常量 WINHTTP_ACCESS_TYPE_NAMED_PROXY, "3", 公开, 通过指定名称的代理访问。
.常量 INTERNET_SCHEME_HTTPS, "2", 公开
.常量 INTERNET_SCHEME_HTTP, "1", 公开
.常量 WINHTTP_NO_REFERER, "0", 公开, 没有来源页面
.常量 WINHTTP_DEFAULT_ACCEPT_TYPES, "0", 公开, 默认文件类型
.常量 WINHTTP_FLAG_SECURE, "8388608", 公开, SSL/TLS安全超文本协议。
.常量 WINHTTP_AUTH_TARGET_SERVER, "0", 公开, 验证目标：网站服务器。
.常量 WINHTTP_AUTH_TARGET_PROXY, "1", 公开, 验证目标：代理服务器。
.常量 WINHTTP_AUTH_SCHEME_BASIC, "1", 公开, 基本认证方式(BASE64加密)。
.常量 WINHTTP_OPTION_DISABLE_FEATURE, "63", 公开, 禁用功能
.常量 WINHTTP_OPTION_ENABLE_FEATURE, "79", 公开
.常量 WINHTTP_DISABLE_COOKIES, "1", 公开, 禁用自动设置COOKIES
.常量 WINHTTP_DISABLE_REDIRECTS, "2", 公开, 禁用重定向
.常量 WINHTTP_OPTION_SECURITY_FLAGS, "31", 公开, 忽略证书错误 #define WINHTTP_OPTION_SECURITY_FLAGS                31
.常量 WINHTTP_ADDREQ_FLAG_ADD, "536870912", 公开, 添加一个协议头，如果协议头已存在则被新值替换，与WINHTTP_ADDREQ_FLAG_REPLACE标志一起使用。
.常量 WINHTTP_ADDREQ_FLAG_REPLACE, "-2147483648", 公开, 替换或者删除一个协议头，如果值为空则删除，否则被替换。
.常量 WINHTTP_QUERY_RAW_HEADERS_CRLF, "22", 公开, 协议头以换行符分割
.常量 WINHTTP_NO_HEADER_INDEX, "0", 公开, 没有协议索引
.常量 WINHTTP_ADDREQ_FLAG_ADD_IF_NEW, "268435456", 公开, 只有不存在的时候才添加
.常量 WINHTTP_ADDREQ_FLAG_COALESCE, "1073741824", 公开, 合并相同的名称
.常量 WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA, "1073741824", 公开, 合并相同的名称使用逗号
.常量 WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON, "16777216", 公开, 合并相投的名称使用分号
.常量 VER_NT_WORKSTATION, "1", 公开, 操作系统为 Windows 8、Windows 7、Windows Vista、Windows XP Professional、Windows XP Home Edition 或 Windows 2000 Professional。
.常量 VER_NT_DOMAIN_CONTROLLER, "2", , 系统为域控制器，操作系统为Windows Server 2012、Windows Server 2008 R2、Windows Server 2008、Windows Server 2003或Windows 2000 Server。
.常量 VER_NT_SERVER, "3", , 操作系统为 Windows Server 2012、Windows Server 2008 R2、Windows Server 2008、Windows Server 2003 或 Windows 2000 Server。
.常量 SystemTimeOfDayInformation, "3", , 系统时间信息
.常量 SystemProcessInformation, "5", 公开, 进程_取父ID
.常量 WH_KEYBOARD, "2", 公开, 安装监视击键消息的钩子过程。有关更多信息，请参阅KeyboardProc hook过程。
.常量 WH_KEYBOARD_LL, "13", 公开, 安装一个钩子过程来监视低级键盘输入事件。有关更多信息，请参阅LowLevelKeyboardProc挂钩过程。
.常量 WH_MOUSE_LL, "14", 公开, 安装监视低级鼠标输入事件的钩子过程。有关更多信息，请参阅LowLevelMouseProc hook过程。
.常量 WH_MOUSE, "7", 公开, 安装监视鼠标消息的钩子过程。有关更多信息，请参阅MouseProc hook过程。
.常量 WH_CBT, "5", , 安装一个钩子程序来接收对 CBT 应用程序有用的通知。有关详细信息，请参阅CBTProc挂钩过程。
.常量 HC_ACTION, "0", 公开
.常量 INVALID_HANDLE_VALUE, "-1", 公开
.常量 SERVICE_INTERACTIVE_PROCESS, "256", 公开
.常量 SERVICE_ALL_ACCESS, "983551", 公开
.常量 SERVICE_ERROR_NORMAL, "1", 公开
.常量 SC_MANAGER_CONNECT, "1", 公开
.常量 SERVICE_ENUMERATE_DEPENDENTS, "8", 公开
.常量 SC_MANAGER_ENUMERATE_SERVICE, "4", 公开
.常量 NIF_INFO, "16", 公开
.常量 NIF_ICON, "2", 公开
.常量 NIF_TIP, "4", 公开
.常量 NIF_MESSAGE, "1", 公开
.常量 STD_OUTPUT_HANDLE, "-11", 公开
.常量 STD_INPUT_HANDLE, "-10", 公开
.常量 EM_REPLACESEL, "194", 公开
.常量 FOREGROUND_RED, "4", 公开
.常量 FOREGROUND_INTENSITY, "8", 公开
.常量 FOREGROUND_GREEN, "2", 公开
.常量 FOREGROUND_BLUE, "1", 公开
.常量 GMEM_MOVEABLE, "2", 公开
.常量 sizeof_SECURITY_ATTRIBUTES, "12", 公开
.常量 HSR_INITIATE, "8", , 迭代操作（由 HttpEndRequest 完成）。
.常量 LIST_MODULES_32BIT, "1", , 列出 32 位模块。
.常量 LIST_MODULES_64BIT, "2", , 列出 64 位模块。
.常量 LIST_MODULES_ALL, "3", , 列出所有模块。
.常量 LIST_MODULES_DEFAULT, "0", , 使用默认行为。
.常量 AuAppBat, "<文本长度: 691>", 公开
.常量 AuAppVBs, "<文本长度: 609>", 公开
.常量 IP_SUCCESS, "0", 公开
.常量 TIME_FORCE24HOURFORMAT, "8", 公开, 0x00000008 ----强制使用24小时制。
.常量 GWL_EXSTYLE, "-20", 公开, 设置/获取一个新的扩展风格。
.常量 GWL_HINSTANCE, "-6", 公开, 设置/获取一个新的应用程序实例句柄。
.常量 GWL_ID, "-12", 公开, 设置/获取一个新的窗口标识符。
.常量 GWL_STYLE, "-16", 公开, 设置/获取一个新的窗口风格。
.常量 GWL_USERDATA, "-21", 公开, 设置/获取与窗口有关的32位值。每个窗口均有一个由创建该窗口的应用程序使用的32位值。
.常量 GWL_WNDPROC, "-4", 公开, 设置一个新的处理函数。/获得窗口过程的地址，或代表窗口过程的地址的句柄。必须使用CallWindowProc函数调用窗口过程。
.常量 GWL_HWNDPARENT, "-8", 公开, 设置/获取子窗口的父窗口,应使用SetParent函数。
.常量 显示rar窗口, "2", 公开, 普通激活
.常量 隐藏rar窗口, "1", 公开, 隐藏窗口
.常量 系统_ALLUSERSPROFILE, "“ALLUSERSPROFILE”", 公开, 局部 返回所有“用户配置文件”的位置。
.常量 系统_APPDATA, "“APPDATA”", 公开, 局部 返回默认情况下应用程序存储数据的位置。
.常量 系统_CD, "“CD”", 公开, 局部 返回当前目录字符串。
.常量 系统_CMDCMDLINE, "“CMDCMDLINE”", 公开, 局部 返回用来启动当前的 Cmd.exe 的准确命令行。
.常量 系统_CMDEXTVERSION, "“CMDEXTVERSION”", 公开, 系统 返回当前的“命令处理程序扩展”的版本号。
.常量 系统_COMPUTERNAME, "“COMPUTERNAME”", 公开, 系统 返回计算机的名称。
.常量 系统_COMSPEC, "“COMSPEC”", 公开, 系统 返回命令行解释器可执行程序的准确路径。
.常量 系统_DATE, "“DATE”", 公开, 系统 返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关 date 命令的详细信息，请参阅 Date。
.常量 系统_ERRORLEVEL, "“ERRORLEVEL”", 公开, 系统 返回使用过的命令的错误代码。通常用非零值表示错误。
.常量 系统_HOMEDRIVE, "“HOMEDRIVE”", 公开, 系统 返回连接到用户主目录的本地工作站驱动器号。基于主目录值的设置。用户主目录是在“本地用户和组”中指定的。
.常量 系统_HOMEPATH, "“HOMEPATH”", 公开, 系统 返回用户主目录的完整路径。基于主目录值的设置。用户主目录是在“本地用户和组”中指定的。
.常量 系统_HOMESHARE, "“HOMESHARE”", 公开, 系统 返回用户的共享主目录的网络路径。基于主目录值的设置。用户主目录是在“本地用户和组”中指定的。
.常量 系统_LOGONSEVER, "“LOGONSEVER”", 公开, 局部 返回验证当前登录会话的域控制器的名称。
.常量 系统_NUMBER_OF_PROCESSORS, "“NUMBER_OF_PROCESSORS”", 公开, 系统 指定安装在计算机上的处理器的数目。
.常量 系统_OS, "“OS”", 公开, 系统 返回操作系统的名称。Windows 2000 将操作系统显示为 Windows_NT。
.常量 系统_PATH, "“PATH”", 公开, 系统 指定可执行文件的搜索路径。
.常量 系统_PATHEXT, "“PATHEXT”", 公开, 系统 返回操作系统认为可执行的文件扩展名的列表。
.常量 系统_PROCESSOR_ARCHITECTURE, "“PROCESSOR_ARCHITECTURE”", 公开, 系统 返回处理器的芯片体系结构。值: x86，IA64。
.常量 系统_PROCESSOR_IDENTIFIER, "“PROCESSOR_IDENTIFIER”", 公开, 系统 返回处理器说明。
.常量 系统_PROCESSOR_LEVEL, "“PROCESSOR_LEVEL”", 公开, 系统 返回计算机上安装的处理器的型号。
.常量 系统_PROCESSOR_REVISION, "“PROCESSOR_REVISION”", 公开, 系统 返回处理器修订号的系统变量。
.常量 系统_PROMPT, "“PROMPT”", 公开, 局部 返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。
.常量 系统_RANDOM, "“RANDOM”", 公开, 系统 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。
.常量 系统_SYSTEMDRIVE, "“SYSTEMDRIVE”", 公开, 系统 返回包含 Windows XP 根目录（即系统根目录）的驱动器。
.常量 系统_SYSTEMROOT, "“SYSTEMROOT”", 公开, 系统 返回 Windows XP 根目录的位置。
.常量 系统_TEMP, "“TEMP”", 公开, and %TMP% 系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。有些应用程序需要 TEMP，而其它应用程序则需要 TMP。
.常量 系统_TIME, "“TIME”", 公开, 系统 返回当前时间。使用与 time /t 命令相同的格式。由 Cmd.exe 生成。有关 time 命令的详细信息，请参阅 Time。
.常量 系统_USERDOMAIN, "“USERDOMAIN”", 公开, 局部 返回包含用户帐户的域的名称。
.常量 系统_USERNAME, "“USERNAME”", 公开, 局部 返回当前登录的用户的名称。
.常量 系统_UserProfile, "“UserProfile”", 公开, 局部 返回当前用户的配置文件的位置。
.常量 系统_WINDIR, "“WINDIR”", 公开, 系统 返回操作系统目录的位置。
.常量 PKCS5_PADDING, "1", 公开
.常量 RANDOM_PADDING, "2", 公开
.常量 ZERO_PADDING, "3", 公开
.常量 KP_IV, "1", 公开
.常量 KP_SALT, "2", 公开
.常量 KP_PADDING, "3", 公开
.常量 KP_MODE, "4", 公开
.常量 KP_MODE_BITS, "5", 公开
.常量 KP_PERMISSIONS, "6", 公开
.常量 KP_ALGID, "7", 公开
.常量 KP_BLOCKLEN, "8", 公开
.常量 KP_KEYLEN, "9", 公开
.常量 KP_SALT_EX, "10", 公开
.常量 KP_P, "11", 公开
.常量 KP_G, "12", 公开
.常量 KP_Q, "13", 公开
.常量 KP_X, "14", 公开
.常量 KP_Y, "15", 公开
.常量 KP_RA, "16", 公开
.常量 KP_RB, "17", 公开
.常量 KP_INFO, "18", 公开
.常量 KP_EFFECTIVE_KEYLEN, "19", 公开
.常量 KP_SCHANNEL_ALG, "20", 公开
.常量 KP_CLIENT_RANDOM, "21", 公开
.常量 KP_SERVER_RANDOM, "22", 公开
.常量 KP_RP, "23", 公开
.常量 KP_PRECOMP_MD5, "24", 公开
.常量 KP_PRECOMP_SHA, "25", 公开
.常量 KP_CERTIFICATE, "26", 公开
.常量 KP_CLEAR_KEY, "27", 公开
.常量 KP_PUB_EX_LEN, "28", 公开
.常量 KP_PUB_EX_VAL, "29", 公开
.常量 KP_KEYVAL, "30", 公开
.常量 KP_ADMIN_PIN, "31", 公开
.常量 KP_KEYEXCHANGE_PIN, "32", 公开
.常量 KP_SIGNATURE_PIN, "33", 公开
.常量 KP_PREHASH, "34"
.常量 KP_ROUNDS, "35", 公开
.常量 KP_OAEP_PARAMS, "36", 公开
.常量 KP_CMS_KEY_INFO, "37", 公开
.常量 KP_CMS_DH_KEY_INFO, "38", 公开
.常量 KP_PUB_PARAMS, "39", 公开
.常量 KP_VERIFY_PARAMS, "40", 公开
.常量 KP_HIGHEST_VERSION, "41", 公开
.常量 KP_GET_USE_COUNT, "42", 公开
.常量 SIMPLEBLOB, "1", 公开
.常量 PUBLICKEYBLOB, "6", 公开
.常量 PRIVATEKEYBLOB, "7", 公开
.常量 PLAINTEXTKEYBLOB, "8", 公开
.常量 OPAQUEKEYBLOB, "9", 公开
.常量 PUBLICKEYBLOBEX, "10", 公开
.常量 SYMMETRICWRAPKEYBLOB, "11", 公开
.常量 CUR_BLOB_VERSION, "2", 公开
.常量 HP_HASHVAL, "2", 公开
.常量 CRYPT_MODE_CBC, "1", 公开
.常量 CRYPT_MODE_ECB, "2", 公开
.常量 CRYPT_MODE_OFB, "3", 公开
.常量 CRYPT_MODE_CFB, "4", 公开
.常量 CRYPT_MODE_CTS, "5", 公开
.常量 数据填充_NO_PADDING, "1", 公开
.常量 数据填充_ZERO_PADDING, "2", 公开
.常量 数据填充_ANSIX923_PADDING, "3", 公开
.常量 数据填充_ISO10126_PADDING, "4", 公开
.常量 数据填充_PKCS5_PADDING, "5", 公开
.常量 数据填充_PKCS7_PADDING, "7", 公开
.常量 对称算法_AES_CBC, "“AES-CBC”", 公开
.常量 对称算法_AES_ECB, "“AES-ECB”", 公开
.常量 对称算法_AES_OFB, "“AES-OFB”", 公开, win7 不支持
.常量 对称算法_AES_CFB, "“AES-CFB”", 公开
.常量 对称算法_AES_CTS, "“AES-CTS”", 公开, win7 不支持
.常量 对称算法_AES_192_CBC, "“AES192-CBC”", 公开
.常量 对称算法_AES_192_ECB, "“AES192-ECB”", 公开
.常量 对称算法_AES_192_OFB, "“AES192-OFB”", 公开, win7 不支持
.常量 对称算法_AES_192_CFB, "“AES192-CFB”", 公开
.常量 对称算法_AES_192_CTS, "“AES192-CTS”", 公开, win7 不支持
.常量 对称算法_AES_256_CBC, "“AES256-CBC”", 公开
.常量 对称算法_AES_256_ECB, "“AES256-ECB”", 公开
.常量 对称算法_AES_256_OFB, "“AES256-OFB”", 公开, win7 不支持
.常量 对称算法_AES_256_CFB, "“AES256-CFB”", 公开
.常量 对称算法_AES_256_CTS, "“AES256-CTS”", 公开, win7 不支持
.常量 对称算法_DES_CBC, "“DES-CBC”", 公开
.常量 对称算法_DES_ECB, "“DES-ECB”", 公开
.常量 对称算法_DES_OFB, "“DES-OFB”", 公开, win7 不支持
.常量 对称算法_DES_CFB, "“DES-CFB”", 公开
.常量 对称算法_DES_CTS, "“DES-CTS”", 公开, win7 不支持
.常量 对称算法_3DES_CBC, "“3DES-CBC”", 公开
.常量 对称算法_3DES_ECB, "“3DES-ECB”", 公开
.常量 对称算法_3DES_OFB, "“3DES-OFB”", 公开, win7 不支持
.常量 对称算法_3DES_CFB, "“3DES-CFB”", 公开
.常量 对称算法_3DES_CTS, "“3DES-CTS”", 公开, win7 不支持
.常量 对称算法_RC2, "“RC2”", 公开
.常量 对称算法_RC4, "“RC4”", 公开
.常量 NULL, "0", 公开
.常量 CALG_MD2, "32769", 公开
.常量 CALG_MD4, "32770", 公开
.常量 CALG_MD5, "32771", 公开
.常量 CALG_SHA, "32772", 公开
.常量 CALG_SHA1, "32772", 公开
.常量 CALG_MAC, "32773", 公开
.常量 CALG_RSA_SIGN, "9216", 公开
.常量 CALG_DSS_SIGN, "8704", 公开
.常量 CALG_NO_SIGN, "8192", 公开
.常量 CALG_RSA_KEYX, "41984", 公开
.常量 CALG_DES, "26113", 公开
.常量 CALG_3DES_112, "26121", 公开
.常量 CALG_3DES, "26115", 公开
.常量 CALG_DESX, "26116", 公开
.常量 CALG_RC2, "26114", 公开
.常量 CALG_RC4, "26625", 公开
.常量 CALG_SEAL, "26626", 公开
.常量 CALG_DH_SF, "43521", 公开
.常量 CALG_DH_EPHEM, "43522", 公开
.常量 CALG_AGREEDKEY_ANY, "43523", 公开
.常量 CALG_KEA_KEYX, "43524", 公开
.常量 CALG_HUGHES_MD5, "40963", 公开
.常量 CALG_SKIPJACK, "26122", 公开
.常量 CALG_TEK, "26123", 公开
.常量 CALG_CYLINK_MEK, "26124", 公开
.常量 CALG_SSL3_SHAMD5, "32776", 公开
.常量 CALG_SSL3_MASTER, "19457", 公开
.常量 CALG_SCHANNEL_MASTER_HASH, "19458", 公开
.常量 CALG_SCHANNEL_MAC_KEY, "19459", 公开
.常量 CALG_SCHANNEL_ENC_KEY, "19463", 公开
.常量 CALG_PCT1_MASTER, "19460", 公开
.常量 CALG_SSL2_MASTER, "19461", 公开
.常量 CALG_TLS1_MASTER, "19462", 公开
.常量 CALG_RC5, "26125", 公开
.常量 CALG_HMAC, "32777", 公开
.常量 CALG_TLS1PRF, "32778", 公开
.常量 CALG_HASH_REPLACE_OWF, "32779", 公开
.常量 CALG_AES_128, "26126", 公开
.常量 CALG_AES_192, "26127", 公开
.常量 CALG_AES_256, "26128", 公开
.常量 CALG_AES, "26129", 公开
.常量 CALG_SHA_256, "32780", 公开
.常量 CALG_SHA_384, "32781", 公开
.常量 CALG_SHA_512, "32782", 公开
.常量 CRYPT_VERIFYCONTEXT, "-268435456", 公开
.常量 CRYPT_NEWKEYSET, "8", 公开
.常量 CRYPT_DELETEKEYSET, "16", 公开
.常量 CRYPT_MACHINE_KEYSET, "32", 公开
.常量 CRYPT_SILENT, "64", 公开
.常量 CRYPT_EXPORTABLE, "1", 公开
.常量 CRYPT_USER_PROTECTED, "2", 公开
.常量 CRYPT_CREATE_SALT, "4", 公开
.常量 CRYPT_UPDATE_KEY, "8", 公开
.常量 CRYPT_NO_SALT, "16", 公开
.常量 CRYPT_PREGEN, "64", 公开
.常量 CRYPT_RECIPIENT, "16", 公开
.常量 CRYPT_INITIATOR, "64", 公开
.常量 CRYPT_ONLINE, "128", 公开
.常量 CRYPT_SF, "256", 公开
.常量 CRYPT_CREATE_IV, "512", 公开
.常量 CRYPT_KEK, "1024", 公开
.常量 CRYPT_DATA_KEY, "2048", 公开
.常量 CRYPT_VOLATILE, "4096", 公开
.常量 CRYPT_SGCKEY, "8192", 公开
.常量 CRYPT_ARCHIVABLE, "16384", 公开
.常量 RSA1024BIT_KEY, "67108864", 公开
.常量 CRYPT_SERVER, "1024", 公开
.常量 KEY_LENGTH_MASK, "-65536", 公开
.常量 CRYPT_Y_ONLY, "1", 公开
.常量 CRYPT_SSL2_FALLBACK, "2", 公开
.常量 CRYPT_DESTROYKEY, "4", 公开
.常量 CRYPT_OAEP, "64", 公开
.常量 CRYPT_BLOB_VER3, "128", 公开
.常量 CRYPT_IPSEC_HMAC_KEY, "256", 公开
.常量 CRYPT_DECRYPT_RSA_NO_PADDING_CHECK, "32", 公开
.常量 CRYPT_SECRETDIGEST, "1", 公开
.常量 CRYPT_OWF_REPL_LM_HASH, "1", 公开
.常量 CRYPT_LITTLE_ENDIAN, "1", 公开
.常量 CRYPT_NOHASHOID, "1", 公开
.常量 CRYPT_TYPE2_FORMAT, "2", 公开
.常量 CRYPT_X931_FORMAT, "4", 公开
.常量 CRYPT_MACHINE_DEFAULT, "1", 公开
.常量 CRYPT_USER_DEFAULT, "2", 公开
.常量 CRYPT_DELETE_DEFAULT, "4", 公开
.常量 PROV_RSA_FULL, "1", 公开
.常量 PROV_RSA_SIG, "2", 公开
.常量 PROV_DSS, "3", 公开
.常量 PROV_FORTEZZA, "4", 公开
.常量 PROV_MS_EXCHANGE, "5", 公开
.常量 PROV_SSL, "6", 公开
.常量 PROV_RSA_SCHANNEL, "12", 公开
.常量 PROV_DSS_DH, "13", 公开
.常量 PROV_EC_ECDSA_SIG, "14", 公开
.常量 PROV_EC_ECNRA_SIG, "15", 公开
.常量 PROV_EC_ECDSA_FULL, "16", 公开
.常量 PROV_EC_ECNRA_FULL, "17", 公开
.常量 PROV_DH_SCHANNEL, "18", 公开
.常量 PROV_SPYRUS_LYNKS, "20", 公开
.常量 PROV_RNG, "21", 公开
.常量 PROV_INTEL_SEC, "22", 公开
.常量 PROV_REPLACE_OWF, "23", 公开
.常量 PROV_RSA_AES, "24", 公开
.常量 OBJID_WINDOW, "0", 公开
.常量 ROLE_SYSTEM_TITLEBAR, "1", 公开
.常量 ROLE_SYSTEM_MENUBAR, "2", 公开
.常量 ROLE_SYSTEM_SCROLLBAR, "3", 公开
.常量 ROLE_SYSTEM_GRIP, "4", 公开
.常量 ROLE_SYSTEM_SOUND, "5", 公开
.常量 ROLE_SYSTEM_CURSOR, "6", 公开
.常量 ROLE_SYSTEM_CARET, "7", 公开
.常量 ROLE_SYSTEM_ALERT, "8", 公开
.常量 ROLE_SYSTEM_WINDOW, "9", 公开
.常量 ROLE_SYSTEM_CLIENT, "10", 公开
.常量 ROLE_SYSTEM_MENUPOPUP, "11", 公开
.常量 ROLE_SYSTEM_MENUITEM, "12", 公开
.常量 ROLE_SYSTEM_TOOLTIP, "13", 公开
.常量 ROLE_SYSTEM_APPLICATION, "14", 公开
.常量 ROLE_SYSTEM_DOCUMENT, "15", 公开
.常量 ROLE_SYSTEM_PANE, "16", 公开
.常量 ROLE_SYSTEM_CHART, "17", 公开
.常量 ROLE_SYSTEM_DIALOG, "18", 公开
.常量 ROLE_SYSTEM_BORDER, "19", 公开
.常量 ROLE_SYSTEM_GROUPING, "20", 公开
.常量 ROLE_SYSTEM_SEPARATOR, "21", 公开
.常量 ROLE_SYSTEM_TOOLBAR, "22", 公开
.常量 ROLE_SYSTEM_STATUSBAR, "23", 公开
.常量 ROLE_SYSTEM_TABLE, "24", 公开
.常量 ROLE_SYSTEM_COLUMNHEADER, "25", 公开
.常量 ROLE_SYSTEM_ROWHEADER, "26", 公开
.常量 ROLE_SYSTEM_COLUMN, "27", 公开
.常量 ROLE_SYSTEM_ROW, "28", 公开
.常量 ROLE_SYSTEM_CELL, "29", 公开
.常量 ROLE_SYSTEM_LINK, "30", 公开
.常量 ROLE_SYSTEM_HELPBALLOON, "31", 公开
.常量 ROLE_SYSTEM_CHARACTER, "32", 公开
.常量 ROLE_SYSTEM_LIST, "33", 公开
.常量 ROLE_SYSTEM_LISTITEM, "34", 公开
.常量 ROLE_SYSTEM_OUTLINE, "35", 公开
.常量 ROLE_SYSTEM_OUTLINEITEM, "36", 公开
.常量 ROLE_SYSTEM_PAGETAB, "37", 公开
.常量 ROLE_SYSTEM_PROPERTYPAGE, "38", 公开
.常量 ROLE_SYSTEM_INDICATOR, "39", 公开
.常量 ROLE_SYSTEM_GRAPHIC, "40", 公开
.常量 ROLE_SYSTEM_STATICTEXT, "41", 公开
.常量 ROLE_SYSTEM_TEXT, "42", 公开
.常量 ROLE_SYSTEM_PUSHBUTTON, "43", 公开
.常量 ROLE_SYSTEM_CHECKBUTTON, "44", 公开
.常量 ROLE_SYSTEM_RADIOBUTTON, "45", 公开
.常量 ROLE_SYSTEM_COMBOBOX, "46", 公开
.常量 ROLE_SYSTEM_DROPLIST, "47", 公开
.常量 ROLE_SYSTEM_PROGRESSBAR, "48", 公开
.常量 ROLE_SYSTEM_DIAL, "49", 公开
.常量 ROLE_SYSTEM_HOTKEYFIELD, "50", 公开
.常量 ROLE_SYSTEM_SLIDER, "51", 公开
.常量 ROLE_SYSTEM_SPINBUTTON, "52", 公开
.常量 ROLE_SYSTEM_DIAGRAM, "53", 公开
.常量 ROLE_SYSTEM_ANIMATION, "54", 公开
.常量 ROLE_SYSTEM_EQUATION, "55", 公开
.常量 ROLE_SYSTEM_BUTTONDROPDOWN, "56", 公开
.常量 ROLE_SYSTEM_BUTTONMENU, "57", 公开
.常量 ROLE_SYSTEM_BUTTONDROPDOWNGRID, "58", 公开
.常量 ROLE_SYSTEM_WHITESPACE, "59", 公开
.常量 ROLE_SYSTEM_PAGETABLIST, "60", 公开
.常量 ROLE_SYSTEM_CLOCK, "61", 公开
.常量 ROLE_SYSTEM_SPLITBUTTON, "62", 公开
.常量 ROLE_SYSTEM_IPADDRESS, "63", 公开
.常量 ROLE_SYSTEM_OUTLINEBUTTON, "64", 公开
.常量 STATE_SYSTEM_NORMAL, "0", 公开
.常量 STATE_SYSTEM_UNAVAILABLE, "1", 公开
.常量 STATE_SYSTEM_SELECTED, "2", 公开
.常量 STATE_SYSTEM_FOCUSED, "4", 公开
.常量 STATE_SYSTEM_PRESSED, "8", 公开
.常量 STATE_SYSTEM_CHECKED, "16", 公开
.常量 STATE_SYSTEM_MIXED, "32", 公开
.常量 STATE_SYSTEM_READONLY, "64", 公开
.常量 STATE_SYSTEM_HOTTRACKED, "128", 公开
.常量 STATE_SYSTEM_DEFAULT, "256", 公开
.常量 STATE_SYSTEM_EXPANDED, "512", 公开
.常量 STATE_SYSTEM_COLLAPSED, "1024", 公开
.常量 STATE_SYSTEM_BUSY, "2048", 公开
.常量 STATE_SYSTEM_FLOATING, "4096", 公开
.常量 STATE_SYSTEM_MARQUEED, "8192", 公开
.常量 STATE_SYSTEM_ANIMATED, "16384", 公开
.常量 STATE_SYSTEM_INVISIBLE, "32768", 公开
.常量 STATE_SYSTEM_OFFSCREEN, "65536", 公开
.常量 STATE_SYSTEM_SIZEABLE, "131072", 公开
.常量 STATE_SYSTEM_MOVEABLE, "262144", 公开
.常量 STATE_SYSTEM_SELFVOICING, "524288", 公开
.常量 STATE_SYSTEM_FOCUSABLE, "1048576", 公开
.常量 STATE_SYSTEM_SELECTABLE, "2097152", 公开
.常量 STATE_SYSTEM_LINKED, "4194304", 公开
.常量 STATE_SYSTEM_TRAVERSED, "8388608", 公开
.常量 STATE_SYSTEM_MULTISELECTABLE, "16777216", 公开
.常量 STATE_SYSTEM_EXTSELECTABLE, "33554432", 公开
.常量 STATE_SYSTEM_ALERT_LOW, "67108864", 公开
.常量 STATE_SYSTEM_ALERT_MEDIUM, "134217728", 公开
.常量 STATE_SYSTEM_ALERT_HIGH, "268435456", 公开
.常量 STATE_SYSTEM_PROTECTED, "536870912", 公开
.常量 SELFLAG_NONE, "0", 公开
.常量 SELFLAG_TAKEFOCUS, "1", 公开
.常量 SELFLAG_TAKESELECTION, "2", 公开
.常量 SELFLAG_EXTENDSELECTION, "4", 公开
.常量 SELFLAG_ADDSELECTION, "8", 公开
.常量 SELFLAG_REMOVESELECTION, "16", 公开
.常量 NAVDIR_MIN, "0"
.常量 NAVDIR_UP, "1", 公开
.常量 NAVDIR_DOWN, "2", 公开
.常量 NAVDIR_LEFT, "3", 公开
.常量 NAVDIR_RIGHT, "4", 公开
.常量 NAVDIR_NEXT, "5", 公开
.常量 NAVDIR_PREVIOUS, "6", 公开
.常量 NAVDIR_FIRSTCHILD, "7", 公开
.常量 NAVDIR_LASTCHILD, "8", 公开
.常量 NAVDIR_MAX, "9"
.常量 STATUS_INVALID_HANDLE, "-1073741816", , 指定了无效的句柄。
.常量 STATUS_INFO_LENGTH_MISMATCH, "-1073741820", 公开, 指定的信息记录长度与指定信息类所需的长度不匹配。
.常量 STATUS_SUCCESS, "0", 公开, 操作成功完成。
.常量 STATUS_PENDING, "259", , 请求的操作正在等待完成。
.常量 STATUS_INVALID_PARAMETER, "-1073741811", 公开
.常量 OBJ_INHERIT, "2", 公开
.常量 DUPLICATE_CLOSE_SOURCE, "1", 公开
.常量 DUPLICATE_SAME_ACCESS, "2", 公开
.常量 DUPLICATE_SAME_ATTRIBUTES, "4", 公开
.常量 OB_TYPE_PROCESS, "5", 公开
.常量 ZwGetCurrentProcess, "-1", 公开
.常量 JOB_OBJECT_ALL_ACCESS, "2031647", 公开
.常量 MEM_COMMIT, "4096", 公开, 指示已在内存或磁盘上的分页文件中为其分配物理存储的提交页。
.常量 MEM_RESERVE, "8192", , 指示保留页，其中保留了一系列进程的虚拟地址空间，而未分配任何物理存储。对于保留页，未定义保护成员中的信息。
.常量 TB_BUTTONCOUNT, "1048", 公开
.常量 TB_GETBUTTON, "1047", 公开
.常量 TB_DELETEBUTTON, "1046", 公开
.常量 TB_GETSTATE, "1042", , 取按钮状态
.常量 TB_SETSTATE, "1041", , 设置按钮状态
.常量 TB_GETBUTTONTEXTA, "1069", , 取工具条按钮标题
.常量 TB_GETHOTITEM, "1095"
.常量 TB_ENABLEBUTTON, "1025", , 取工具条按钮命令ID
.常量 MEM_RELEASE, "32768", 公开, 释放指定的页面区域或占位符
.常量 CP_ACP, "0", 公开
.常量 PAGE_EXECUTE_READWRITE, "64", 公开
.常量 CLSID_TaskbarList, "“{56FDF344-FD6D-11d0-958A-006097C9A090}”", 公开
.常量 IID_ITaskbarList, "“{56FDF342-FD6D-11d0-958A-006097C9A090}”", 公开
.常量 IID_ITaskbarList2, "“{602D4995-B13A-429b-A66E-1935E44F4317}”", 公开
.常量 IID_ITaskbarList3, "“{EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF}”", 公开
.常量 CLSCTX_INPROC_SERVER, "1", 公开, 创建和管理此类对象的代码是一个 DLL，它与指定类上下文的函数调用者在同一进程中运行。
.常量 CLSCTX_ALL, "23", , 显示所有类上下文。
.常量 任务栏进度_无, "0", 公开, TBPF_NOPROGRESS
.常量 任务栏进度_不确定, "1", 公开, TBPF_INDETERMINATE
.常量 任务栏进度_正常, "2", 公开, TBPF_NORMAL
.常量 任务栏进度_错误, "4", 公开, TBPF_ERROR
.常量 任务栏进度_暂停, "8", 公开, TBPF_PAUSED
.常量 WM_NULL, "0", 公开
.常量 WM_DROPFILES, "563", , 当用户在应用程序的窗口上放置文件时发送，该应用程序已将自身注册为放置文件的接收者。
.常量 WM_COPYGLOBALDATA, "73"
.常量 WM_COPYDATA, "74", , 一个应用程序发送WM_COPYDATA消息以将数据传递给另一个应用程序。
.常量 WM_DESTROY, "2", 公开
.常量 MSGFLT_ADD, "1", 公开, 将消息添加到过滤器。这具有允许接收消息的效果。
.常量 WM_KEYDOWN, "256", , 当一个非系统按键被按下时(<ALT>键没有被按下),会发送本消息给拥有键盘焦点的窗口
.常量 WM_KEYUP, "257", , 当一个非系统按键被释放弹起时(<ALT>键没有被按下),会发送本消息给拥有键盘焦点的窗口
.常量 WM_CHAR, "258", , 按下某按键,并已发出WM_KEYDOWN、WM_KEYUP消息,本消息包含被按下的按键的字符码
.常量 WM_SYSKEYDOWN, "260", , 当用户按住 Alt 键，然后按另一个键时，将发布到具有键盘焦点的窗口。 
.常量 WM_SYSKEYUP, "261", , 当用户释放按下 Alt 键时按下的键时，发布到具有键盘焦点的窗口。 
.常量 WM_COMMAND, "273", 公开
.常量 WM_SYSCOMMAND, "274", , 当用户选择窗口菜单的一条命令或当用户选择最大化或最小化时那个窗口会收到此消息
.常量 WM_MOUSEMOVE, "512", , 移动鼠标
.常量 WM_WTSSESSION_CHANGE, "689", , 2B1h
.常量 WM_COPY, "769", 公开, 程序发送此消息给一个编辑框或combobox来复制当前选择的文本到剪贴板
.常量 WM_SETICON, "128", 公开, 程序发送此消息让一个新的大图标或小图标与某个窗口关联
.常量 WM_DRAWCLIPBOARD, "776", 公开, 当剪贴板的内容变化时发送此消息给剪贴板观察链的第一个窗口;它允许用剪贴板观察窗口来显示剪贴板的新内容
.常量 WM_CHANGECBCHAIN, "781", 公开, 当一个窗口从剪贴板观察链中移去时发送此消息给剪贴板观察链的第一个窗口
.常量 WM_HOTKEY, "786", , 当用户按下RegisterHotKey功能注册的热键时，会显示热键消息。该消息位于与注册热键的线程关联的消息队列的顶部。
.常量 SC_CLOSE, "61536", , 关闭窗口
.常量 SC_MINIMIZE, "61472", , 最小化窗口
.常量 SC_MAXIMIZE, "61488", , 最大化窗口
.常量 THBN_CLICKED, "6144", 公开
.常量 缩略图按钮掩码_图片索引, "1", 公开, THB_BITMAP “图片索引”成员有效
.常量 缩略图按钮掩码_图标句柄, "2", 公开, THB_ICON
.常量 缩略图按钮掩码_提示文本, "4", 公开, THB_TOOLTIP
.常量 缩略图按钮掩码_按钮风格, "8", 公开, THB_FLAGS
.常量 缩略图按钮_可用, "0", 公开, THBF_ENABLED
.常量 缩略图按钮_禁止, "1", 公开, THBF_DISABLED
.常量 缩略图按钮_点击关闭, "2", 公开, THBF_DISMISSONCLICK
.常量 缩略图按钮_无背景, "4", 公开, THBF_NOBACKGROUND
.常量 缩略图按钮_隐藏, "8", 公开, THBF_HIDDEN
.常量 缩略图按钮_无交互按钮, "16", 公开, THBF_NONINTERACTIVE
.常量 GMEM_ZEROINIT, "64", 公开
.常量 MN_GETHMENU, "481", 公开
.常量 WM_ENTERIDLE, "289", 公开
.常量 MSGF_MENU, "2", 公开
.常量 MF_SEPARATOR, "2048", 公开, 绘制一条水平分割线
.常量 MF_STRING, "0", 公开, 指定菜单项是文本字符串
.常量 WM_CONTEXTMENU, "123", 公开
.常量 WM_NCHITTEST, "132", 公开, 移动鼠标，按住或释放鼠标时发生
.常量 WM_NCLBUTTONDOWN, "161", , 当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息
.常量 MF_BYPOSITION, "1024", 公开, 指示 uPosition 参数为新菜单项提供从零开始的相对位置
.常量 MF_POPUP, "16", 公开, 指定菜单项打开下拉菜单或子菜单
.常量 HTHSCROLL, "6", , 在水平滚动条中
.常量 HTVSCROLL, "7", 公开, 在垂直滚动条中
.常量 FILE_SUPPORTS_SPARSE_FILES, "64", 公开
.常量 FSCTL_SET_SPARSE, "590020", 公开
.常量 FILE_ATTRIBUTE_SPARSE_FILE, "512", 公开
.常量 GENERIC_READ_, "2147483648", 公开
.常量 FILE_SHARE_READ, "1", 公开, 在文件或设备上启用后续打开操作，以请求读取访问权限。
.常量 FILE_SHARE_WRITE, "2", 公开, 在文件或设备上启用后续打开操作以请求写访问权限。
.常量 OPEN_EXISTING, "3", 公开, 仅打开文件或设备（如果存在）。
.常量 Code, "<文本长度: 2793>"
.常量 FEATURE_DISABLE_NAVIGATION_SOUNDS, "21", 公开, 禁止跳转声音
.常量 SET_FEATURE_ON_PROCESS, "2", 公开, 仅对当前进程有效
.常量 FORMAT_MESSAGE_FROM_SYSTEM, "4096", 公开
.常量 FORMAT_MESSAGE_IGNORE_INSERTS, "512", 公开
.常量 FORMAT_MESSAGE_ALLOCATE_BUFFER, "256"
.常量 FORMAT_MESSAGE_FROM_HMODULE, "2048"
.常量 TCM_FIRST, "4864", 公开
.常量 CCM_FIRST, "8192", 公开
.常量 CCM_GETUNICODEFORMAT, "8198", 公开
.常量 CCM_SETUNICODEFORMAT, "8197", 公开
.常量 TCM_ADJUSTRECT, "4904", 公开, 调整矩形
.常量 TCM_DELETEALLITEMS, "4873", 公开, 删除全部子夹
.常量 TCM_DELETEITEM, "4872", 公开, 删除子夹
.常量 TCM_DESELECTALL, "4914", 公开, 全部取消选择
.常量 TCM_GETCURFOCUS, "4911", 公开, 获取光标焦点
.常量 TCM_GETCURSEL, "4875", 公开, 获取光标XXX？
.常量 TCM_GETEXTENDEDSTYLE, "4917", 公开, 取扩展风格
.常量 TCM_GETIMAGELIST, "4866", 公开, 取项目图片列表
.常量 TCM_GETITEMA, "4869", 公开, 取项目
.常量 TCM_GETITEMCOUNT, "4868", 公开, 取项目数
.常量 TCM_GETITEMRECT, "4874", 公开, 取项目矩形
.常量 TCM_GETROWCOUNT, "4908", 公开, 取行数
.常量 TCM_GETTOOLTIPS, "4909", 公开, 取工具条提示
.常量 TCM_GETUNICODEFORMAT, "8198", 公开, 取UNICODE格式
.常量 TCM_HIGHLIGHTITEM, "4915", 公开
.常量 TCM_HITTEST, "4877", 公开, 点击测试
.常量 TCM_INSERTITEMA, "4871", 公开, 插入子夹
.常量 TCM_REMOVEIMAGE, "4906", 公开, 移动图片
.常量 TCM_SETCURFOCUS, "4912", 公开, 置光标焦点
.常量 TCM_SETCURSEL, "4876", 公开, 置光标XXX？
.常量 TCM_SETEXTENDEDSTYLE, "4916", 公开, 置扩展风格
.常量 TCM_SETIMAGELIST, "4867", 公开, 置图片列表
.常量 TCM_SETITEMA, "4870", 公开, 置项目
.常量 TCM_SETITEMEXTRA, "4878", 公开, 置额外项目
.常量 TCM_SETITEMSIZE, "4905", 公开, 置项目尺寸
.常量 TCM_SETMINTABWIDTH, "4913", 公开, 置子夹栏最小宽度值
.常量 TCM_SETPADDING, "4907", 公开, 置子夹栏尺寸
.常量 TCM_SETTOOLTIPS, "4910", 公开, 置工具提示
.常量 TCM_SETUNICODEFORMAT, "8197", 公开, 置UNICODE格式
.常量 TCIF_IMAGE, "2", 公开, 项目图片
.常量 TCIF_PARAM, "8", 公开, 项目数值
.常量 TCIF_RTLREADING, "4", 公开, 项目右对齐
.常量 TCIF_STATE, "16", 公开, 状态
.常量 TCIF_TEXT, "1", 公开, 项目文本
.常量 WM_MEASUREITEM, "44", 公开
.常量 WM_WINDOWPOSCHANGED, "71", 公开
.常量 LVS_OWNERDRAWFIXED, "1024", 公开
.常量 CF_LIMITSIZE, "8192", 公开
.常量 Gzip, "<文本长度: 228095>"
.常量 HWND_TOP, "0", 公开, 将窗口置于Z顺序的顶部。
.常量 HWND_BOTTOM, "1", , 将窗口置于Z顺序的底部。如果hWnd参数标识了最顶部的窗口，则该窗口将失去其最顶部的状态，并放置在所有其他窗口的底部。
.常量 SWP_NOMOVE, "2", 公开, 维持当前位置（忽略X和Y参数）
.常量 SWP_NOSIZE, "1", 公开, 维持当前尺寸（忽略cx和Cy参数）
.常量 SWP_SHOWWINDOW, "64", , 显示窗口。
.常量 SWP_NOACTIVATE, "16", 公开, 不激活窗口。如果未设置此标志，则激活窗口并将其移到最顶层或非顶层组的顶部（取决于hWndInsertAfter参数的设置）。
.常量 SWP_HIDEWINDOW, "128", , 隐藏窗口。
.常量 SWP_NOZORDER, "4", , 保留当前的Z顺序（忽略hWndInsertAfter参数）。
.常量 HWND_TOPMOST, "-1", 公开, 将窗口置于所有非最上面的窗口上方。即使禁用窗口，窗口也将保持其最高位置。
.常量 HWND_NOTOPMOST, "-2", 公开, 将窗口置于所有非最上面的窗口上方（即，所有最上面的窗口的后面）。如果窗口已经是非最上面的窗口，则此标志无效。
.常量 WS_EX_LAYERED, "524288", 公开, 分层或透明窗口,该样式可使用混合特效
.常量 WS_EX_TRANSPARENT, "32", 公开, 透明样式,在同属窗口已重画时该窗口才可重画
.常量 WS_EX_NOACTIVATE, "134217728", 公开, 处于顶层但不激活
.常量 WM_XBUTTONDOWN, "523", , 按下了一个X鼠标键。
.常量 WM_XBUTTONUP, "524", , 释放了一个X鼠标按钮。
.常量 WM_MBUTTONDBLCLK, "521", 公开, 双击鼠标中键
.常量 WM_RBUTTONUP, "517", 公开, 释放鼠标右键
.常量 WM_MBUTTONUP, "520", 公开, 释放鼠标中键
.常量 WM_MBUTTONDOWN, "519", 公开, 按下鼠标中键
.常量 WM_RBUTTONDBLCLK, "518", 公开, 双击鼠标右键
.常量 WM_RBUTTONDOWN, "516", 公开, 按下鼠标右键
.常量 WM_LBUTTONDBLCLK, "515", 公开, 双击鼠标左键
.常量 WM_LBUTTONUP, "514", 公开, 释放鼠标左键
.常量 WM_LBUTTONDOWN, "513", 公开, 按下鼠标左键
.常量 WM_MOUSEWHEEL, "522", 公开, 当鼠标轮子转动时发送此消息个当前有焦点的控件
.常量 DWM_BB_ENABLE, "1", 公开
.常量 DWM_BB_BLURREGION, "2", 公开
.常量 DWM_BB_TRANSITIONONMAXIMIZED, "4", 公开
.常量 DWMWA_NCRENDERING_ENABLED, "1", 公开
.常量 DWMWA_NCRENDERING_POLICY, "2", 公开
.常量 DWMWA_TRANSITIONS_FORCEDISABLED, "3", 公开
.常量 DWMWA_ALLOW_NCPAINT, "4", 公开
.常量 DWMWA_CAPTION_BUTTON_BOUNDS, "5", 公开
.常量 DWMWA_NONCLIENT_RTL_LAYOUT, "6", 公开
.常量 DWMWA_FORCE_ICONIC_REPRESENTATION, "7", 公开
.常量 DWMWA_FLIP3D_POLICY, "8", 公开
.常量 DWMWA_EXTENDED_FRAME_BOUNDS, "9", 公开
.常量 DWMWA_LAST, "10", 公开
.常量 DWMWA_USE_IMMERSIVE_DARK_MODE, "20", , 启用深色模式系统设置时，允许以深色模式颜色绘制此窗口的窗口框架。
.常量 DWMNCRP_USEWINDOWSTYLE, "0", 公开
.常量 DWMNCRP_DISABLED, "1", 公开
.常量 DWMNCRP_ENABLED, "2", 公开
.常量 DWMNCRP_LAST, "3", 公开
.常量 DWMFLIP3D_DEFAULT, "0", 公开
.常量 DWMFLIP3D_EXCLUDEBELOW, "1", 公开
.常量 DWMFLIP3D_EXCLUDEABOVE, "2", 公开
.常量 DWMFLIP3D_LAST, "3", 公开
.常量 DWM_TNP_RECTDESTINATION, "1", 公开
.常量 DWM_TNP_RECTSOURCE, "2", 公开
.常量 DWM_TNP_OPACITY, "4", 公开
.常量 DWM_TNP_VISIBLE, "8", 公开
.常量 DWM_TNP_SOURCECLIENTAREAONLY, "16", 公开
.常量 DWM_SOURCE_FRAME_SAMPLING_POINT, "0", 公开
.常量 DWM_SOURCE_FRAME_SAMPLING_COVERAGE, "1", 公开
.常量 DWM_SOURCE_FRAME_SAMPLING_LAST, "2", 公开
.常量 DWM_EC_DISABLECOMPOSITION, "0", 公开
.常量 DWM_EC_ENABLECOMPOSITION, "1", 公开
.常量 单位_世界坐标, "0", 公开, // 0 -- World coordinate (non-physical unit)
.常量 单位_Display, "1", 公开, // 1 -- Variable -- for PageTransform only
.常量 单位_像素, "2", 公开, // 2 -- Each unit is one device pixel.像素
.常量 单位_点, "3", 公开, // 3 -- Each unit is a printer's point 点
.常量 单位_英寸, "4", 公开, // 4 -- Each unit is 1 inch.英寸
.常量 单位_Document, "5", 公开, // 5 -- Each unit is 1/300 inch.
.常量 单位_毫米, "6", 公开, // 6 -- Each unit is 1 millimeter.毫米
.常量 像素格式_Indexed, "65536", 公开, Indexed 该像素数据包含颜色索引值，这意味着这些值是系统颜色表中颜色的索引，而不是单个颜色值。
.常量 像素格式_GDI, "131072", 公开, Gdi 像素数据包含 GDI 颜色。
.常量 像素格式_Alpha, "262144", 公开, Alpha 像素数据包含没有进行过自左乘的 alpha 值。
.常量 像素格式_PAlpha, "524288", 公开, PAlpha 像素格式包含自左乘的 alpha 值。
.常量 像素格式_Extended, "1048576", 公开, Extended 保留。
.常量 像素格式_Canonical, "2097152", 公开, Canonical 保留。
.常量 像素格式_Undefined, "0", 公开, Undefined 未定义像素格式。
.常量 像素格式_DontCare, "0", 公开, DontCare 没有指定像素格式。
.常量 像素格式_1bppIndexed, "196865", 公开, Format1bppIndexed 指定像素格式为每像素 1 位，并指定它使用索引颜色。因此颜色表中有两种颜色。
.常量 像素格式_4bppIndexed, "197634", 公开, Format4bppIndexed 指定格式为每像素 4 位而且已创建索引。
.常量 像素格式_8bppIndexed, "198659", 公开, Format8bppIndexed 指定格式为每像素 8 位而且已创建索引。因此颜色表中有 256 种颜色。
.常量 像素格式_16bppGrayScale, "1052676", 公开, Format16bppGrayScale 像素格式为每像素 16 位。该颜色信息指定 65536 种灰色调。
.常量 像素格式_16bppRGB555, "135173", 公开, Format16bppRgb555 指定格式为每像素 16 位；红色、绿色和蓝色分量各使用 5 位。剩余的 1 位未使用。
.常量 像素格式_16bppRGB565, "135174", 公开, Format16bppRgb565 指定格式为每像素 16 位；红色分量使用 5 位，绿色分量使用 6 位，蓝色分量使用 5 位。
.常量 像素格式_16bppARGB1555, "397319", 公开, Format16bppArgb1555 像素格式为每像素 16 位。该颜色信息指定 32
.常量 像素格式_24bppRGB, "137224", 公开, Format24bppRgb 指定格式为每像素 24 位；红色、绿色和蓝色分量各使用 8 位。
.常量 像素格式_32bppRGB, "139273", 公开, Format32bppRgb 指定格式为每像素 32 位；红色、绿色和蓝色分量各使用 8 位。剩余的 8 位未使用。
.常量 像素格式_32bppARGB, "2498570", 公开, Format32bppArgb 指定格式为每像素 32 位；alpha、红色、绿色和蓝色分量各使用 8 位。
.常量 像素格式_32bppPARGB, "925707", 公开, Format32bppPArgb 指定格式为每像素 32 位；alpha、红色、绿色和蓝色分量各使用 8 位。根据 alpha 分量，对红色、绿色和蓝色分量进行自左乘。
.常量 像素格式_48bppRGB, "1060876", 公开, Format48bppRgb 指定格式为每像素 48 位；红色、绿色和蓝色分量各使用 16 位。
.常量 像素格式_64bppARGB, "3424269", 公开, Format64bppArgb 指定格式为每像素 64 位；alpha、红色、绿色和蓝色分量各使用 16 位。
.常量 像素格式_64bppPARGB, "1851406", 公开, Format64bppPArgb 指定格式为每像素 64 位；alpha、红色、绿色和蓝色分量各使用 16 位。根据 alpha 分量，对红色、绿色和蓝色分量进行自左乘。
.常量 像素格式_Max, "15", 公开, Max 此枚举的最大值。
.常量 常量_代码页标识符, "<文本长度: 6678>", 公开
.常量 SB_THUMBPOSITION, "4", , 用户已拖动滚动框（拇指）并释放鼠标按钮。HIWORD表示拖动操作结束时滚动框的位置。
.常量 SIF_DISABLENOSCROLL, "8", 公开
.常量 SIF_PAGE, "2", 公开
.常量 SIF_POS, "4", 公开
.常量 SIF_TRACKPOS, "16", 公开
.常量 SIF_RANGE, "1", 公开
.常量 SIF_ALL, "23", 公开
.常量 OBJID_VSCROLL, "-5", 公开
.常量 WM_SETREDRAW, "11", , 设置窗口是否能重画
.常量 TVM_GETNEXTITEM, "4362", , 检索与指定项具有指定关系的树视图项。
.常量 TVM_GETITEMA, "4364", , 检索树视图项的部分或全部属性。
.常量 TVM_GETCOUNT, "4357", , 检索树视图控件中项目的计数。
.常量 TVM_HITTEST, "4369", , 确定指定点相对于树视图控件客户区的位置。
.常量 TVM_GETITEMW, "4414", , 检索树视图项的部分或全部属性。
.常量 TVM_SETITEMW, "4415", , 该TVM_SETITEM消息设置的部分或全部树视图项的属性。
.常量 TVM_ENSUREVISIBLE, "4372", , 确保树视图项可见，如有必要，展开父项或滚动树视图控件。
.常量 TVM_EXPAND, "4354", , 该TVM_EXPAND消息展开或折叠与指定父项相关的子项，如有的名单。
.常量 TVM_GETIMAGELIST, "4360", , 检索与树视图控件关联的正常或状态图像列表的句柄。
.常量 TVM_CREATEDRAGIMAGE, "4370", , 为树视图控件中的指定项创建拖动位图。
.常量 TVM_SORTCHILDREN, "4371", , 对树视图控件中指定父项的子项进行排序。
.常量 TVM_INSERTITEMW, "4402", , 在树视图控件中插入一个新项目。
.常量 TVM_DELETEITEM, "4353", , 从树视图控件中删除项目及其所有子项。
.常量 TVM_GETITEMSTATE, "4391", , 检索树视图项的部分或全部状态属性。
.常量 TVM_SETBKCOLOR, "4381", , 设置控件的背景颜色。
.常量 TVM_GETBKCOLOR, "4383", , 检索控件的当前背景颜色。
.常量 TVM_SETITEMHEIGHT, "4379", , 设置树视图项的高度。
.常量 TVM_GETITEMHEIGHT, "4380", , 检索每个树视图项的当前高度。
.常量 TVM_SETTEXTCOLOR, "4382", , 设置控件的文本颜色。
.常量 TVM_GETTEXTCOLOR, "4384", , 设置控件的文本颜色。
.常量 TVM_SETLINECOLOR, "4392", , 所述TVM_SETLINECOLOR消息设置当前行的颜色。
.常量 TVM_GETLINECOLOR, "4393", , 该TVM_GETLINECOLOR消息获取当前线条颜色。
.常量 TVE_COLLAPSE, "1", , 折叠列表。
.常量 TVE_EXPAND, "2", , 展开列表。
.常量 TVGN_ROOT, "0", , 检索树视图控件的最顶部或第一个项目。
.常量 TVGN_PARENT, "3", , 检索指定项的父项。
.常量 TVGN_CHILD, "4", , 检索由hitem参数指定的项目的第一个子项目。
.常量 TVGN_NEXT, "1", , 检索下一个同级项。
.常量 TVGN_FIRSTVISIBLE, "5", , 检索在树视图窗口中可见的第一个项目。
.常量 TVGN_DROPHILITE, "8", , 检索作为拖放操作目标的项。
.常量 TVGN_CARET, "9", , 检索当前选定的项目。
.常量 TVIF_TEXT, "1", , 该 pszText和 cchTextMax定义成员是有效的。
.常量 TVI_ROOT, "4294901760", , 在根部插入
.常量 TVIF_PARAM, "4", , 项目数值
.常量 TVIF_IMAGE, "2", , 该 IIMAGE成员是有效的。
.常量 TVIF_SELECTEDIMAGE, "32", , 该 iSelectedImage成员是有效的。
.常量 TVI_FIRST, "4294901761", , 在列表首部加入
.常量 TVI_LAST, "4294901762", , 在列表尾部插入
.常量 TVI_SORT, "4294901763", , 插入项目时按字母顺序排列
.常量 TVIF_ALL, "39", , 全部,文本+图象+选择图象+项目数值 1+2+4+32=39
.常量 TVM_INSERTITEMA, "4352", , 在树视图控件中插入一个新项目。
.常量 TVM_SETITEMA, "4365", , 该TVM_SETITEM消息设置的部分或全部树视图项的属性。
.常量 TVM_GETVISIBLECOUNT, "4368"
.常量 TVM_SELECTITEM, "4363"
.常量 TVM_GETITEMRECT, "4356"
.常量 TVIS_BOLD, "16", , 加粗
.常量 TVIF_STATE, "8", , 状态
.常量 TVIF_HANDLE, "16", , hItem成员是有效的。
.常量 TVIF_CHILDREN, "64", , 是否有子
.常量 TVIF_INTEGRAL, "128", , iIntegral成员是有效的。
.常量 TVS_CHECKBOXES, "256", , 启用树视图控件中项目的复选框。仅当图像与项目相关联时才会显示复选框。
.常量 TVS_TRACKSELECT, "512", , 在树视图控件中启用热跟踪。
.常量 TVS_NOSCROLL, "8192", , 禁用控件中的水平和垂直滚动。该控件不会显示任何滚动条。
.常量 TVS_NOHSCROLL, "32768", , 禁用控件中的水平滚动。该控件不会显示任何水平滚动条。
.常量 TVS_FULLROWSELECT, "4096", , 在树视图中启用全行选择。所选项目的整行都将突出显示，单击项目行上的任意位置会使其被选中。此样式不能与TVS_HASLINES样式结合使用。
.常量 TVN_BEGINDRAGA, "-407", , 通知树视图控件的父窗口正在启动涉及鼠标左键的拖放操作。
.常量 TVN_BEGINDRAGW, "-456", , 通知树视图控件的父窗口，即正在启动涉及鼠标左键的拖放操作。
.常量 TVSIL_NORMAL, "0", , 指示普通图像列表，其中包含树视图控件项的选定图像、非选定图像和覆盖图像。
.常量 TVSIL_STATE, "2", , 指示状态映像列表。 可以使用状态映像来指示应用程序定义的项状态。 状态图像显示在项目所选或非选定图像的左侧。
.常量 LR_COPYRETURNORG, "4", , 如果它满足副本的标准（即正确的尺寸和颜色深度），则 返回原始hImage ，在这种情况下忽略LR_COPYDELETEORG标志。如果未指定此标志，则始终创建一个新对象。
.常量 LR_LOADMAP3DCOLORS, "4096", , 在颜色表中搜索图像并用相应的 3-D 颜色替换以下灰色阴影。如果您正在加载颜色深度大于 8bpp 的位图，请不要使用此选项。
.常量 LR_LOADFROMFILE, "16", , 从lpszName指定的文件（图标、光标或位图文件） 加载独立图像 。
.常量 WM_CTLCOLOREDIT, "307"
.常量 TRANSPARENT, "1", , 背景保持不变
.常量 NULL_BRUSH, "5"
.常量 EN_VSCROLL, "1538"
.常量 EN_HSCROLL, "1537"
.常量 EN_CHANGE, "768"
.常量 WM_ERASEBKGND, "20"
.常量 WM_VSCROLL, "277"
.常量 WM_HSCROLL, "276"
.常量 CBM_INIT, "4"
.常量 HDI_FORMAT, "4"
.常量 HDF_OWNERDRAW, "32768"
.常量 HDM_GETITEMCOUNT, "4608"
.常量 WM_DRAWITEM, "43", , 当button，combobox，listbox，menu的可视外观改变时发送
.常量 HDM_SETITEM, "4612"
.常量 HDI_TEXT, "2"
.常量 HDM_GETITEM, "4611"
.常量 DT_CENTER, "1"
.常量 HDM_LAYOUT, "4613"
.常量 WM_NCCALCSIZE, "131", , 当必须计算窗口客户区的大小和位置时发送。通过处理此消息，应用程序可以在窗口大小或位置发生变化时控制窗口客户区的内容。
.常量 WM_PAINT, "15", , 当系统或其他应用程序请求绘制应用程序窗口的一部分时，将发送WM_PAINT消息。
.常量 LVM_APPROXIMATEVIEWRECT, "4160", 公开, 超列表_计算显示一个项目所需的宽度和高度
.常量 LVM_ARRANGE, "4118", 公开, 超列表_在图象显示时自动排列
.常量 LVM_CREATEDRAGIMAGE, "4129", 公开, 超列表_为指定的项目产生一个拖曳图像列表
.常量 LVM_DELETEALLITEMS, "4105", 公开, 超列表_清空
.常量 LVM_DELETECOLUMN, "4124", 公开, 超列表_删除列
.常量 LVM_DELETEITEM, "4104", 公开, 超列表_删除行
.常量 LVM_EDITLABELW, "4214", 公开, 超列表_编辑指定位置
.常量 LVM_ENABLEGROUPVIEW, "4253", 公开, 超列表_显示或禁止项目
.常量 LVM_ENSUREVISIBLE, "4115", 公开, 超列表_保证显示
.常量 LVM_FINDITEMW, "4179", 公开, 超列表_查找
.常量 LVM_GETBKCOLOR, "4096", 公开, 取背景颜色
.常量 LVM_GETBKIMAGEW, "4235", 公开, 取背景图片
.常量 LVM_GETCALLBACKMASK, "4106", 公开, 取回调掩码
.常量 LVM_GETCOLUMNW, "4191", 公开, 超列表_取列信息
.常量 LVM_GETCOLUMNORDERARRAY, "4155", 公开, 超列表_取对齐方式
.常量 LVM_GETCOLUMNWIDTH, "4125", 公开, 超列表_取列宽
.常量 LVM_GETCOUNTPERPAGE, "4136", 公开, 取可视的项目数量
.常量 LVM_GETEDITCONTROL, "4120", 公开, 当列表框在进行编辑时，返回这引编辑框的句柄
.常量 LVM_GETEXTENDEDLISTVIEWSTYLE, "4151", 公开, 取当前扩展风格
.常量 LVM_GETGROUPINFO, "4245", 公开, 取块的信息
.常量 LVM_GETGROUPCOUNT, "4248", 公开, 获取组数。
.常量 LVM_GETGROUPINFOBYINDEX, "4249", 公开, 获取有关指定组的信息。
.常量 LVM_GETGROUPMETRICS, "4252", 公开, 取块的规格
.常量 LVM_GETHEADER, "4127", 公开, 超列表_取表头句柄
.常量 LVM_GETHOTCURSOR, "4159", 公开, 如果激活了热点跟随踪，当鼠标在某个项目上时，返回其句柄
.常量 LVM_GETHOTITEM, "4157", 公开, 取鼠标指针指向项目的索引
.常量 LVM_GETHOVERTIME, "4168", 公开, 检索鼠标光标在项目被选中之前必须悬停在项目上的时间量。
.常量 LVM_GETIMAGELIST, "4098", 公开, 取图片组
.常量 LVM_GETINSERTMARK, "4263", 公开, 取插入掩码
.常量 LVM_GETINSERTMARKCOLOR, "4267", 公开, 取插入掩码颜色
.常量 LVM_GETINSERTMARKRECT, "4265", 公开, 取插入掩码的矩形范围
.常量 LVM_GETITEMW, "4171", 公开, 超列表_取项目
.常量 LVM_GETITEMCOUNT, "4100", 公开, 超列表_取表项总数
.常量 LVM_GETITEMPOSITION, "4112", 公开, 超列表_取图标位置
.常量 LVM_GETITEMRECT, "4110", 公开, 取指定项目的矩形范围
.常量 LVM_GETITEMSPACING, "4147", 公开, 取项目之间的间隔距离
.常量 LVM_GETITEMSTATE, "4140", 公开, 超列表_取项目状态
.常量 LVM_GETITEMTEXTW, "4211", 公开, 取项目正文
.常量 LVM_GETNEXTITEM, "4108", 公开, 取下一项目
.常量 LVM_GETNUMBEROFWORKAREAS, "4169", 公开, 取当前列表框工作区中的项目数量
.常量 LVM_GETOUTLINECOLOR, "4272", 公开, 取列表框边框颜色
.常量 LVM_GETSELECTEDCOLUMN, "4270", 公开, 取选择列
.常量 LVM_GETSELECTEDCOUNT, "4146", 公开, 超列表_取被选择项目数
.常量 LVM_GETSELECTIONMARK, "4162", 公开, 超列表_取现行选中项
.常量 LVM_GETSTRINGWIDTHA, "4113", 公开, 取显示一个文本所需要的列宽度
.常量 LVM_GETSUBITEMRECT, "4152", 公开, 取子项目的矩形范围
.常量 LVM_GETTEXTBKCOLOR, "4133", 公开, 取正文背景色
.常量 LVM_GETTEXTCOLOR, "4131", 公开, 取正文颜色
.常量 LVM_GETTOOLTIPS, "4174", 公开, 取工具提示
.常量 LVM_GETTOPINDEX, "4135", 公开, 取在可视范围中第一个项目的索引
.常量 LVM_GETVIEW, "4239", 公开, 取超级列表框当前的类型
.常量 LVM_GETVIEWRECT, "4130", 公开, 取当前所有项目所占用的矩形范围
.常量 LVM_GETWORKAREAS, "4166", 公开, 取工作区的矩形范围
.常量 LVM_INSERTCOLUMNW, "4193", 公开, 超列框_插入列
.常量 LVM_INSERTGROUP, "4241", 公开, 插入块
.常量 LVM_INSERTGROUPSORTED, "4255", 公开, 插入块种类
.常量 LVM_INSERTITEMW, "4173", 公开, 超列框_插入项目
.常量 LVM_ISGROUPVIEWENABLED, "4271", 公开, 块检视是否激活
.常量 LVM_MOVEITEMTOGROUP, "4250", 公开, 移动项目到块
.常量 LVM_REDRAWITEMS, "4117", 公开, 重画项目
.常量 LVM_REMOVEALLGROUPS, "4256", 公开, 移动全部块
.常量 LVM_SCROLL, "4116", 公开, 移动滚动条
.常量 LVM_SETBKCOLOR, "4097", 公开, 设置背景色
.常量 LVM_SETBKIMAGEW, "4234", 公开, 设置背景图片
.常量 LVM_SETCALLBACKMASK, "4107", 公开, 设置回调掩码
.常量 LVM_SETCOLUMNW, "4192", 公开, 超列表_置列信息
.常量 LVM_SETCOLUMNORDERARRAY, "4154", 公开, 设置列显示的排序
.常量 LVM_SETCOLUMNWIDTH, "4126", 公开, 设置列宽
.常量 LVM_SETEXTENDEDLISTVIEWSTYLE, "4150", 公开, 设置扩展风格
.常量 LVM_SETGROUPINFO, "4243", 公开, 设置块信息
.常量 LVM_SETHOTITEM, "4156", 公开, 置鼠标指针指向项目的索引？？？
.常量 LVM_SETICONSPACING, "4149", 公开, 置图标间隔
.常量 LVM_SETIMAGELIST, "4099", 公开, 置图片组
.常量 LVM_SETINFOTIP, "4269", 公开, 置信息提示
.常量 LVM_SETINSERTMARK, "4262", 公开, 置插入掩码
.常量 LVM_SETINSERTMARKCOLOR, "4266", 公开, 置插入掩码颜色
.常量 LVM_SETITEMW, "4172", 公开, 超列表_置项目
.常量 LVM_SETITEMCOUNT, "4143", 公开, 虚拟一个列表项目总数
.常量 LVM_SETITEMPOSITION, "4111", 公开, 超列表_置表项坐标
.常量 LVM_SETITEMSTATE, "4139", 公开, 超列表_置项目状态
.常量 LVM_SETITEMTEXTA, "4142", 公开, 置项目正文
.常量 LVM_SETOUTLINECOLOR, "4273", 公开, 置列表框边框颜色
.常量 LVM_SETSELECTEDCOLUMN, "4236", 公开, 置现行选择列
.常量 LVM_SETSELECTIONMARK, "4163", 公开, 置选择标志
.常量 LVM_SETTEXTBKCOLOR, "4134", 公开, 置正文背景色
.常量 LVM_SETTEXTCOLOR, "4132", 公开, 置文本颜色
.常量 LVM_SETTOOLTIPS, "4170", 公开, 置工具条
.常量 LVM_SETVIEW, "4238", 公开, 置列表框类型
.常量 LVM_SETWORKAREAS, "4161", 公开, 置工作区
.常量 LVM_SORTGROUPS, "4254", 公开, 群（块）分类
.常量 LVM_SORTITEMS, "4144", 公开, 排序分类
.常量 LVM_SORTITEMSEX, "4177", 公开, 项目分类扩展
.常量 LVM_UPDATE, "4138", 公开, 刷新列表框
.常量 LVM_SUBITEMHITTEST, "4153", 公开, 取坐标表项索引
.常量 LVM_CANCELEDITLABEL, "4275", 公开, 取消项目文本编辑操作。
.常量 LVM_INSERTMARKHITTEST, "4264", 公开, 检索最接近指定点的插入点。
.常量 LVM_SETITEMPOSITION32, "4145", 公开, 将项目移动到列表视图控件中的指定位置（必须在图标或小图标视图中）。此消息与LVM_SETITEMPOSITION消息的不同之处在于它使用 32 位坐标。
.常量 窗口风格_单边框, "8388608", 公开, WS_BORDER
.常量 窗口风格_标题栏, "12582912", 公开, WS_CAPTION 有标题和边框（包括WS_BODER风格）。
.常量 窗口风格_子窗口, "1073741824", 公开, WS_CHILD 不能与“窗口风格_弹出式窗口”合用。
.常量 窗口风格_排除子窗口重画, "33554432", 公开, WS_CLIPCHILDREN 在创建父窗口时使用这个风格。
.常量 窗口风格_排除重叠窗口重画, "67108864", 公开, WS_CLIPSIBLINGS 使窗口排除子窗口之间的相对区域。
.常量 窗口风格_禁止, "134217728", 公开, WS_DISABLED
.常量 窗口风格_对话框边框, "4194304", 公开, WS_DLGFRAME
.常量 窗口风格_组样式, "131072", 公开, WS_GROUP
.常量 窗口风格_水平滚动条, "1048576", 公开, WS_HSCROLL
.常量 窗口风格_最大化状态, "16777216", 公开, WS_MAXIMIZE
.常量 窗口风格_最大化按钮, "65536", 公开, WS_MAXIMIZEBOX
.常量 窗口风格_最小化状态, "536870912", 公开, WS_MINIMIZE
.常量 窗口风格_最小化按钮, "131072", 公开, WS_MINIMIZEBOX
.常量 窗口风格_默认, "13565952", 公开, WS_OVERLAPPEDWINDOW具有层叠，标题框，系统菜单，可调边框，系统按钮。
.常量 窗口风格_弹出式窗口, "2147483648", 公开, WS_POPUP 不能与“窗口风格_子窗口”合用。
.常量 WS_POPUPWINDOW, "2156396544", , 具有单边框，弹出式，系统菜单样式。
.常量 窗口风格_可调边框, "262144", 公开, WS_SIZEBOX
.常量 窗口风格_系统菜单, "524288", 公开, WS_SYSMENU 必须同时设定“窗口风格_标题栏”风格。
.常量 窗口风格_可停留焦点, "65536", 公开, WS_TABSTOP
.常量 WS_TILED, "0", , 产生一个层叠的窗口。一个层叠的窗口有一个标题和一个边框。
.常量 窗口风格_层叠窗口, "13565952", 公开, WS_TILEDWINDOW 创建一个具有WS_OVERLAPPED，WS_CAPTION，WS_SYSMENU MS_THICKFRAME
.常量 窗口风格_可视, "268435456", 公开, WS_VISIBLE
.常量 窗口风格_垂直滚动条, "2097152", 公开, WS_VSCROLL
.常量 窗口风格_无边框, "2147483648", 公开, WS_POPUP 不能与“窗口风格_子窗口”合用。
.常量 窗口扩展_阴影边缘, "512", 公开, WS_EX_CLIENTEDGE
.常量 窗口扩展_双层边框, "1", 公开, WS_EX_DLGMODALFRAME
.常量 窗口扩展_凸起阴影, "768", 公开, WS_EX_OVERLAPPEDWINDOW
.常量 窗口扩展_三维边缘, "131072", 公开, WS_EX_STATICEDGE
.常量 窗口扩展_凸起边框, "256", 公开, WS_EX_WINDOWEDGE
.常量 窗口扩展_容器窗口, "65536", 公开, WS_EX_CONTROLPARENT 允许用户使用Tab键在窗口的子窗口间搜索
.常量 窗口扩展_分层, "524288", 公开, WS_EX_LAYERED 透明窗口或分层，该样式可使用混合特效
.常量 窗口扩展_总在最前, "8", 公开, WS_EX_TOPMOST
.常量 窗口扩展_工具条窗口, "128", 公开, WS_EX_TOOLWINDOW
.常量 WS_EX_NOPARENTNOTIFY, "4", , 创建/销毁时不向父窗口发送WM_PARENTNOTFY消息
.常量 窗口扩展_可接受拖放, "16", 公开, WS_EX_ACCEPTFILES 可接受拖放文件
.常量 窗口扩展_在任务栏显示, "262144", 公开, WS_EX_APPWINDOW 当窗口可见时，将一个顶层窗口放置到任务条上
.常量 窗口扩展_帮助按钮, "1024", 公开, WS_EX_CONTEXTHELP。在窗口的标题条包含一个问号标志，
.常量 窗口扩展_垂直滚动条居左, "16384", 公开, WS_EX_LEFTSCROLLBAR 垂直滚动条在窗口左边界
.常量 窗口扩展_MDI子窗口, "64", 公开, WS_EX_MDICHILD。MDI子窗口
.常量 窗口扩展_右对齐, "4096", 公开, WS_EX_RIGHT
.常量 窗口扩展_文本从右到左, "8192", 公开, WS_EX_RTLREADING 窗口文本从右到左显示
.常量 窗口扩展_透明, "32", 公开, WS_EX_TRANSPARENT。透明样式，在同属窗口已重画时，该窗口才可以重画
.常量 CB_ADDSTRING, "323", 公开, 组合框_添加项目
.常量 CB_DELETESTRING, "324", 公开, 组合框_删除项目
.常量 CB_ERR, "-1", 公开, 组合框_错误
.常量 CB_FINDSTRING, "332", 公开, 组合框_前缀查找
.常量 CB_FINDSTRINGEXACT, "344", 公开, 组合框_精确查找
.常量 CB_GETCOUNT, "326", 公开, 组合框_取项目总数
.常量 CB_GETCURSEL, "327", 公开, 组合框_取现行选中项
.常量 CB_GETDROPPEDCONTROLRECT, "338", 公开, 组合框_列表框的屏幕位置
.常量 CB_GETDROPPEDSTATE, "343", 公开, 组合框_列表框是否可见
.常量 CB_GETDROPPEDWIDTH, "351", 公开, 组合框_列表框的宽度。
.常量 CB_GETEDITSEL, "320", 公开, 组合框_编辑控件中选定内容的范围
.常量 CB_GETEXTENDEDUI, "342", 公开, 组合框_是否存在扩展界面
.常量 CB_GETITEMDATA, "336", 公开, 组合框_取项目数值
.常量 CB_GETITEMHEIGHT, "340", 公开, 组合框_取列表框项目高度
.常量 CB_GETLBTEXT, "328", 公开, 组合框_取项目文本
.常量 CB_GETLBTEXTLEN, "329", 公开, 组合框_取项目文本长度
.常量 CB_GETTOPINDEX, "347", 公开, 组合框_取组合框中列表框中第一个可见项的索引
.常量 CB_INSERTSTRING, "330", 公开, 组合框_指定位置插入字符串。
.常量 CB_LIMITTEXT, "321", 公开, 组合框_限制编辑控件文本的最大长度
.常量 CB_RESETCONTENT, "331", 公开, 组合框_清空
.常量 CB_SELECTSTRING, "333", 公开, 组合框_设定与指定字符串相匹配的列表项为选中项。
.常量 CB_SETCURSEL, "334", 公开, 组合框_置现行选中项
.常量 CB_SETDROPPEDWIDTH, "352", 公开, 组合框_列表框最大允许宽度
.常量 CB_SETEDITSEL, "322", 公开, 组合框_编辑控件中文本选定内容范围
.常量 CB_SETEXTENDEDUI, "341", 公开, 组合框_是使用默认界面或扩展界面
.常量 CB_SETHORIZONTALEXTENT, "350", 公开, 组合框_置列表宽度
.常量 CB_SETITEMDATA, "337", 公开, 组合框_置项目数值
.常量 CB_SETITEMHEIGHT, "339", 公开, 组合框_列表项显示高度
.常量 CB_SETTOPINDEX, "348", 公开, 组合框_置为列表框的第一个可见项
.常量 CB_SHOWDROPDOWN, "335", 公开, 组合框_显示列表。
.常量 CB_GETCOMBOBOXINFO, "356", 公开
.常量 CB_SETMINVISIBLE, "5889", , 设置组合框下拉列表中可见项的最小数量
.常量 CB_GETMINVISIBLE, "5890", , 获取组合框下拉列表中可见项的最小数目
.常量 en_US, "1033"
.常量 FILE_ATTRIBUTE_NORMAL, "128", 公开, 没有设置其他属性的文件。此属性仅在单独使用时才有效。
.常量 FILE_ATTRIBUTE_OFFLINE, "4096", , 文件数据无法立即使用。此属性指示文件数据已物理移动到脱机存储中。远程存储（分层存储管理软件）使用此属性。应用程序不应随意更改此属性。
.常量 FILE_ATTRIBUTE_NOT_CONTENT_INDEXED, "8192", , 内容索引服务不对文件或目录建立索引。
.常量 PBS_MARQUEE, "8", , 6.0或更高版本。进度指示器的大小不会增加，而是沿着条的长度重复移动，指示活动而不指定进度的完成比例。
.常量 PBM_SETMARQUEE, "1034", , 将进度条设置为选取框模式。这会导致进度条像选取框一样移动。
.常量 SHGFP_TYPE_CURRENT, "0", , 检索文件夹的当前路径。
.常量 SHGFP_TYPE_DEFAULT, "1", , 检索文件夹的默认路径。
.常量 SW_NORMAL, "1"
.常量 CBN_SELCHANGE, "1", , 通知父窗(通过WM_COMMAND获知),选择了组合框中的一项
.常量 HWND_BROADCAST, "65535", , 广播消息
.常量 S_OK, "0", , 正确
.常量 S_FALSE, "1", , 错误
.常量 CSIDL_DESKTOP, "0", 公开, 表示Windows桌面的虚拟文件夹，名称空间的根。
.常量 CSIDL_INTERNET, "1", 公开, Internet Explorer的虚拟文件夹。
.常量 CSIDL_PROGRAMS, "2", 公开, 包含用户程序组的文件系统目录（本身就是文件系统目录）。典型的路径是C:\Documents and Settings\用户名\Start Menu\Programs。
.常量 CSIDL_CONTROLS, "3", 公开, 包含控制面板应用程序图标的虚拟文件夹。
.常量 CSIDL_PRINTERS, "4", 公开, 包含已安装打印机的虚拟文件夹。
.常量 CSIDL_PERSONAL, "5", 公开, 代表“我的文档”桌面项目的虚拟文件夹。
.常量 CSIDL_FAVORITES, "6", 公开, 文件系统目录，用作用户喜欢的项目的公共存储库。典型路径是C:\Documents and Settings\用户名\Favorites。
.常量 CSIDL_STARTUP, "7", 公开, 与用户的启动程序组相对应的文件系统目录。每当相关联的用户登录时，系统都会启动这些程序。典型路径是C:\Documents and Settings\用户名\Start Menu\Programs\Startup。
.常量 CSIDL_RECENT, "8", 公开, 文件系统目录，其中包含用户最近使用的文档的快捷方式。典型路径是C:\Documents and Settings\用户名\My Latest Documents。要在此文件夹中创建快捷方式，请使用SHAddToRecentDocs。除了创建快捷方式外，此功能还可以更新命令行管理程序的近期文档列表，并将快捷方式添加到“开始”菜单的“我的近期文档”子菜单中。
.常量 CSIDL_SENDTO, "9", 公开, 包含“发送到”菜单项的文件系统目录。典型路径是C:\Documents and Settings\用户名\SendTo。
.常量 CSIDL_BITBUCKET, "10", 公开, 包含用户回收站中对象的虚拟文件夹。
.常量 CSIDL_STARTMENU, "11", 公开, 包含“开始”菜单项的文件系统目录。典型路径是C:\Documents and Settings\用户名\开始菜单。
.常量 CSIDL_MYMUSIC, "13", 公开, 用作音乐文件的公共存储库的文件系统目录。典型路径是C:\Documents and Settings\User\My Documents\My Music。
.常量 CSIDL_DESKTOPDIRECTORY, "16", 公开, 用于在桌面上物理存储文件对象的文件系统目录（不要与桌面文件夹本身混淆）。典型路径是C:\Documents and Settings\用户名\Desktop。
.常量 CSIDL_DRIVES, "17", 公开, 代表“我的电脑”的虚拟文件夹，其中包含本地计算机上的所有内容：存储设备，打印机和控制面板。该文件夹还可以包含映射的网络驱动器。
.常量 CSIDL_NETWORK, "18", 公开, 表示网络邻居的虚拟文件夹，网络邻居是网络名称空间层次结构的根。
.常量 CSIDL_NETHOOD, "19", 公开, 一个文件系统目录，其中包含“网上邻居”虚拟文件夹中可能存在的链接对象。它与CSIDL_NETWORK不同，后者表示网络名称空间的根。典型路径是C:\Documents and Settings\用户名\NetHood。
.常量 CSIDL_FONTS, "20", 公开, 包含字体的虚拟文件夹。典型的路径是C:\Windows\Fonts。
.常量 CSIDL_TEMPLATES, "21", 公开, 用作文档模板的公共存储库的文件系统目录。典型的路径是C:\Documents and Settings\用户名\Templates。
.常量 CSIDL_COMMON_STARTMENU, "22", 公开, 文件系统目录，其中包含出现在“开始”菜单上的所有用户的程序和文件夹。典型的路径是C:\Documents and Settings\All Users\Start Menu。
.常量 CSIDL_COMMON_PROGRAMS, "23", 公开, 文件系统目录，其中包含出现在“开始”菜单上的所有用户的通用程序组的目录。典型的路径是C:\Documents and Settings\All Users\Start Menu\Programs。
.常量 CSIDL_COMMON_STARTUP, "24", 公开, 文件系统目录，其中包含出现在所有用户的“启动”文件夹中的程序。典型的路径是C:\Documents and Settings\All Users\Start Menu\Programs\Startup。
.常量 CSIDL_COMMON_DESKTOPDIRECTORY, "25", 公开, 文件系统目录，其中包含为所有用户显示在桌面上的文件和文件夹。典型路径是C:\Documents and Settings\All Users\Desktop。
.常量 CSIDL_APPDATA, "26", 公开, 文件系统目录，用作特定于应用程序的数据的公共存储库。典型路径是C:\Documents and Settings\用户名\Application Data。
.常量 CSIDL_PRINTHOOD, "27", 公开, 包含可以在“打印机”虚拟文件夹中存在的链接对象的文件系统目录。典型的路径是C:\Documents and Settings\用户名\PrintHood。
.常量 CSIDL_LOCAL_APPDATA, "28", 公开, 用户的配置文件文件夹。典型的路径是C:\Users\username。应用程序不应在此级别创建文件或文件夹；他们应该将其数据放在CSIDL_APPDATA或CSIDL_LOCAL_APPDATA所引用的位置下。但是，如果要创建新的“已知文件夹”，则由CSIDL_PROFILE引用的配置文件根目录是合适的。
.常量 CSIDL_ALTSTARTUP, "29", 公开, 与用户的非本地化启动程序组相对应的文件系统目录。Windows Vista可以识别此值以实现向后兼容，但是文件夹本身不再存在。
.常量 CSIDL_COMMON_ALTSTARTUP, "30", 公开, 与所有用户的非本地化启动程序组相对应的文件系统目录。Windows Vista可以识别此值以实现向后兼容，但是文件夹本身不再存在。
.常量 CSIDL_COMMON_FAVORITES, "31", 公开, 文件系统目录，用作所有用户共有的收藏夹项的通用存储库。
.常量 CSIDL_INTERNET_CACHE, "32", 公开, 用作Internet临时文件的公共存储库的文件系统目录。典型路径是C:\Documents and Settings\用户名\Local Settings\Temporary Internet Files。
.常量 CSIDL_COOKIES, "33", 公开, 用作Internet cookie通用存储库的文件系统目录。典型路径是C:\Documents and Settings\用户名\Cookies。
.常量 CSIDL_HISTORY, "34", 公开, 用作Internet历史记录项目的公共存储库的文件系统目录。
.常量 CSIDL_COMMON_APPDATA, "35", 公开, 包含所有用户的应用程序数据的文件系统目录。典型的路径是C:\Documents and Settings\All Users\Application Data。该文件夹用于非特定于用户的应用程序数据。例如，应用程序可以在CSIDL_COMMON_APPDATA文件夹中存储拼写检查字典，剪贴画数据库或日志文件。此信息将不会漫游，并且使用计算机的任何人都可以使用。
.常量 CSIDL_WINDOWS, "36", 公开, Windows目录或SYSROOT。这对应于％windir％或％SYSTEMROOT％环境变量。典型路径是C:\Windows。
.常量 CSIDL_SYSTEM, "37", 公开, Windows系统文件夹。典型路径是C:\Windows\System32。
.常量 CSIDL_PROGRAM_FILES, "38", 公开, 程序文件文件夹。典型的路径是C:\Program Files。
.常量 CSIDL_MYPICTURES, "39", 公开, 用作映像文件的公共存储库的文件系统目录。典型路径是C:\Documents and Settings\用户名\My Documents\My Pictures。
.常量 CSIDL_PROFILE, "40", 公开, 用户的配置文件文件夹。典型的路径是C:\Users\username。应用程序不应在此级别创建文件或文件夹；他们应该将其数据放在CSIDL_APPDATA或CSIDL_LOCAL_APPDATA所引用的位置下。但是，如果要创建新的“已知文件夹”，则由CSIDL_PROFILE引用的配置文件根目录是合适的。
.常量 CSIDL_SYSTEMX86, "41", 公开, x86 system directory on RISC
.常量 CSIDL_PROGRAM_FILESX86, "42", 公开, x86 C:\Program Files on RISC
.常量 CSIDL_PROGRAM_FILES_COMMON, "43", 公开, 跨应用程序共享的组件的文件夹。典型路径是C:\Program Files\Common。仅对Windows XP有效。
.常量 CSIDL_PROGRAM_FILES_COMMONX86, "44", 公开, x86 Program Files\Common on RISC
.常量 CSIDL_COMMON_TEMPLATES, "45", 公开, 包含可供所有用户使用的模板的文件系统目录。典型的路径是C:\Documents and Settings\All Users\Templates。
.常量 CSIDL_COMMON_DOCUMENTS, "46", 公开, 文件系统目录，其中包含所有用户通用的文档。典型的路径是C:\Documents and Settings\All Users\Documents。
.常量 CSIDL_COMMON_ADMINTOOLS, "47", 公开, 包含计算机所有用户的管理工具的文件系统目录。All Users\Start Menu\Programs\Administrative Tools
.常量 CSIDL_ADMINTOOLS, "48", 公开, 用于存储单个用户的管理工具的文件系统目录。MMC将自定义的控制台保存到此目录，并且将与用户漫游。<user name>\Start Menu\Programs\Administrative Tools
.常量 CSIDL_CONNECTIONS, "49", 公开, 表示网络连接的虚拟文件夹，其中包含网络和拨号连接。
.常量 ERROR_FILE_NOT_FOUND, "2", , 系统找不到指定的文件。 
.常量 GA_PARENT, "1", , 检索父窗口。这不包括所有者，与GetParent函数一样。
.常量 GA_ROOT, "2", , 通过遍历父窗口链来检索根窗口。
.常量 GA_ROOTOWNER, "3", , 通过遍历GetParent返回的父窗口和所有者窗口的链来检索拥有的根窗口。
.常量 MOD_ALT, "1", 公开, 功能键_Alt
.常量 MOD_CONTROL, "2", 公开, 功能键_Ctrl
.常量 MOD_SHIFT, "4", 公开, 功能键_Shift
.常量 VK_SHIFT, "16"
.常量 VK_CONTROL, "17"
.常量 VK_MENU, "18"
.常量 VK_DIVIDE, "111", , 表示键盘上的 "/" 键。
.常量 LB_FINDSTRING, "399", , 在列表框中查找匹配字符串(忽略大小写)
.常量 LB_FINDSTRINGEXACT, "418", , 用于列表框中查找字符串(忽略大小写),与LB_FINDSTRING不同,本消息必须整个字符串相同
.常量 SB_SETTEXTA, "1025"
.常量 SB_GETTEXTA, "1026"
.常量 SB_GETTEXTLENGTHA, "1027"
.常量 SB_GETTEXT, "1037"
.常量 SB_SETBKCOLOR, "8193"
.常量 EDD_GET_DEVICE_INTERFACE_NAME, "1", , 检索 GUID_DEVINTERFACE_MONITOR 的设备接口名称
.常量 ENUM_CURRENT_SETTINGS, "-1", , 检索显示设备的当前设置。
.常量 ENUM_REGISTRY_SETTINGS, "-2", , 检索当前存储在注册表中的显示设备的设置。
.常量 WM_SETTEXT, "12", , 应用程序发送此消息来设置一个窗口的文本
.常量 WM_CLOSE, "16", , 当一个窗口或应用程序要关闭时发送一个信号
.常量 WM_QUIT, "18", , 用来结束程序运行或当程序调用postquitmessage函数
.常量 WM_FONTCHANGE, "29", , 应用程序在更改字体资源池后向系统中的所有顶级窗口发送WM_FONTCHANGE消息。
.常量 鼠标指针_标准型, "32512", 公开, 标准的箭头IDC_ARROW
.常量 鼠标指针_文本编辑型, "32513", 公开, 文本编辑IDC_IBEAM
.常量 鼠标指针_沙漏型, "32514", 公开, 沙漏IDC_WAIT
.常量 鼠标指针_十字型, "32515", 公开, 十字光标IDC_CROSS
.常量 鼠标指针_UPARROW, "32516", 公开, 向上垂直箭头IDC_UPARROW
.常量 鼠标指针_SIZENWSE, "32642", 公开, 双箭头指向西北和东南IDC_SIZENWSE
.常量 鼠标指针_SIZENESW, "32643", 公开, 双箭头指向东北和西南IDC_SIZENESW
.常量 鼠标指针_SIZEWE, "32644", 公开, 双箭头指向西和东IDC_SIZEWE
.常量 鼠标指针_SIZENS, "32645", 公开, 双箭头指向南北IDC_SIZENS
.常量 鼠标指针_四向箭头, "32646", 公开, 四向箭头指向东、西、南、北IDC_SIZEALL
.常量 鼠标指针_禁止型, "32648", 公开, 禁止圈IDC_NO
.常量 鼠标指针_手型, "32649", 公开, 手型IDC_HAND
.常量 鼠标指针_APPSTARTING, "32650", 公开, 标准的箭头和小沙漏IDC_APPSTARTING
.常量 鼠标指针_帮助, "32651", 公开, 箭头和问号IDC_HELP
.常量 HOOK状态_成功, "0", 公开
.常量 HOOK状态_修改内存保护失败, "1", 公开
.常量 HOOK状态_已HOOK, "2", 公开, 如果需要继续HOOK请先卸载
.常量 HOOK状态_欲HOOK地址为0, "3", 公开, 欲HOOK地址不能为0
.常量 HOOK状态_读取内存失败, "4", 公开, 请检查打开进程权限
.常量 HOOK状态_写入内存失败, "5", 公开, 请检查打开进程权限
.常量 HOOK状态_申请远程内存失败, "6", 公开
.常量 CF_TEXT, "1", 公开, 文字格式。每行以回车/换行（CR-LF）组合结束。空字符表示数据的结尾。对ANSI文本使用此格式。
.常量 CF_BITMAP, "2", 公开, 位图的句柄（HBITMAP）
.常量 CF_METAFILEPICT, "3", 公开, 处理由METAFILEPICT结构定义的图元文件图片格式。通过动态数据交换（DDE）传递CF_METAFILEPICT句柄时，负责删除【HMEM】的应用程序也应该释放CF_METAFILEPICT句柄引用的元文件。
.常量 CF_SYLK, "4", 公开, Microsoft符号链接（SYLK）格式。
.常量 CF_DIF, "5", 公开, 软件艺术数据交换格式。
.常量 CF_TIFF, "6", 公开, 标记图像文件格式。
.常量 CF_OEMTEXT, "7", 公开, 文字格式包含OEM字符集中的字符。每行以回车/换行（CR-LF）组合结束。空字符表示数据的结尾。
.常量 CF_DIB, "8", 公开, 一个包含BITMAPINFO结构的内存对象，后跟位图位。
.常量 CF_PALETTE, "9", 公开, 处理调色板。每当应用程序将数据放置在依赖于或假定调色板的剪贴板中时，它也应将调色板放在剪贴板上。如果剪贴板包含CF_PALETTE（逻辑调色板）格式的数据，则应用程序应使用SelectPalette和RealizePalette函数来实现（比较）剪贴板中与该逻辑调色板的任何其他数据。当显示剪贴板数据时，Windows剪贴板始终将剪贴板上的任何对象用作CF_PALETTE格式的当前调色板。
.常量 CF_PENDATA, "10", 公开, 用于Pen Computing的Microsoft Windows笔的扩展数据。
.常量 CF_RIFF, "11", 公开, 表示音频数据比CF_WAVE标准波形格式更复杂。
.常量 CF_WAVE, "12", 公开, 以诸如11 kHz或22 kHz脉冲编码调制（PCM）的标准波形格式之一表示音频数据。
.常量 CF_UNICODETEXT, "13", 公开, 仅Windows NT： Unicode文字格式。每行以回车/换行（CR-LF）组合结束。空字符表示数据的结尾。
.常量 CF_ENHMETAFILE, "14", 公开, 增强图元文件的句柄（HENHMETAFILE）。
.常量 CF_HDROP, "15", 公开, 类型为HDROP的句柄，用于标识文件列表。应用程序可以通过将句柄传递给DragQueryFile函数来检索有关文件的信息。
.常量 CREATE_SUSPENDED, "4", , 新进程的主线程在挂起状态下创建，并且直到调用ResumeThread函数才运行。
.常量 EXTENDED_STARTUPINFO_PRESENT, "524288", , 该进程是使用扩展启动信息创建的，lpStartupInfo参数指定一个STARTUPINFOEX结构。
.常量 PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, "131072", , lpValue参数是一个指向进程句柄的指针，该句柄使用而不是调用进程作为正在创建的进程的父进程。要使用的进程必须具有PROCESS_CREATE_PROCESS访问权限。
.常量 CREATE_NEW, "1", , 创建一个新文件。如果指定的文件已经存在，该函数将失败。
.常量 CREATE_ALWAYS, "2", , 创建一个新文件。该函数覆盖该文件（如果存在）。
.常量 SHCNE_ASSOCCHANGED, "134217728", , 修改文件关联
.常量 SHCNF_IDLIST, "0"
.常量 MAX_PATH, "260", 公开, 编译器所支持的最长全路径名的长度
.常量 ES_CONTINUOUS, "2147483648", , 通知系统，被设置的状态应该保持有效，直到下一个调用使用。
.常量 ES_SYSTEM_REQUIRED, "1", , 通过重置系统空闲计时器来强制系统进入工作状态。
.常量 ES_DISPLAY_REQUIRED, "2", , 通过重置显示器空闲计时器来强制显示器开启。
.常量 SPI_GETKEYBOARDSPEED, "10", , 检索键盘重复速度设置，该值的范围是从 0 (大约 2.5 次每秒重复) 到 31 (大约每秒 30 次重复) 。 实际重复率取决于硬件，可能与线性比例相差多达 20%。 pvParam 参数必须指向接收设置的 DWORD 变量。
.常量 SPI_SETKEYBOARDSPEED, "11", , 设置键盘重复速度设置。 uiParam 参数必须指定介于 0 (大约每秒 2.5 次重复) 到 31 (大约每秒 30 次重复) 范围内的值。 实际重复率取决于硬件，可能与线性比例相差多达 20%。 如果 uiParam 大于 31，则 参数设置为 31。
.常量 SPI_GETSCREENSAVEACTIVE, "16", , 确定是否启用屏幕保存。如果启用了屏幕保护，则pvParam参数必须指向一个BOOL变量，该变量将接收TRUE，否则，则返回FALSE。
.常量 SPI_SETSCREENSAVEACTIVE, "17", , 设置屏幕保护程序的状态。 uiParam参数指定TRUE激活屏幕保存，或FALSE取消激活屏幕保存。
.常量 SPI_GETKEYBOARDDELAY, "22", , 检索键盘重复延迟设置，该值范围为 0 (大约 250 毫秒延迟) 到 3 (大约 1 秒延迟) 。 与每个值关联的实际延迟可能因硬件而异。 pvParam 参数必须指向接收设置的整数变量。
.常量 SPI_SETKEYBOARDDELAY, "23", , 设置键盘重复延迟设置。 uiParam 参数必须指定 0、1、2 或 3，其中 0 设置最短延迟约 250 毫秒) ，3 设置最长延迟 (大约 1 秒) 。 与每个值关联的实际延迟可能因硬件而异。
.常量 SPI_GETMOUSESPEED, "112", , 检索当前鼠标速度。鼠标速度根据鼠标移动的距离确定指针将移动多远。的pvParam参数必须指向其接收之间的范围内的值的整数1（最慢）和20（最快）。默认值为 10。该值可以由最终用户使用鼠标控制面板应用程序设置，也可以由应用程序使用SPI_SETMOUSESPEED 设置。
.常量 SPI_SETMOUSESPEED, "113", , 设置当前鼠标速度。的pvParam参数之间的整数1（最慢）和20（最快）。默认值为 10。此值通常使用鼠标控制面板应用程序设置。
.常量 NOTIFY_FOR_THIS_SESSION, "0"
.常量 NOTIFY_FOR_ALL_SESSIONS, "1"
.常量 WTS_CONSOLE_CONNECT, "1"
.常量 WTS_CONSOLE_DISCONNECT, "2"
.常量 WTS_REMOTE_CONNECT, "3"
.常量 WTS_REMOTE_DISCONNECT, "4"
.常量 WTS_SESSION_LOGON, "5"
.常量 WTS_SESSION_LOGOFF, "6"
.常量 WTS_SESSION_LOCK, "7"
.常量 WTS_SESSION_UNLOCK, "8"
.常量 WTS_SESSION_REMOTE_CONTROL, "9"
.常量 WTS_SESSION_CREATE, "10"
.常量 WTS_SESSION_TERMINATE, "11"
.常量 TBSTATE_CHECKED, "1", , 该按钮具有TBSTYLE_CHECK样式，正在被单击。
.常量 TBSTATE_PRESSED, "2", , 单击该按钮。
.常量 TBSTATE_ENABLED, "4", , 该按钮接受用户输入。没有此状态的按钮显示为灰色。
.常量 TBSTATE_HIDDEN, "8", , 该按钮不可见，无法接收用户输入。
.常量 TBSTATE_INDETERMINATE, "16", , 该按钮为灰色。
.常量 TBSTATE_WRAP, "32", , 该按钮后跟一个换行符。该按钮还必须具有TBSTATE_ENABLED状态。
.常量 MAX_PREFERRED_LENGTH, "-1"
.常量 IDLE_PRIORITY_CLASS, "64"
.常量 REALTIME_PRIORITY_CLASS, "256"
.常量 THREAD_QUERY_INFORMATION, "64", , 需要从线程对象读取某些信息
.常量 THREAD_ALL_ACCESS, "2032639", , 线程对象的所有可能的访问权限
.常量 ThreadBasicInformation, "0"
.常量 ThreadQuerySetWin32StartAddress, "9"
.常量 THREAD_PRIORITY_TIME_CRITICAL, "15"
.常量 SHCNE_DELETE, "4"
.常量 SHCNF_PATH, "1"
.常量 NIM_ADD, "0"
.常量 NIM_MODIFY, "1"
.常量 NIM_DELETE, "2"
.常量 NIM_SETFOCUS, "3"
.常量 NIM_SETVERSION, "4"
.常量 ABM_GETSTATE, "4"
.常量 ABM_GETTASKBARPOS, "5"
.常量 LOCALE_STHOUSAND, "15", , 用于分隔小数点左边的数字组的字符。此字符串允许的最大字符数为4。
.常量 LOCALE_ITIME, "35"
.常量 LOCALE_INVARIANT, "127", 公开, 用于固定区域设置的语言。
.常量 LOCALE_USER_DEFAULT, "1024", , 当前用户的默认区域设置。
.常量 WDA_NONE, "0", , 对显示窗口的位置没有任何限制。
.常量 WDA_MONITOR, "1", , 窗口内容仅显示在监视器上。在其他任何地方，该窗口均不显示任何内容。
.常量 OFASI_EDIT, "1", , 选择一个项目并将其名称置于编辑模式。正被选择的单个项目时，才能使用该标志。对于多个项目选择，将忽略它。
.常量 OFASI_OPENDESKTOP, "2", , 在桌面上而不是在Windows资源管理器窗口中选择一个或多个项目。请注意，如果在打开的窗口后遮盖了桌面，则该桌面将不可见。
.常量 MAPVK_VK_TO_VSC, "0", , 这个uCode参数是一个虚拟密钥代码，并转换为扫描代码。如果它是一个虚拟钥匙代码，不区分左右两侧的钥匙，则返回左侧扫描代码。如果没有转换，则函数返回0。
.常量 MAPVK_VSC_TO_VK, "1", , 这个uCode参数是一个扫描代码，它被转换成一个虚拟键代码，不区分左键和右键。如果没有转换，则函数返回0。
.常量 MAPVK_VK_TO_CHAR, "2", , 这个uCode参数是一个虚拟键代码，它被转换成返回值低位字中的非移位字符值。死键（音调符号）通过设置返回值的高位来指示。如果没有转换，则函数返回0。
.常量 MAPVK_VSC_TO_VK_EX, "3", , 这个uCode参数是一个扫描代码，它被转换成一个虚拟键代码，用于区分左键和右键。如果没有转换，则函数返回0。
.常量 INVALID_FILE_SIZE, "-1"
.常量 PropertyTagExifDTOrig, "36867", , 原来的日期和时间
.常量 INVALID_SOCKET, "-1", , 可以通过调用 WSAGetLastError 检索特定的错误代码。
.常量 EVENT_ALL_ACCESS, "2031619", , 指定事件对象的所有可能的访问标志
.常量 TOKEN_ASSIGN_PRIMARY, "1", , 需要将主令牌附加到进程。完成此任务还需要 SE_ASSIGNPRIMARYTOKEN_NAME 权限。
.常量 TOKEN_DUPLICATE, "2", , 需要复制访问令牌。
.常量 TOKEN_QUERY, "8", , 查询访问令牌所必需。
.常量 TOKEN_QUERY_SOURCE, "16", , 需要查询访问令牌的源。
.常量 TOKEN_ADJUST_PRIVILEGES, "32", , 需要启用或禁用访问令牌中的权限。
.常量 TOKEN_ADJUST_DEFAULT, "128", , 需要更改访问令牌的默认所有者、主要组或 DACL。
.常量 TOKEN_ADJUST_SESSIONID, "256", , 需要调整访问令牌的会话 ID。需要 SE_TCB_NAME 权限。
.常量 TOKEN_ALL_ACCESS, "983551", , 结合STANDARD_RIGHTS_REQUIRED标准访问权限和令牌的所有个人访问权限。
.常量 SE_PRIVILEGE_ENABLED, "2", , 该函数启用特权
.常量 SE_GROUP_USE_FOR_DENY_ONLY, "16", , 具有此属性的 SID 是仅拒绝 SID。当系统执行访问检查时，它会检查适用于 SID 的拒绝访问的 ACE，但它会忽略 SID 的允许访问的 ACE。如果设置了此属性，则不会设置 SE_GROUP_ENABLED 属性并且无法重新启用 SID。
.常量 SecurityImpersonation, "2", , 服务器可以模拟客户端在本地系统上的安全上下文。
.常量 TokenPrimary, "1", , 显示主令牌。
.常量 EWX_LOGOFF, "0", , 关闭在调用ExitWindowsEx函数的进程的安全上下文中运行的所有进程。然后它关闭用户。
.常量 EWX_SHUTDOWN, "1", , 将系统关闭到可以安全关闭电源的位置。所有文件缓冲区已刷新到磁盘，所有正在运行的进程已停止。
.常量 EWX_REBOOT, "2", , 关闭系统，然后重新启动系统。
.常量 EWX_FORCE, "4", , 强制进程终止。
.常量 EWX_POWEROFF, "8", , 关闭系统并关闭电源。系统必须支持关机功能。
.常量 DESKTOP_CREATEWINDOW, "2", , 在桌面上创建窗口所必需。
.常量 SHERB_NOCONFIRMATION, "1", , 不会显示确认删除对象的对话框。
.常量 SHERB_NOPROGRESSUI, "2", , 不会显示任何指示进度的对话框。
.常量 SHERB_NOSOUND, "4", , 操作完成后，将不会播放声音。
.常量 SHCONTF_FOLDERS, "32", , 在枚举中包括属于文件夹的项。
.常量 SHCONTF_NONFOLDERS, "64", , 包括枚举中不属于文件夹的项。
.常量 SHCONTF_INCLUDEHIDDEN, "128", , 在枚举中包括隐藏项。
.常量 SHGDN_NORMAL, "0", , 全名。该名称相对于桌面，而不是特定文件夹。此名称用于常规显示。
.常量 PID_DISPLACED_DATE, "3", , 删除日期
.常量 BIF_EDITBOX, "16", , 在浏览对话框中包括一个编辑控件，使用户可以键入项目的名称。
.常量 BIF_NEWDIALOGSTYLE, "64", , 使用新的用户界面。设置此标志为用户提供了一个可以调整大小的较大对话框。该对话框具有几个新功能，包括：对话框内的拖放功能，重新排序，快捷菜单，新文件夹，删除和其他快捷菜单命令。
.常量 BIF_BROWSEINCLUDEFILES, "16384", , 浏览对话框显示文件和文件夹。
.常量 BFFM_INITIALIZED, "1", , 该对话框已完成初始化。
.常量 BFFM_SETSELECTIONW, "1127", , 指定要选择的文件夹的路径。路径可以指定为字符串或PIDL。
.常量 SIGDN_DESKTOPABSOLUTEPARSING, "-2147319808", , 返回相对于桌面的解析名称。
.常量 IShellFolder_BindToObject, "5", , 检索处理程序，通常是为特定项目实现IShellFolder的Shell文件夹对象。控制处理程序构造的可选参数在绑定上下文中传递。
.常量 IShellFolder_EnumObjects, "4", , 通过创建项目标识符枚举对象并返回其IEnumIDList接口，使客户端能够确定文件夹的内容。然后，可以使用该接口支持的方法来枚举文件夹的内容。
.常量 IShellFolder_GetDisplayNameOf, "11", , 检索指定文件对象或子文件夹的显示名称。
.常量 IShellFolder2_GetDetailsEx, "17", , 获取有关Shell文件夹中项目的详细信息，该信息由属性集标识符（FMTID）和属性标识符（PID）标识。
.常量 IEnumIDList_Next, "3", , 检索枚举序列中指定数量的项目标识符，并以检索到的项目数提高当前位置。
.常量 IShellItem_BindToHandler, "3", , 绑定到处理程序 ID 值 (BHID) 指定的项目的处理程序。
.常量 IShellItem_GetParent, "4", , 获取 IShellItem 对象的父级。
.常量 IShellItem_GetDisplayName, "5", , 获取IShellItem对象的显示名称。
.常量 IShellItem_GetAttributes, "6", , 获取 IShellItem 对象的一组请求属性。
.常量 IShellItem_Compare, "7", , 比较两个 IShellItem 对象。
.常量 AF_UNSPEC, "0", , 返回与启用了IPv4或IPv6的适配器关联的IPv4和IPv6地址。
.常量 GAA_FLAG_SKIP_ANYCAST, "2", , 不要返回IPv6任播地址。
.常量 GAA_FLAG_INCLUDE_GATEWAYS, "128", , 返回默认网关的地址。
.常量 MAX_ADAPTER_ADDRESS_LENGTH, "8", , 指定适配器的硬件地址。
.常量 INET_ADDRSTRLEN, "22", , 32位ipv4地址所使用内存长度的最大值。
.常量 INET6_ADDRSTRLEN, "65", , 128位ipv6地址所使用内存长度的最大值。
.常量 IfOperStatusUp, "1", 公开, 接口已启动，并且可以传递数据包。
.常量 IfOperStatusDown, "2", 公开, 接口处于关闭状态，并且无法传递数据包。该 IfOperStatusDown状态有两个含义，这取决于的值 AdminStatus构件。如果AdminStatus未设置为 NET_IF_ADMIN_STATUS_DOWN且ifOperStatus设置为 IfOperStatusDown，则假定接口上存在故障条件。如果 AdminStatus设置为IfOperStatusDown，则 ifOperStatus通常也将设置为 IfOperStatusDown或IfOperStatusNotPresent 并且接口上不一定存在故障。
.常量 IfOperStatusTesting, "3", 公开, 接口处于测试模式。
.常量 IfOperStatusUnknown, "4", 公开, 接口的运行状态未知。
.常量 IfOperStatusDormant, "5", 公开, 该接口实际上不是在传递数据包的条件下（它不处于运行状态），而是处于挂起状态，正在等待某些外部事件。对于按需接口，此新状态标识接口正在等待事件以将其置于IfOperStatusUp状态的情况。
.常量 IfOperStatusNotPresent, "6", 公开, 对IfOperStatusDown状态的一种改进，它指示相关的接口已关闭，特别是因为受管系统中不存在某些组件（通常是硬件组件）。
.常量 IfOperStatusLowerLayerDown, "7", 公开, 对IfOperStatusDown状态的改进。此新状态指示此接口在一个或多个其他接口之上运行，并且该接口已关闭，特别是因为这些下层接口中的一个或多个已关闭。
.常量 KeyBasicInformation, "0", , 提供了KEY_BASIC_INFORMATION结构。
.常量 KeyNodeInformation, "1", , 提供了KEY_NODE_INFORMATION结构。
.常量 KeyFullInformation, "2", , 提供了KEY_FULL_INFORMATION结构。
.常量 KeyNameInformation, "3", , 提供了KEY_NAME_INFORMATION结构。
.常量 KeyCachedInformation, "4", , 提供了KEY_CACHED_INFORMATION结构。
.常量 KeyFlagsInformation, "5", , 保留供系统使用。
.常量 KeyVirtualizationInformation, "6", , 提供了KEY_VIRTUALIZATION_INFORMATION结构。
.常量 KeyHandleTagsInformation, "7", , 保留供系统使用。
.常量 MaxKeyInfoClass, "8", , 此枚举类型的最大值。
.常量 IOCTL_STORAGE_GET_DEVICE_NUMBER, "2953344", , 检索设备类型，设备号，对于可分区的设备，检索设备的分区号。
.常量 GET_MODULE_HANDLE_EX_FLAG_PIN, "1", , 无论FreeLibrary被调用多少次，模块都会保持加载状态，直到进程终止。此选项不能与 GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT 一起使用。
.常量 GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT, "2", , 模块的引用计数不递增。此选项等效于GetModuleHandle的行为 。不要将检索到的模块句柄传递给FreeLibrary函数；这样做会导致 DLL 过早地被取消映射。此选项不能与 GET_MODULE_HANDLE_EX_FLAG_PIN 一起使用。
.常量 GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS, "4", , 所述lpModuleName参数是在该模块中的地址。
.常量 VK_LBUTTON, "1", , 鼠标左键
.常量 VK_RBUTTON, "2", , 鼠标右键
.常量 KEYCODE_LBUTTON, "1", 公开, 左键
.常量 KEYCODE_RBUTTON, "2", 公开, 右键
.常量 KEYCODE_MBUTTON, "3", 公开, 中键
.常量 KEYCODE_WHEEL, "4", 公开, 滚轮
.常量 KEYCODE_SIDEKEYUP, "5", 公开, 侧键上
.常量 KEYCODE_SIDEKEYDOWN, "6", 公开, 侧键下
.常量 KEYSTATUS_DOWN, "1", 公开, 按下
.常量 KEYSTATUS_UP, "2", 公开, 弹起
.常量 KEYSTATUS_DBLCLK, "3", 公开, 双击
.常量 KEYSTATUS_WHEELUP, "4", 公开, 滚轮往上
.常量 KEYSTATUS_WHEELDOWN, "5", 公开, 滚轮往下
.常量 XBUTTON1, "1", , 按下或松开第一个 X 按钮。
.常量 XBUTTON2, "2", , 按下或松开第二个 X 按钮。
.常量 WHEEL_DELTA, "120", , 正值表示滚轮向前旋转，远离用户；负值表示轮子向后旋转，朝向用户。
.常量 FO_MOVE, "1", , 将pFrom 中指定的文件移动到pTo 中指定的位置。
.常量 FO_COPY, "2", , 将pFrom成员中指定的文件复制到pTo成员中指定的位置。
.常量 FO_DELETE, "3", , 删除pFrom 中指定的文件。
.常量 FO_RENAME, "4", , 重命名pFrom 中指定的文件。您不能使用此标志通过单个函数调用重命名多个文件。请改用FO_MOVE。
.常量 FOF_SILENT, "4", , 不显示进度对话框。
.常量 FOF_RENAMEONCOLLISION, "8", , 如果目标名称中已存在具有目标名称的文件，则在移动、复制或重命名操作中为正在操作的文件指定新名称。
.常量 FOF_NOCONFIRMATION, "16", , 对显示的任何对话框回答“全部是”。
.常量 FOF_ALLOWUNDO, "64", , 如果可能，保留撤消信息。
.常量 FOF_SIMPLEPROGRESS, "256", , 显示进度对话框，但在操作时不显示单个文件名。
.常量 FOF_NOCONFIRMMKDIR, "512", , 如果操作需要创建新目录，请不要要求用户确认创建新目录。
.常量 FOF_NOERRORUI, "1024", , 如果发生错误，不要向用户显示对话框。
.常量 ProcessBasicInformation, "0", , 检索指向可用于确定指定进程是否正在调试的 PEB 结构的指针，以及系统用于标识指定进程的唯一值。
.常量 ProcessDebugPort, "7", , 检索DWORD_PTR值，该值是进程调试器的端口号。非零值表示进程正在环 3 调试器的控制下运行。
.常量 ProcessWow64Information, "26", , 确定进程是否在 WOW64 环境中运行（WOW64 是 x86 模拟器，它允许基于 Win32 的应用程序在 64 位 Windows 上运行）。
.常量 ProcessImageFileName, "27", , 检索包含进程图像文件名称的UNICODE_STRING值。
.常量 ProcessBreakOnTermination, "29", , 检索一个ULONG值，该值指示该过程是否被认为是关键的。
.常量 ProcessImageFileNameWin32, "43"
.常量 _WIN32_WINNT_NT4, "1024", , Windows NT 4.0
.常量 _WIN32_WINNT_WIN2K, "1280", , Windows 2000
.常量 _WIN32_WINNT_WINXP, "1281", 公开, Windows XP
.常量 _WIN32_WINNT_WS03, "1282", , Windows Server 2003
.常量 _WIN32_WINNT_WIN6, "1536", , Windows Vista
.常量 _WIN32_WINNT_VISTA, "1536", 公开, Windows Vista
.常量 _WIN32_WINNT_WS08, "1536", , Windows Server 2008
.常量 _WIN32_WINNT_LONGHORN, "1536", , Windows Vista
.常量 _WIN32_WINNT_WIN7, "1537", 公开, Windows 7
.常量 _WIN32_WINNT_WIN8, "1538", 公开, Windows 8
.常量 _WIN32_WINNT_WINBLUE, "1539", 公开, Windows 8.1
.常量 _WIN32_WINNT_WINTHRESHOLD, "2560", , Windows 10
.常量 _WIN32_WINNT_WIN10, "2560", 公开, Windows 10
.常量 IUnknown_QueryInterface, "0", , 从 COM 对象请求指向指定接口的指针。
.常量 IPersistFile_Load, "5", , 打开指定的文件并从文件内容初始化一个对象。
.常量 IShellLinkW_GetPath, "3", , 获取 Shell 链接对象目标的路径和文件名。
.常量 IShellLinkW_GetIDList, "4", , 获取 Shell 链接对象目标的项标识符列表。
.常量 IShellLinkW_SetIDList, "5", , 设置指向 Shell 链接对象的项标识符列表 (PIDL) 的指针。
.常量 IShellLinkW_GetDescription, "6", , 获取 Shell 链接对象的描述字符串。
.常量 IShellLinkW_SetDescription, "7", , 设置 Shell 链接对象的描述。描述可以是任何应用程序定义的字符串。
.常量 IShellLinkW_GetWorkingDirectory, "8", , 获取 Shell 链接对象的工作目录的名称。
.常量 IShellLinkW_SetWorkingDirectory, "9", , 设置 Shell 链接对象的工作目录的名称。
.常量 IShellLinkW_GetArguments, "10", , 获取与 Shell 链接对象关联的命令行参数。
.常量 IShellLinkW_SetArguments, "11", , 设置 Shell 链接对象的命令行参数。
.常量 IShellLinkW_GetHotkey, "12", , 获取 Shell 链接对象的键盘快捷键（热键）。
.常量 IShellLinkW_SetHotkey, "13", , 为 Shell 链接对象设置键盘快捷键（热键）。
.常量 IShellLinkW_GetShowCmd, "14", , 获取 Shell 链接对象的显示命令。
.常量 IShellLinkW_SetShowCmd, "15", , 设置 Shell 链接对象的显示命令。show 命令设置窗口的初始显示状态。
.常量 IShellLinkW_GetIconLocation, "16", , 获取 Shell 链接对象图标的位置（路径和索引）。
.常量 IShellLinkW_SetIconLocation, "17", , 为 Shell 链接对象设置图标的位置（路径和索引）。
.常量 IShellLinkW_SetRelativePath, "18", , 设置 Shell 链接对象的相对路径。
.常量 IShellLinkW_Resolve, "19", , 尝试查找 Shell 链接的目标，即使它已被移动或重命名。
.常量 IShellLinkW_SetPath, "20", , 为 Shell 链接对象的目标设置路径和文件名。
.常量 STGM_READ, "0", , 文件将以只读访问权限创建或打开。
.常量 IPersistFile_Save, "6", , 将对象的副本保存到指定文件。
.常量 HOTKEYF_SHIFT, "1", 公开, SHIFT 键
.常量 HOTKEYF_CONTROL, "2", 公开, CTRL 键
.常量 HOTKEYF_ALT, "4", 公开, ALT键
.常量 HOTKEYF_EXT, "8", 公开, 扩展键
.常量 SHGFI_PIDL, "8", , 指示pszPath是ITEMIDLIST结构的地址而不是路径名。
.常量 SHGFI_DISPLAYNAME, "512", , 检索文件的显示名称，即它在 Windows 资源管理器中显示的名称。
.常量 IMMDeviceEnumerator_EnumAudioEndpoints, "3", , EnumAudioEndpoints 方法生成满足指定条件的音频端点设备的集合。
.常量 IMMDeviceEnumerator_GetDefaultAudioEndpoint, "4", , GetDefaultAudioEndpoint 方法检索指定数据流方向和角色的默认音频端点。
.常量 IMMDeviceEnumerator_GetDevice, "5", , GetDevice 方法检索由端点 ID 字符串标识的音频端点设备。
.常量 IMMDeviceEnumerator_RegisterEndpointNotificationCallback, "6", , RegisterEndpointNotificationCallback 方法注册客户端的通知回调接口。
.常量 IMMDeviceEnumerator_UnregisterEndpointNotificationCallback, "7", , UnregisterEndpointNotificationCallback 方法删除客户端在先前调用 IMMDeviceEnumerator::RegisterEndpointNotificationCallback 方法时注册的通知接口的注册。
.常量 IMMDevice_Activate, "3", , Activate 方法创建具有指定接口的 COM 对象。
.常量 IMMDevice_OpenPropertyStore, "4", , OpenPropertyStore 方法检索设备属性存储的接口。
.常量 IMMDevice_GetId, "5", , 方法检索标识音频端点设备的端点 ID 字符串。
.常量 IMMDevice_GetState, "6", , GetState 方法检索当前设备状态。
.常量 IAudioEndpointVolume_RegisterControlChangeNotify, "3", , RegisterControlChangeNotify 方法注册客户端的通知回调接口。
.常量 IAudioEndpointVolume_UnregisterControlChangeNotify, "4", , UnregisterControlChangeNotify 方法删除客户端在之前调用 IAudioEndpointVolume::RegisterControlChangeNotify 方法时注册的客户端通知回调接口的注册。
.常量 IAudioEndpointVolume_GetChannelCount, "5", , GetChannelCount 方法获取音频流中进入或离开音频端点设备的通道数。
.常量 IAudioEndpointVolume_SetMasterVolumeLevel, "6", , SetMasterVolumeLevel 方法设置进入或离开音频端点设备的音频流的主音量级别（以分贝为单位）。
.常量 IAudioEndpointVolume_SetMasterVolumeLevelScalar, "7", , SetMasterVolumeLevelScalar 方法设置进入或离开音频端点设备的音频流的主音量级别。音量级别表示为范围从 0.0 到 1.0 的标准化的音频逐渐变细的值。
.常量 IAudioEndpointVolume_GetMasterVolumeLevel, "8", , GetMasterVolumeLevel 方法获取进入或离开音频端点设备的音频流的主音量级别（以分贝为单位）。
.常量 IAudioEndpointVolume_GetMasterVolumeLevelScalar, "9", , GetMasterVolumeLevelScalar 方法获取进入或离开音频端点设备的音频流的主音量级别。音量级别表示为范围从 0.0 到 1.0 的标准化的音频逐渐变细的值。
.常量 IAudioEndpointVolume_SetChannelVolumeLevel, "10", , SetChannelVolumeLevel 方法设置进入或离开音频端点设备的音频流的指定通道的音量级别（以分贝为单位）。
.常量 IAudioEndpointVolume_SetChannelVolumeLevelScalar, "11", , SetChannelVolumeLevelScalar 方法设置进入或离开音频端点设备的音频流中指定通道的规范化、音频逐渐变细的音量级别。
.常量 IAudioEndpointVolume_GetChannelVolumeLevel, "12", , GetChannelVolumeLevel 方法获取进入或离开音频端点设备的音频流中指定通道的音量级别（以分贝为单位）。
.常量 IAudioEndpointVolume_GetChannelVolumeLevelScalar, "13", , GetChannelVolumeLevelScalar 方法获取进入或离开音频端点设备的音频流的指定通道的规范化、音频逐渐变细的音量级别。
.常量 IAudioEndpointVolume_SetMute, "14", , SetMute 方法设置进入或离开音频端点设备的音频流的静音状态。
.常量 IAudioEndpointVolume_GetMute, "15", , GetMute 方法获取进入或离开音频端点设备的音频流的静音状态。
.常量 IAudioEndpointVolume_GetVolumeStepInfo, "16", , GetVolumeStepInfo 方法获取有关音量范围中当前步长的信息。
.常量 IAudioEndpointVolume_VolumeStepUp, "17", , VolumeStepUp 方法将进入或离开音频端点设备的音频流的音量级别递增一个步骤。
.常量 IAudioEndpointVolume_VolumeStepDown, "18", , VolumeStepDown 方法将进入或离开音频端点设备的音频流的音量级别递减一级。
.常量 IAudioEndpointVolume_QueryHardwareSupport, "19", , QueryHardwareSupport 方法查询音频端点设备的硬件支持功能。
.常量 IAudioEndpointVolume_GetVolumeRange, "20", , GetVolumeRange 方法获取进入或离开音频端点设备的音频流的音量范围（以分贝为单位）。
.常量 IAudioSessionManager_GetAudioSessionControl, "3", , GetAudioSessionControl 方法检索音频会话控件。
.常量 IAudioSessionManager_GetSimpleAudioVolume, "4", , GetSimpleAudioVolume 方法检索简单的音频音量控制。
.常量 ISimpleAudioVolume_SetMasterVolume, "3", , SetMasterVolume 方法设置音频会话的主音量级别。
.常量 ISimpleAudioVolume_GetMasterVolume, "4", , GetMasterVolume 方法检索音频会话的客户端音量级别。
.常量 ISimpleAudioVolume_SetMute, "5", , SetMute 方法设置音频会话的静音状态。
.常量 ISimpleAudioVolume_GetMute, "6", , GetMute 方法检索音频会话的当前静音状态。
.常量 DEFAULT_CHARSET, "1", , 枚举所有字符集中所有唯一命名的字体。
.常量 BITSPIXEL, "12", , , 每个像素的相邻颜色位数。
.常量 PLANES, "14", , , 颜色平面的数量。
.常量 SM_CXSCREEN, "0", , , 主显示器的屏幕宽度，以像素为单位。
.常量 SM_CYSCREEN, "1", , , 主显示器的屏幕高度，以像素为单位。
.常量 DEFAULT_PALETTE, "15", , , 默认调色板。该调色板由系统调色板中的静态颜色组成。
.常量 DIB_RGB_COLORS, "0", , , 颜色表应由文字红色、绿色、蓝色 (RGB) 值组成。
.常量 CRYPT_STRING_BASE64, "1", 公开, Base64，没有标头。
.常量 CRYPT_STRING_HEX, "4", 公开, 仅十六进制。
.常量 CRYPT_STRING_HEXRAW, "12", 公开, 一个原始的十六进制字符串。Windows Server 2003 和 Windows XP：  不支持此值。
.常量 CRYPT_STRING_NOCRLF, "1073741824", 公开, 不要将任何新行字符附加到编码字符串。默认行为是使用回车/换行 (CR/LF) 对 (0x0D/0x0A) 来表示新行。Windows Server 2003 和 Windows XP：  不支持此值。
.常量 CRYPT_STRING_NOCR, "2147483648", 公开, 仅对新行使用换行 (LF) 字符 (0x0A)。默认行为是使用 CR/LF 对 (0x0D/0x0A) 来表示新行。
.常量 COINIT_MULTITHREADED, "0", , 为多线程对象并发初始化线程。
.常量 COINIT_APARTMENTTHREADED, "2", , 为单元线程对象并发初始化线程（请参阅备注）。
.常量 COINIT_DISABLE_OLE1DDE, "4", , 为 OLE1 支持禁用 DDE。
.常量 COINIT_SPEED_OVER_MEMORY, "8", , 增加内存使用量以尝试提高性能。
.常量 FOS_OVERWRITEPROMPT, "2", , 保存文件时，在覆盖现有同名文件之前提示。这是“保存”对话框的默认值。
.常量 FOS_STRICTFILETYPES, "4", , 在“保存”对话框中，仅允许用户选择具有通过IFileDialog::SetFileTypes指定的文件扩展名之一的文件。
.常量 FOS_NOCHANGEDIR, "8", , 不要更改当前工作目录。
.常量 FOS_PICKFOLDERS, "32", , 显示一个打开对话框，提供文件夹而不是文件的选择。
.常量 FOS_FORCEFILESYSTEM, "64", , 确保返回的项目是文件系统项目 ( SFGAO_FILESYSTEM )。请注意，这不适用于IFileDialog::GetCurrentSelection返回的项目。
.常量 FOS_ALLNONSTORAGEITEMS, "128", , 使用户能够选择 Shell 命名空间中的任何项目，而不仅仅是具有SFGAO_STREAM或SFAGO_FILESYSTEM属性的项目。此标志不能与 FOS_FORCEFILESYSTEM 结合使用。
.常量 FOS_NOVALIDATE, "256", , 不要检查会阻止应用程序打开所选文件的情况，例如共享冲突或访问被拒绝错误。
.常量 FOS_ALLOWMULTISELECT, "512", , 使用户能够在打开的对话框中选择多个项目。请注意，设置此标志后，必须使用IFileOpenDialog接口来检索这些项目。
.常量 FOS_PATHMUSTEXIST, "2048", , 返回的项目必须位于现有文件夹中。这是默认值。
.常量 FOS_FILEMUSTEXIST, "4096", , 返回的项目必须存在。这是打开对话框的默认值。
.常量 FOS_CREATEPROMPT, "8192", , 如果保存对话框中返回的项目不存在，则提示创建。请注意，这实际上不会创建项目。
.常量 FOS_SHAREAWARE, "16384", , 如果应用程序打开文件时发生共享冲突，请通过OnShareViolation 回调应用程序以获取指导。该标志被 FOS_NOVALIDATE 覆盖。
.常量 FOS_NOREADONLYRETURN, "32768", , 不要返回只读项目。这是“保存”对话框的默认值。
.常量 FOS_NOTESTFILECREATE, "65536", , 不要测试“保存”对话框中指定的项目创建是否会成功。如果未设置此标志，则调用应用程序必须处理创建项目时发现的错误，例如拒绝访问。
.常量 FOS_HIDEMRUPLACES, "131072", , 隐藏用户最近打开或保存项目的位置列表。自 Windows 7 起不支持此值。
.常量 FOS_HIDEPINNEDPLACES, "262144", , 隐藏视图导航窗格中默认显示的项目。此标志通常与IFileDialog::AddPlace方法结合使用，以隐藏标准位置并将其替换为自定义位置。
.常量 FOS_NODEREFERENCELINKS, "1048576", , 不应将快捷方式视为其目标项。这允许应用程序打开 .lnk 文件而不是该文件的快捷方式。
.常量 FOS_OKBUTTONNEEDSINTERACTION, "2097152", , 仅当用户在视图中执行某些操作时才启用 OK 按钮。
.常量 FOS_DONTADDTORECENT, "33554432", , 不要将正在打开或保存的项目添加到最近的文档列表 ( SHAddToRecentDocs )。
.常量 FOS_FORCESHOWHIDDEN, "268435456", , 包括隐藏和系统项目。
.常量 FOS_DEFAULTNOMINIMODE, "536870912", , 指示“另存为”对话框应以展开模式打开。扩展模式是通过单击另存为对话框左下角的按钮来设置和取消设置的模式，单击时在浏览文件夹和隐藏文件夹之间切换。自 Windows 7 起不支持此值。
.常量 FOS_FORCEPREVIEWPANEON, "1073741824", , 向“打开”对话框指示应始终显示预览窗格。
.常量 FOS_SUPPORTSTREAMABLEITEMS, "2147483648", , 指示调用者正在将文件作为流 ( BHID_Stream )打开，因此无需下载该文件。
.常量 IShellItemArray_BindToHandler, "3", , 通过指定的处理程序绑定到一个对象。
.常量 IShellItemArray_GetPropertyStore, "4", , 获取属性存储。
.常量 IShellItemArray_GetPropertyDescriptionList, "5", , 获取外壳项目数组中项目的属性描述列表。
.常量 IShellItemArray_GetAttributes, "6", , 获取包含在 IShellItemArray 中的项目集的属性。
.常量 IShellItemArray_GetCount, "7", , 获取给定 IShellItem 数组中的项目数。
.常量 IShellItemArray_GetItemAt, "8", , 获取IShellItemArray 中给定索引处的项目。
.常量 IShellItemArray_EnumItems, "9", , 获取数组中项目的枚举数。
.常量 IModalWindow_Show, "3", , 启动模态窗口。
.常量 IFileDialog_SetFileTypes, "4", , 设置对话框可以打开或保存的文件类型。
.常量 IFileDialog_SetFileTypeIndex, "5", , 设置在对话框中选择的文件类型。
.常量 IFileDialog_GetFileTypeIndex, "6", , 获取当前选择的文件类型。
.常量 IFileDialog_Advise, "7", , 分配一个事件处理程序，用于侦听来自对话框的事件。
.常量 IFileDialog_Unadvise, "8", , 移除通过 IFileDialog::Advise 方法附加的事件处理程序。
.常量 IFileDialog_SetOptions, "9", , 设置标志来控制对话框的行为。
.常量 IFileDialog_GetOptions, "10", , 获取设置为控制对话框行为的当前标志。
.常量 IFileDialog_SetDefaultFolder, "11", , 如果最近使用的文件夹值不可用，则将使用的文件夹设置为默认值。
.常量 IFileDialog_SetFolder, "12", , 设置一个在对话框打开时始终选择的文件夹，无论以前的用户操作如何。
.常量 IFileDialog_GetFolder, "13", , 获取当前在对话框中选择的文件夹，或者，如果当前未显示对话框，则获取打开对话框时要选择的文件夹。
.常量 IFileDialog_GetCurrentSelection, "14", , 获取用户在对话框中的当前选择。
.常量 IFileDialog_SetFileName, "15", , 设置打开该对话框时出现在文件名编辑框中的文件名。
.常量 IFileDialog_GetFileName, "16", , 检索当前在对话框的文件名编辑框中输入的文本。
.常量 IFileDialog_SetTitle, "17", , 设置对话框的标题。
.常量 IFileDialog_SetOkButtonLabel, "18", , 设置打开或保存按钮的文本。
.常量 IFileDialog_SetFileNameLabel, "19", , 设置文件名编辑框旁边的标签文本。
.常量 IFileDialog_GetResult, "20", , 获取用户在对话框中所做的选择。
.常量 IFileDialog_AddPlace, "21", , 将文件夹添加到可供用户打开或保存项目的位置列表。
.常量 IFileDialog_SetDefaultExtension, "22", , 设置要添加到文件名的默认扩展名。
.常量 IFileDialog_Close, "23", , 关闭对话框。
.常量 IFileDialog_SetClientGuid, "24", , 使调用应用程序能够将 GUID 与对话框的持久状态相关联。
.常量 IFileDialog_ClearClientData, "25", , 指示对话框清除所有持久状态信息。
.常量 IFileDialog_SetFilter, "26", , SetFilter 从 Windows 7 开始不再可用。
.常量 IFileOpenDialog_GetResults, "27", , 在允许多选的对话框中获取用户的选择。
.常量 IFileOpenDialog_GetSelectedItems, "28", , 获取对话框中当前选定的项目。这些项目可能是视图中选择的项目，也可能是文件名编辑框中选择的文本。
.常量 IFileSaveDialog_SetSaveAsItem, "27", , 设置一个项目以用作“另存为”对话框中的初始条目。
.常量 IFileSaveDialog_SetProperties, "28", , 提供一个属性存储，用于定义要用于保存的项目的默认值。
.常量 IFileSaveDialog_SetCollectedProperties, "29", , 指定将在保存对话框中收集哪些属性。
.常量 IFileSaveDialog_GetProperties, "30", , 检索已保存项目或正在保存的项目的属性值集。
.常量 IFileSaveDialog_ApplyProperties, "31", , 使用 Shell 的复制引擎将一组属性应用于项目。
.常量 SIGDN_FILESYSPATH, "-2147123200", , 返回项目的文件系统路径（如果有）。只有报告SFGAO_FILESYSTEM 的项目才有文件系统路径。当项目没有文件系统路径时，对该项目的IShellItem::GetDisplayName调用将失败。在 UI 中，此名称在某些情况下适合向用户显示，但请注意，可能不会为所有项目指定该名称。
.常量 DISP_CHANGE_SUCCESSFUL, "0", , 设置更改成功。
.常量 DISP_CHANGE_RESTART, "1", , 必须重新启动计算机才能使图形模式工作。
.常量 DISP_CHANGE_FAILED, "-1", , 显示驱动程序在指定的图形模式下失败。
.常量 DISP_CHANGE_BADMODE, "-2", , 不支持图形模式。
.常量 DISP_CHANGE_NOTUPDATED, "-3", , 无法将设置写入注册表。
.常量 DISP_CHANGE_BADFLAGS, "-4", , 传入了一组无效的标志。
.常量 DISP_CHANGE_BADPARAM, "-5", , 传入了无效参数。这可能包括无效标志或标志组合。
.常量 DISP_CHANGE_BADDUALVIEW, "-6", , 设置更改不成功，因为系统支持 DualView。
.常量 SPIF_UPDATEINIFILE, "1", , 将新的系统范围参数设置写入用户配置文件。
.常量 SPIF_SENDCHANGE, "2", , 在更新用户配置文件后 广播WM_SETTINGCHANGE消息。
.常量 SPIF_SENDWININICHANGE, "2", , 与SPIF_SENDCHANGE相同。
.常量 INTERNET_OPEN_TYPE_PRECONFIG, "0", , 从注册表中检索代理或直接配置。
.常量 INTERNET_OPEN_TYPE_DIRECT, "1", , 在本地解析所有主机名。
.常量 INTERNET_OPEN_TYPE_PROXY, "3", , 除非提供代理绕过列表并且要解析的名称绕过代理，否则将请求传递给代理。在这种情况下，该函数使用 INTERNET_OPEN_TYPE_DIRECT。
.常量 INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY, "4", , 从注册表中检索代理或直接配置，并阻止使用启动 Microsoft JScript 或 Internet 安装程序 (INS) 文件。
.常量 FILE_BEGIN, "0", , 起点为零或文件的开头。
.常量 FILE_CURRENT, "1", , 起点是文件指针的当前值。
.常量 FILE_END, "2", , 起点是当前的文件结束位置。
.常量 HTTP_QUERY_CONTENT_LENGTH, "5", , 检索资源的大小（以字节为单位）。
.常量 HTTP_QUERY_FLAG_NUMBER, "536870912", , 对于值为数字的标头，以32位数字的形式返回数据，例如状态代码。
.常量 HTTP_QUERY_FLAG_NUMBER64, "134217728"
.常量 headers, "<文本长度: 193>"
.常量 FILE_NOTIFY_CHANGE_FILE_NAME, "1", , 监视目录或子树中的任何文件名更改都会导致更改通知等待操作返回。更改包括重命名、创建或删除文件名。
.常量 FILE_NOTIFY_CHANGE_DIR_NAME, "2", , 监视目录或子树中的任何目录名称更改都会导致更改通知等待操作返回。更改包括创建或删除目录。
.常量 FILE_NOTIFY_CHANGE_ATTRIBUTES, "4", , 监视目录或子树中的任何属性更改都会导致更改通知等待操作返回。
.常量 FILE_NOTIFY_CHANGE_SIZE, "8", , 监视目录或子树中的任何文件大小更改都会导致更改通知等待操作返回。仅当文件写入磁盘时，操作系统才会检测文件大小的变化。对于使用大量缓存的操作系统，仅当缓存被充分刷新时才会进行检测。
.常量 FILE_NOTIFY_CHANGE_LAST_WRITE, "16", , 对监视目录或子树中文件的上次写入时间的任何更改都会导致更改通知等待操作返回。仅当文件写入磁盘时，操作系统才会检测到上次写入时间的更改。对于使用大量缓存的操作系统，仅当缓存被充分刷新时才会进行检测。
.常量 FILE_NOTIFY_CHANGE_LAST_ACCESS, "32", , 对监视目录或子树中文件的上次访问时间的任何更改都会导致更改通知等待操作返回。
.常量 FILE_NOTIFY_CHANGE_CREATION, "64", , 对监视目录或子树中的文件创建时间的任何更改都会导致更改通知等待操作返回。
.常量 FILE_NOTIFY_CHANGE_SECURITY, "256", , 监视目录或子树中的任何安全描述符更改都会导致更改通知等待操作返回。
.常量 ASSOCF_VERIFY, "64", , 指示IQueryAssociations方法验证数据是否准确。此设置允许IQueryAssociations方法从用户的硬盘读取数据以进行验证。例如，他们可以根据存储在 .exe 文件中的名称检查注册表中的友好名称。设置此标志通常会降低方法的效率。
.常量 ASSOCF_NOFIXUPS, "256", , 指示IQueryAssociations方法不要修复注册表中的错误，例如函数的友好名称与 .exe 文件中的名称不匹配。
.常量 ASSOCSTR_EXECUTABLE, "2", , 来自 Shell 动词命令字符串的可执行文件。
.常量 ASSOCKEY_SHELLEXECCLASS, "1", , 通过SHELLEXECUTEINFO结构传递给ShellExecuteEx的键。
.常量 ASSOCKEY_APP, "2", , 文件类型的应用程序键。
.常量 ASSOCKEY_CLASS, "3", , ProgID 或类键。
.常量 ASSOCKEY_BASECLASS, "4", , 基类值。
.常量 ASSOCKEY_MAX, "5", , 枚举中的最后一项。
.常量 IQueryAssociations_Init, "3", , 初始化 IQueryAssociations 接口并将根键设置为适当的 ProgID。
.常量 IQueryAssociations_GetString, "4", , 从注册表中搜索并检索与文件或协议关联相关的字符串。
.常量 IQueryAssociations_GetKey, "5", , 从注册表中搜索并检索文件或协议关联相关的键。
.常量 IQueryAssociations_GetData, "6", , 从注册表中搜索和检索文件或协议关联相关的二进制数据。
.常量 IQueryAssociations_GetEnum, "7", , 这个方法没有实现。
.常量 IWbemLocator_ConnectServer, "3", , IWbemLocator::ConnectServer 方法通过 DCOM 创建到 strNetworkResource 参数中指定的计算机上的 WMI 命名空间的连接。
.常量 RPC_C_AUTHN_LEVEL_PKT, "4", , 每次服务器从客户端接收数据时进行身份验证。
.常量 RPC_C_AUTHN_WINNT, "10", , NT LAN Manager安全支持提供商（NTLM SSP）。
.常量 RPC_C_AUTHZ_NONE, "0", , 服务器不执行授权。
.常量 RPC_C_AUTHN_LEVEL_CALL, "3", , 每次服务器收到RPC时进行身份验证。
.常量 RPC_C_IMP_LEVEL_IMPERSONATE, "3", , 服务器可以跨一个计算机边界模拟客户端。
.常量 EOAC_NONE, "0", , 指示未设置任何功能标志。
.常量 IWbemServices_OpenNamespace, "3", , IWbemServices::OpenNamespace 方法为调用者提供了一个新的 IWbemServices 指针，该指针具有指定的子命名空间作为其操作上下文。
.常量 IWbemServices_CancelAsyncCall, "4", , IWbemServices::CancelAsyncCall 方法根据最初传递给异步方法的 IWbemObjectSink 指针取消任何当前挂起的异步调用。
.常量 IWbemServices_QueryObjectSink, "5", , IWbemServices::QueryObjectSink 方法允许调用者获取由 Windows 管理导出的通知处理程序。
.常量 IWbemServices_GetObject, "6", , IWbemServices::GetObject 方法检索类或实例。此方法仅从与当前 IWbemServices 对象关联的命名空间中检索对象。
.常量 IWbemServices_GetObjectAsync, "7", , IWbemServices::GetObjectAsync 方法根据对象的路径检索对象，类定义或实例。
.常量 IWbemServices_PutClass, "8", , IWbemServices::PutClass 方法创建一个新类或更新一个现有类。pObject 参数指定的类必须已使用所有必需的属性值正确初始化。
.常量 IWbemServices_PutClassAsync, "9", , IWbemServices::PutClassAsync 方法创建一个新类，或更新现有类。
.常量 IWbemServices_DeleteClass, "10", , IWbemServices::DeleteClass 方法从当前命名空间中删除指定的类。
.常量 IWbemServices_DeleteClassAsync, "11", , IWbemServices::DeleteClassAsync 方法从当前命名空间中删除指定的类。
.常量 IWbemServices_CreateClassEnum, "12", , IWbemServices::CreateClassEnum 方法为满足选择标准的所有类返回一个枚举器。
.常量 IWbemServices_CreateClassEnumAsync, "13", , IWbemServices::CreateClassEnumAsync 方法返回类提供程序支持的所有类的枚举。
.常量 IWbemServices_PutInstance, "14", , IWbemServices::PutInstance 方法创建或更新现有类的实例。该实例将写入 WMI 存储库。
.常量 IWbemServices_PutInstanceAsync, "15", , IWbemServices::PutInstanceAsync 方法异步创建或更新现有类的实例。更新确认或错误报告是通过调用者实现的 IWbemObjectSink 接口提供的。
.常量 IWbemServices_DeleteInstance, "16", , IWbemServices::DeleteInstance 方法删除当前命名空间中现有类的实例。
.常量 IWbemServices_DeleteInstanceAsync, "17", , IWbemServices::DeleteInstanceAsync 方法异步删除当前命名空间中现有类的实例。操作的确认或失败通过调用者实现的 IWbemObjectSink 接口上报。
.常量 IWbemServices_CreateInstanceEnum, "18", , IWbemServices::CreateInstanceEnum 方法创建一个枚举器，它根据用户指定的选择标准返回指定类的实例。
.常量 IWbemServices_CreateInstanceEnumAsync, "19", , IWbemServices::CreateInstanceEnumAsync 方法创建一个枚举器，它根据用户指定的选择标准异步返回指定类的实例。
.常量 IWbemServices_ExecQuery, "20", , IWbemServices::ExecQuery 方法执行查询以检索对象。
.常量 IWbemServices_ExecQueryAsync, "21", , IWbemServices::ExecQueryAsync 方法执行查询以异步检索对象。
.常量 IWbemServices_ExecNotificationQuery, "22", , IWbemServices::ExecNotificationQuery 方法执行查询以接收事件。调用立即返回，用户可以在事件到达时轮询返回的枚举器。释放返回的枚举数会取消查询。
.常量 IWbemServices_ExecNotificationQueryAsync, "23", , IWbemServices::ExecNotificationQueryAsync 方法执行与 IWbemServices::ExecNotificationQuery 相同的任务，除了将事件提供给指定的响应处理程序，直到调用 CancelAsyncCall 以停止事件通知。
.常量 IWbemServices_ExecMethod, "24", , 执行由 CIM 对象导出的方法。
.常量 IWbemServices_ExecMethodAsync, "25", , 异步执行由 CIM 对象导出的方法。
.常量 WBEM_FLAG_FORWARD_ONLY, "32", , 此标志导致返回仅向前的枚举数。仅转发枚举数通常比常规枚举数快得多，占用的内存更少，但不允许克隆或重置调用。
.常量 WBEM_FLAG_RETURN_IMMEDIATELY, "16", , 此标志使其成为半同步调用。有关详细信息，请参阅进行半同步调用。
.常量 IEnumWbemClassObject_Reset, "3", , IEnumWbemClassObject::Reset 方法将枚举序列重置回开头。由于 CIM 对象是动态的，因此调用此方法不一定返回您之前获得的相同对象列表。
.常量 IEnumWbemClassObject_Next, "4", , 使用 IEnumWbemClassObject::Next 方法获取一个或多个从枚举中的当前位置开始的对象。
.常量 IEnumWbemClassObject_NextAsync, "5", , 当需要将对象异步检索到接收器时，请使用 NextAsync 方法。
.常量 IEnumWbemClassObject_Clone, "6", , IEnumWbemClassObject::Clone 方法制作整个枚举器的逻辑副本，保留其在枚举中的当前位置。
.常量 IEnumWbemClassObject_Skip, "7", , 您可以使用 IEnumWbemClassObject::Skip 方法将枚举中的当前位置向前移动指定数量的对象。此外，这会影响对 NextAsync 的后续调用，但不会影响从 NextAsync 开始的挂起交付。
.常量 WBEM_INFINITE, "-1", , 调用将阻塞，直到对象可用为止。
.常量 IWbemClassObject_GetQualifierSet, "3", , IWbemClassObject::GetQualifierSet 方法返回一个接口指针，该指针允许对整个类对象的限定符集进行读写操作，无论对象是实例还是类定义。
.常量 IWbemClassObject_Get, "4", , IWbemClassObject::Get 方法检索指定的属性值（如果存在）。此方法还可以返回系统属性。
.常量 IWbemClassObject_Put, "5", , 命名属性设置为新值。
.常量 IWbemClassObject_Delete, "6", , IWbemClassObject::Delete 方法从 CIM 类定义及其所有限定符中删除指定的属性。
.常量 IWbemClassObject_GetNames, "7", , 检索对象中的属性名称。
.常量 IWbemClassObject_BeginEnumeration, "8", , 将枚举重置回枚举的开头。
.常量 IWbemClassObject_Next, "9", , IWbemClassObject::Next 方法检索以 IWbemClassObject::BeginEnumeration 开头的枚举中的下一个属性。
.常量 IWbemClassObject_EndEnumeration, "10", , IWbemClassObject::EndEnumeration 方法终止以 IWbemClassObject::BeginEnumeration 开始的枚举序列。
.常量 IWbemClassObject_GetPropertyQualifierSet, "11", , IWbemClassObject::GetPropertyQualifierSet 方法获取类对象中特定属性的限定符集。您可以将此方法与作为实例或类定义成员的属性一起使用。
.常量 IWbemClassObject_Clone, "12", , IWbemClassObject::Clone 方法返回一个新对象，它是当前对象的完整克隆。新对象的 COM 引用计数为 1。
.常量 IWbemClassObject_GetObjectText, "13", , IWbemClassObject::GetObjectText 方法以 MOF 语法返回对象的文本呈现。
.常量 IWbemClassObject_SpawnDerivedClass, "14", , 使用 IWbemClassObject::SpawnDerivedClass 方法从当前对象创建一个新的派生类对象。
.常量 IWbemClassObject_SpawnInstance, "15", , 使用 IWbemClassObject::SpawnInstance 方法创建类的新实例。
.常量 IWbemClassObject_CompareTo, "16", , IWbemClassObject::CompareTo 方法将一个对象与另一个 Windows 管理对象进行比较。请注意，在此比较过程中存在某些限制。
.常量 IWbemClassObject_GetPropertyOrigin, "17", , IWbemClassObject::GetPropertyOrigin 方法检索引入了特定属性的类的名称。
.常量 IWbemClassObject_InheritsFrom, "18", , IWbemClassObject::InheritsFrom 方法确定当前类或实例是否从指定的父类派生。
.常量 IWbemClassObject_GetMethod, "19", , 返回有关所请求方法的信息。
.常量 IWbemClassObject_PutMethod, "20", , 用于创建方法。
.常量 IWbemClassObject_DeleteMethod, "21", , 使用 IWbemClassObject::DeleteMethod 方法删除方法。仅当当前对象是 CIM 类定义时才支持此调用。无法从指向 CIM 实例的 IWbemClassObject 指针进行方法操作。
.常量 IWbemClassObject_BeginMethodEnumeration, "22", , 使用 IWbemClassObject::BeginMethodEnumeration 方法调用开始枚举可用于对象的方法。
.常量 IWbemClassObject_NextMethod, "23", , 用于检索以调用 IWbemClassObject::BeginMethodEnumeration 开始的方法枚举序列中的下一个方法。
.常量 IWbemClassObject_EndMethodEnumeration, "24", , IWbemClassObject::EndMethodEnumeration 方法用于终止以 IWbemClassObject::BeginMethodEnumeration 开始的方法枚举序列。
.常量 IWbemClassObject_GetMethodQualifierSet, "25", , IWbemClassObject::GetMethodQualifierSet 用于检索特定方法的限定符集。
.常量 IWbemClassObject_GetMethodOrigin, "26", , IWbemClassObject::GetMethodOrigin 方法用于确定为其声明方法的类。
.常量 VK_LSHIFT, "160", 公开, 左Shift键
.常量 VK_RSHIFT, "161", 公开, 右Shift键
.常量 VK_LCONTROL, "162", 公开, 左Ctrl键
.常量 VK_RCONTROL, "163", 公开, 右Ctrl键
.常量 VK_LMENU, "164", 公开, 左Alt键
.常量 VK_RMENU, "165", 公开, 右Alt键
.常量 INPUT_MOUSE, "0", , 该事件是一个鼠标事件。使用联合体的mi结构。
.常量 INPUT_KEYBOARD, "1", 公开, 该事件是一个键盘事件。使用union的ki结构。
.常量 INPUT_HARDWARE, "2", , 事件来自键盘或鼠标以外的输入硬件。使用联合体的hi结构。
.常量 KEYEVENTF_EXTENDEDKEY, "1", , 如果指定，扫描代码前面会有一个值为0xE0（224）的前缀字节。
.常量 KEYEVENTF_KEYUP, "2", 公开, 如果指定，则释放密钥。如果未指定，则按下该键。
.常量 KEYEVENTF_SCANCODE, "8", , 如果指定，wScan将标识密钥，wVK将被忽略。
.常量 KEYEVENTF_UNICODE, "4", , 如果指定，系统会合成VK_PACKET击键。该WVK参数必须为零。此标志只能与KEYEVENTF_KEYUP标志结合使用。
.常量 SYMBOLIC_LINK_FLAG_DIRECTORY, "1", , 链接目标是一个目录。
.常量 SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE, "2", , 指定此标志以允许在进程未提升时创建符号链接。必须先在机器上启用开发者模式，此选项才会起作用。
.常量 FILE_FLAG_BACKUP_SEMANTICS, "33554432", , 指示正在为备份或还原操作打开或创建文件。系统确保调用进程覆盖文件安全检查，前提是它具有必要的权限。您还可以设置此标志以获取目录句柄。目录句柄可以代替文件句柄传递给某些函数。
.常量 FILE_FLAG_OPEN_REPARSE_POINT, "2097152", , 指定此标志将禁止NTFS重分析点的重分析行为。打开文件时，将返回一个文件句柄，无论控制重分析点的筛选器是否可用。此标志不能与CREATE_ALWAYS标志一起使用。
.常量 FSCTL_GET_REPARSE_POINT, "589992", , 获取存储在现有重分析点中的信息。
.常量 GPS_READWRITE, "2", , 对调用进程的意义：可以将属性写入项目。注意：存储可能包含比只读存储更少的属性。
.常量 IPropertyStore_GetCount, "3", , 此方法返回附加到文件的属性数的计数。
.常量 IPropertyStore_GetAt, "4", , 从项目的属性数组中获取一个属性键。
.常量 IPropertyStore_GetValue, "5", , 此方法检索特定属性的数据。
.常量 IPropertyStore_SetValue, "6", , 此方法设置属性值或替换或删除现有值。
.常量 IPropertyStore_Commit, "7", , 进行更改后，此方法会保存更改。
.常量 IDispatch_GetTypeInfoCount, "3", , 检索对象提供的类型信息接口的数量（0 或 1）。
.常量 IDispatch_GetTypeInfo, "4", , 检索对象的类型信息，然后可以使用该信息获取接口的类型信息。
.常量 IDispatch_GetIDsOfNames, "5", , 将单个成员和一组可选的参数名称映射到一组相应的整数 DISPID，可用于对 Invoke 的后续调用。
.常量 IDispatch_Invoke, "6", , 提供对对象公开的属性和方法的访问。
.常量 IShellDispatch_get_Application, "7", , 包含代表应用程序的对象。
.常量 IShellDispatch_get_Parent, "8", , 检索代表当前对象的父对象的对象。
.常量 IShellDispatch_NameSpace, "9", , 为指定的文件夹创建并返回一个Folder对象。
.常量 IShellDispatch_BrowseForFolder, "10", , 创建一个对话框，使用户可以选择一个文件夹，然后返回所选文件夹的Folder对象。
.常量 IShellDispatch_Windows, "11", , 创建并返回一个ShellWindows对象。该对象表示属于 Shell 的所有打开窗口的集合。
.常量 IShellDispatch_Open, "12", , 打开指定的文件夹。
.常量 IShellDispatch_Explore, "13", , 在 Windows 资源管理器窗口中打开指定的文件夹。
.常量 IShellDispatch_MinimizeAll, "14", , 最小化桌面上的所有窗口。此方法与右键单击任务栏并在旧系统上选择最小化所有 Windows或单击任务栏上的显示桌面图标具有相同的效果。
.常量 IShellDispatch_UndoMinimizeALL, "15", , 将所有桌面窗口恢复到上次MinimizeAll命令之前的状态。此方法与右键单击任务栏并选择撤消最小化所有 Windows（在较旧的系统上）或再次单击任务栏中的显示桌面图标具有相同的效果。
.常量 IShellDispatch_FileRun, "16", , 向用户显示“运行”对话框。
.常量 IShellDispatch_CascadeWindows, "17", , 将所有窗口层叠在桌面上。
.常量 IShellDispatch_TileVertically, "18", , 垂直平铺桌面上的所有窗口。此方法与右键单击任务栏并选择“并排显示窗口”具有相同的效果。
.常量 IShellDispatch_TileHorizontally, "19", , 水平平铺桌面上的所有窗口。此方法与右键单击任务栏并选择Show windows stacked效果相同。
.常量 IShellDispatch_ShutdownWindows, "20", , 显示关闭 Windows对话框。这与单击“开始”菜单并选择“关机”相同。
.常量 IShellDispatch_Suspend, "21", , 暂停
.常量 IShellDispatch_EjectPC, "22", , 从扩展坞中弹出计算机。如果您的计算机支持此命令，这与单击“开始”菜单并选择“弹出 PC ”相同。
.常量 IShellDispatch_SetTime, "23", , 显示日期和时间对话框。此方法与在任务栏状态区右键单击时钟并选择调整日期/时间 效果相同。
.常量 IShellDispatch_TrayProperties, "24", , 显示任务栏和开始菜单属性对话框。此方法与右键单击任务栏并选择Properties具有相同的效果。
.常量 IShellDispatch_Help, "25", , 显示 Windows 帮助和支持窗口。此方法与单击“开始”菜单并选择“帮助和支持”的效果相同。
.常量 IShellDispatch_FindFiles, "26", , 显示查找：所有文件对话框。这与单击“开始”菜单然后选择“搜索”相同。
.常量 IShellDispatch_FindComputer, "27", , 显示搜索结果：计算机对话框。对话框显示指定计算机的搜索结果。
.常量 IShellDispatch_RefreshMenu, "28", , 刷新开始菜单的内容。仅用于 Windows XP 之前的系统。
.常量 IShellDispatch_ControlPanelItem, "29", , 运行指定的控制面板应用程序。如果应用程序已经打开，它将激活正在运行的实例。
.常量 Folder_get_Title, "7", , 包含文件夹的标题。
.常量 Folder_get_Application, "8", , 包含文件夹的 Application 对象。
.常量 Folder_get_Parent, "9", , 未实现。
.常量 Folder_get_ParentFolder, "10", , 包含父文件夹对象。
.常量 Folder_Items, "11", , 检索表示文件夹中项目集合的FolderItems对象。
.常量 Folder_ParseName, "12", , 创建并返回一个表示指定项目的FolderItem对象。
.常量 Folder_NewFolder, "13", , 创建一个新文件夹。
.常量 Folder_MoveHere, "14", , 将一个或多个项目移动到此文件夹。
.常量 Folder_CopyHere, "15", , 将一个或多个项目复制到文件夹。
.常量 Folder_GetDetailsOf, "16", , 检索有关文件夹中项目的详细信息。例如，它的大小、类型或上次修改的时间。
.常量 FolderItem_get_Application, "7", , 包含文件夹项目的应用程序对象。
.常量 FolderItem_get_Parent, "8", , 获取一个表示该项的父项的对象。
.常量 FolderItem_get_Name, "9", , 获取项目的名称。
.常量 FolderItem_put_Name, "10", , 设置项目的名称。
.常量 FolderItem_get_Path, "11", , 包含项目的完整路径和名称。
.常量 FolderItem_get_GetLink, "12", , 如果项目是快捷方式，则包含项目的ShellLinkObject对象。
.常量 FolderItem_get_GetFolder, "13", , 如果项目是文件夹，则包含项目的Folder对象。
.常量 FolderItem_get_IsLink, "14", , 指示项目是否为快捷方式。
.常量 FolderItem_get_IsFolder, "15", , 指示项目是否为文件夹。
.常量 FolderItem_get_IsFileSystem, "16", , 指示项目是否是文件系统的一部分。
.常量 FolderItem_get_IsBrowsable, "17", , 指示项目是否可以托管在浏览器或 Windows 资源管理器框架内。
.常量 FolderItem_get_ModifyDate, "18", , 获取文件上次修改的日期和时间。ModifyDate可用于检索文件夹上次修改的日期和时间，但不能对其进行设置。
.常量 FolderItem_put_ModifyDate, "19", , 设置文件上次修改的日期和时间。ModifyDate可用于检索文件夹上次修改的日期和时间，但不能对其进行设置。
.常量 FolderItem_get_Size, "20", , 包含项目的大小。
.常量 FolderItem_get_Type, "21", , 包含项目类型的字符串表示形式。
.常量 FolderItem_Verbs, "22", , 检索项目的FolderItemVerbs对象。这个对象是可以在项目上执行的动词的集合。
.常量 FolderItem_InvokeVerb, "23", , 在项目上执行动词。
.常量 FolderItemVerbs_get_Count, "7", , 包含集合中的项目数。
.常量 FolderItemVerbs_get_Application, "8", , 未实现。
.常量 FolderItemVerbs_get_Parent, "9", , 未实现。
.常量 FolderItemVerbs_Item, "10", , 检索集合中指定项目的FolderItemVerb对象。
.常量 FolderItemVerbs__NewEnum, "11", , 创建并返回一个新的FolderItemVerbs对象，该对象是此 FolderItemVerbs 对象的副本。
.常量 FolderItemVerb_get_Application, "7", , 未实现。
.常量 FolderItemVerb_get_Parent, "8", , 未实现。
.常量 FolderItemVerb_get_Name, "9", , 包含动词的名称。
.常量 FolderItemVerb_DoIt, "10", , 在与动词关联的FolderItem上执行动词。
.常量 ICustomDestinationList_SetAppID, "3", , 为其任务栏按钮将保存通过此接口的方法构建的自定义跳转列表的应用程序指定唯一的应用程序用户模型 ID (AppUserModelID)。此方法是可选的。
.常量 ICustomDestinationList_BeginList, "4", , 为自定义跳转列表启动构建会话。
.常量 ICustomDestinationList_AppendCategory, "5", , 定义自定义类别及其包含的目标，以包含在自定义跳转列表中。
.常量 ICustomDestinationList_AppendKnownCategory, "6", , 指定Frequent 或Recent 类别应包含在自定义跳转列表中。
.常量 ICustomDestinationList_AddUserTasks, "7", , 指定要包含在自定义跳转列表的任务类别中的项目。
.常量 ICustomDestinationList_CommitList, "8", , 声明由调用 ICustomDestinationList::BeginList 启动的跳转列表已完成并准备好显示。
.常量 ICustomDestinationList_GetRemovedDestinations, "9", , 检索用户从现有跳转列表中删除的当前目的地列表，此自定义跳转列表旨在替换该列表。
.常量 ICustomDestinationList_DeleteList, "10", , 删除指定应用程序的自定义跳转列表。
.常量 ICustomDestinationList_AbortList, "11", , 停止由 ICustomDestinationList::BeginList 启动的跳转列表构建会话，而不提交任何更改。
.常量 IObjectArray_GetCount, "3", , 提供集合中对象的计数。
.常量 IObjectArray_GetAt, "4", , 提供指向指定对象接口的指针。对象和接口由索引和接口 ID 指定。
.常量 IObjectCollection_AddObject, "5", , 将单个对象添加到集合中。
.常量 IObjectCollection_AddFromArray, "6", , 将包含在IObjectArray 中的对象添加到集合中。
.常量 IObjectCollection_RemoveObjectAt, "7", , 从集合中移除单个指定的对象。
.常量 IObjectCollection_Clear, "8", , 从集合中移除所有对象。
.常量 VARIANT_TRUE, "-1", , 该属性已被修改。
.常量 VARIANT_FALSE, "0", , 该属性尚未修改。
.常量 SeCreateTokenPrivilege, "1", , 需要创建主令牌。
.常量 SeAssignPrimaryTokenPrivilege, "2", , 需要分配进程的主令牌。
.常量 SeLockMemoryPrivilege, "3", , 需要在内存中锁定物理页。
.常量 SeIncreaseQuotaPrivilege, "4", , 需要增加分配给进程的配额。
.常量 SeUnsolicitedInputPrivilege, "5", , 需要从终端设备读取未经请求的输入。
.常量 SeMachineAccountPrivilege, "6", , 创建计算机帐户时需要。
.常量 SeTcbPrivilege, "7", , 将其持有者标识为受信任计算机库的一部分。某些受信任、受保护的子系统被授予此权限。
.常量 SeSecurityPrivilege, "8", , 需要执行许多与安全相关的功能，例如控制和查看审核消息。此权限将其持有人标识为安全操作员。
.常量 SeTakeOwnershipPrivilege, "9", , 被要求拥有一个对象的所有权而不被授予自由访问权。此权限仅允许将所有者值设置为持有者合法指定为对象所有者的值。
.常量 SeLoadDriverPrivilege, "10", , 需要加载或卸载设备驱动程序。
.常量 SeSystemProfilePrivilege, "11", , 需要收集整个系统的分析信息。
.常量 SeSystemtimePrivilege, "12", , 需要修改系统时间。
.常量 SeProfileSingleProcessPrivilege, "13", , 需要为单个进程收集分析信息。
.常量 SeIncreaseBasePriorityPrivilege, "14", , 需要增加进程的基本优先级。
.常量 SeCreatePagefilePrivilege, "15", , 创建分页文件时需要。
.常量 SeCreatePermanentPrivilege, "16", , 创建永久对象所必需的。
.常量 SeBackupPrivilege, "17", , 需要执行备份操作。
.常量 SeRestorePrivilege, "18", , 执行还原操作所需。此权限允许您将任何有效的用户或组SID设置为对象的所有者。
.常量 SeShutdownPrivilege, "19", , 需要关闭本地系统。
.常量 SeDebugPrivilege, "20", 公开, 调试进程所必需的。
.常量 SeAuditPrivilege, "21", , 需要生成审核日志项。
.常量 SeSystemEnvironmentPrivilege, "22", , 需要修改使用此类内存存储配置信息的系统的非易失性RAM。
.常量 SeChangeNotifyPrivilege, "23", , 需要接收文件或目录更改通知。此权限还会导致系统跳过所有遍历访问检查。默认情况下，它对所有用户都启用。
.常量 SeRemoteShutdownPrivilege, "24", , 需要使用网络请求关闭系统。
.常量 SeUndockPrivilege, "25", , 从扩展坞中卸下计算机时需要。
.常量 SeSyncAgentPrivilege, "26", , 需要同步目录服务数据。
.常量 SeEnableDelegationPrivilege, "27", , 必须启用计算机帐户和用户帐户以信任委派。
.常量 SeManageVolumePrivilege, "28", , 执行卷维护任务。
.常量 SeImpersonatePrivilege, "29", , 身份验证后模拟客户端。
.常量 SeCreateGlobalPrivilege, "30", , 需要在终端服务会话期间在全局命名空间中创建命名文件映射对象。默认情况下，管理员、服务和本地系统帐户会启用此权限。
.常量 SeTrustedCredManAccessPrivilege, "31", , 需要作为受信任的调用方访问凭据管理器。
.常量 SeRelabelPrivilege, "32", , 需要修改对象的强制完整性级别。
.常量 SeIncreaseWorkingSetPrivilege, "33", , 需要为在用户上下文中运行的应用程序分配更多内存。
.常量 SeTimeZonePrivilege, "34", , 需要调整与计算机内部时钟关联的时区。
.常量 SeCreateSymbolicLinkPrivilege, "35", , 需要创建符号链接。
.常量 IMAGE_NT_OPTIONAL_HDR32_MAGIC, "267", , 该文件是一个可执行映像。
.常量 IMAGE_NT_OPTIONAL_HDR64_MAGIC, "523", , 该文件是一个可执行映像。
.常量 IMAGE_ROM_OPTIONAL_HDR_MAGIC, "263", , 该文件是一个 ROM 映像。
.常量 SUB_CONTAINERS_AND_OBJECTS_INHERIT, "3", , 主对象包含的容器和非容器对象都继承了 ACE。此标志对应于 CONTAINER_INHERIT_ACE 和 OBJECT_INHERIT_ACE 标志的组合。
.常量 DACL_SECURITY_INFORMATION, "4", , 正在引用对象的 DACL。
.常量 SE_UNKNOWN_OBJECT_TYPE, "0", , 未知的对象类型。
.常量 SE_FILE_OBJECT, "1", , 表示文件或目录。
.常量 SE_SERVICE, "2", , 表示 Windows 服务。服务对象可以是本地服务，也可以是远程服务。
.常量 SE_PRINTER, "3", , 表示打印机。打印机对象可以是本地打印机，也可以是远程打印机。
.常量 SE_REGISTRY_KEY, "4", , 表示一个注册表项。注册表项对象可以位于本地注册表中或位于远程注册表中。
.常量 SE_LMSHARE, "5", , 表示网络共享。共享对象可以是本地的，也可以是远程的。
.常量 SE_KERNEL_OBJECT, "6", , 表示本地内核对象。
.常量 SE_WINDOW_OBJECT, "7", , 表示本地计算机上的窗口站或桌面对象。
.常量 SE_DS_OBJECT, "8", , 指示目录服务对象或目录服务对象的属性集或属性。
.常量 SE_DS_OBJECT_ALL, "9", , 指示目录服务对象及其所有属性集和属性。
.常量 SE_PROVIDER_DEFINED_OBJECT, "10", , 表示提供者定义的对象。
.常量 SE_WMIGUID_OBJECT, "11", , 表示 WMI 对象。
.常量 SE_REGISTRY_WOW64_32KEY, "12", , 表示 WOW64 下注册表项的对象。
.常量 SE_REGISTRY_WOW64_64KEY, "13", , 表示 WOW64 下注册表项的对象。
.常量 NOT_USED_ACCESS, "0", , 未使用的值。
.常量 GRANT_ACCESS, "1", 公开, 表示ACCESS_ALLOWED_ACE结构。新的 ACE 将指定的权利与受托人现有的任何允许或拒绝的权利相结合。
.常量 SET_ACCESS, "2", 公开, 表示允许指定权限的ACCESS_ALLOWED_ACE结构。在输入时，此值会丢弃受托人的任何现有访问控制信息。
.常量 DENY_ACCESS, "3", 公开, 表示拒绝指定权限的ACCESS_DENIED_ACE结构。
.常量 REVOKE_ACCESS, "4", , 指示删除指定受托者的所有现有ACCESS_ALLOWED_ACE或SYSTEM_AUDIT_ACE结构。
.常量 SET_AUDIT_SUCCESS, "5", , 表示SYSTEM_AUDIT_ACE结构，它为成功尝试使用指定的访问权限生成审计消息。在输入时，此值将指定的权限与受托人的任何现有审计访问权限组合在一起。
.常量 SET_AUDIT_FAILURE, "6", , 表示一个SYSTEM_AUDIT_ACE结构，它为使用指定访问权限的失败尝试生成审计消息。在输入时，此值将指定的权限与受托人的任何现有审计访问权限组合在一起。
.常量 VER_PRODUCT_TYPE, "128", , 产品类型
.常量 VER_EQUAL, "1", , 当前值必须等于指定值。
.常量 TokenGroups, "2", , 缓冲区接收包含与令牌关联的组帐户的TOKEN_GROUPS结构。
.常量 TokenIntegrityLevel, "25", , 缓冲区接收指定令牌完整性级别的TOKEN_MANDATORY_LABEL结构。
.常量 SECURITY_BUILTIN_DOMAIN_RID, "32", , 内置的系统域。
.常量 SECURITY_MANDATORY_LOW_RID, "4096", , 低MIC等级，如IE。
.常量 SECURITY_MANDATORY_MEDIUM_RID, "8192", , 中MIC等级，默认为这个等级，如Explorer。
.常量 SECURITY_MANDATORY_HIGH_RID, "12288", , 高MIC等级，以管理员身份运行的程序。
.常量 SECURITY_MANDATORY_SYSTEM_RID, "16384", , 系统MIC等级，一般是服务应用程序。
.常量 DOMAIN_ALIAS_RID_ADMINS, "544", , 域的管理员。
.常量 FILE_MAP_WRITE, "2", , 文件的读/写视图被映射。文件映射对象必须是使用PAGE_READWRITE或PAGE_EXECUTE_READWRITE保护创建的 。
.常量 FILE_MAP_READ, "4", , 文件的只读视图被映射。尝试写入文件视图会导致访问冲突。
.常量 FILE_MAP_EXECUTE, "32", , 文件的可执行视图被映射（映射的内存可以作为代码运行）。文件映射对象必须是使用PAGE_EXECUTE_READ、 PAGE_EXECUTE_WRITECOPY或PAGE_EXECUTE_READWRITE 保护创建的。
.常量 FILE_MAP_ALL_ACCESS, "983071", , 映射文件的读/写视图
.常量 IMAGE_DOS_SIGNATURE, "23117", , MZ
.常量 IMAGE_OS2_SIGNATURE, "17742", , NE
.常量 IMAGE_VXD_SIGNATURE, "17740", , LE
.常量 IMAGE_NT_SIGNATURE, "17744", , PE00
.常量 FMFD_URLASFILENAME, "1", , 将指定的pwzUrl视为文件名。
.常量 IWinHttpRequest_SetProxy, "7", , 设置代理服务器信息。
.常量 IWinHttpRequest_SetCredentials, "8", , 设置要与 HTTP 服务器（代理服务器或原始服务器）一起使用的凭据。
.常量 IWinHttpRequest_Open, "9", , 打开到 HTTP 资源的 HTTP 连接。
.常量 IWinHttpRequest_SetRequestHeader, "10", , 添加、更改或删除 HTTP 请求标头。
.常量 IWinHttpRequest_GetResponseHeader, "11", , 检索 HTTP 响应标头。
.常量 IWinHttpRequest_GetAllResponseHeaders, "12", , 检索所有 HTTP 响应标头。
.常量 IWinHttpRequest_Send, "13", , 向 HTTP 服务器发送 HTTP 请求。
.常量 IWinHttpRequest_get_Status, "14", , 上次响应的 HTTP 状态代码。
.常量 IWinHttpRequest_get_StatusText, "15", , HTTP 状态文本。
.常量 IWinHttpRequest_get_ResponseText, "16", , 响应实体主体。
.常量 IWinHttpRequest_get_ResponseBody, "17", , 响应实体主体为无符号字节数组。
.常量 IWinHttpRequest_get_ResponseStream, "18", , 作为IStream的响应实体主体。
.常量 IWinHttpRequest_get_Option, "19", , 读 WinHTTP 选项值。
.常量 IWinHttpRequest_put_Option, "20", , 写 WinHTTP 选项值。
.常量 IWinHttpRequest_WaitForResponse, "21", , 等待异步发送方法完成，具有可选的超时值，以秒为单位。
.常量 IWinHttpRequest_Abort, "22", , 中止WinHTTP Send方法。
.常量 IWinHttpRequest_SetTimeouts, "23", , 指定发送/接收操作的各个超时组件，以毫秒为单位。
.常量 IWinHttpRequest_SetClientCertificate, "24", , 选择要发送到安全超文本传输协议 (HTTPS) 服务器的客户端证书。
.常量 IWinHttpRequest_SetAutoLogonPolicy, "25", , 设置当前的自动登录策略。
.常量 WinHttpRequestOption_UserAgentString, "0", , 设置或检索包含用户代理字符串的VARIANT 。
.常量 WinHttpRequestOption_URL, "1", , 检索包含资源 URL 的VARIANT 。该值是只读的；您不能使用此属性设置 URL。在调用Open方法之前无法读取 URL 。此选项对于在Send方法完成后检查 URL 以验证是否发生了任何重定向很有用。
.常量 WinHttpRequestOption_URLCodePage, "2", , 设置或检索标识URL 字符串的代码页的VARIANT 。默认值为 UTF-8 代码页。代码页用于将在Open方法中传递的 Unicode URL 字符串转换为单字节字符串表示。
.常量 WinHttpRequestOption_EscapePercentInURL, "3", , 设置或检索一个VARIANT，它指示 URL 字符串中的百分比字符是否转换为转义序列。此选项的默认值是VARIANT_TRUE，它指定所有不安全的美国国家标准协会 (ANSI) 字符（百分比符号除外）都转换为转义序列。
.常量 WinHttpRequestOption_SslErrorIgnoreFlags, "4", , 设置或检索指示应忽略哪些服务器证书错误的VARIANT 。
.常量 WinHttpRequestOption_SelectCertificate, "5", , 设置一个VARIANT，指定发送到服务器进行身份验证的客户端证书。此选项指示以反斜杠分隔的客户端证书的位置、证书存储和主题。
.常量 WinHttpRequestOption_EnableRedirects, "6", , 设置或检索一个VARIANT ，该 VARIANT指示当服务器为资源指定新位置时是否自动重定向请求。此选项的默认值是VARIANT_TRUE表示请求被自动重定向。
.常量 WinHttpRequestOption_UrlEscapeDisable, "7", , 设置或检索一个VARIANT，它指示 URL 的路径和查询组件中的不安全字符是否转换为转义序列。此选项的默认值为VARIANT_TRUE，它指定转换路径和查询中的字符。
.常量 WinHttpRequestOption_UrlEscapeDisableQuery, "8", , 设置或检索一个VARIANT，它指示 URL 的查询组件中的不安全字符是否转换为转义序列。此选项的默认值为VARIANT_TRUE，它指定转换查询中的字符。
.常量 WinHttpRequestOption_SecureProtocols, "9", , 设置或检索指示可以使用哪些安全协议的VARIANT 。此选项选择客户端可接受的协议。该协议是在安全套接字层 (SSL) 握手期间协商的。
.常量 WinHttpRequestOption_EnableTracing, "10", , 设置或检索指示当前是否启用跟踪的VARIANT 。
.常量 WinHttpRequestOption_RevertImpersonationOverSsl, "11", , 控制WinHttpRequest对象是否在 SSL 证书身份验证操作期间临时恢复客户端模拟。WinHttpRequest对象的默认设置是TRUE。将此选项设置为FALSE以在执行证书身份验证操作时保持模拟。
.常量 WinHttpRequestOption_EnableHttpsToHttpRedirects, "12", , 控制 WinHTTP 是否允许重定向。默认情况下，所有重定向都会自动跟随，除了从安全 (https) URL 传输到非安全 (http) URL 的重定向。将此选项设置为TRUE以启用 HTTPS 到 HTTP 重定向。
.常量 WinHttpRequestOption_EnablePassportAuthentication, "13", , 启用或禁用对 Passport 身份验证的支持。默认情况下，对 Passport 身份验证的自动支持是禁用的；将此选项设置为TRUE以启用 Passport 身份验证支持。
.常量 WinHttpRequestOption_MaxAutomaticRedirects, "14", , 设置或检索 WinHTTP 遵循的最大重定向数；默认值为 10。此限制可防止未经授权的站点在大量重定向后使 WinHTTP 客户端停止。
.常量 WinHttpRequestOption_MaxResponseHeaderSize, "15", , 设置或检索服务器响应的标头部分的最大大小的绑定集。此界限可保护客户端免受恶意服务器试图通过发送包含无限量标头数据的响应来阻止客户端。默认值为 64 KB。
.常量 WinHttpRequestOption_MaxResponseDrainSize, "16", , 设置或检索将从响应中排出的数据量的界限，以便重用连接。默认值为 1 MB。
.常量 WinHttpRequestOption_EnableHttp1_1, "17", , 设置或检索一个布尔值，该值指示应该使用 HTTP/1.1 还是 HTTP/1.0。默认值为TRUE，因此默认使用 HTTP/1.1。
.常量 WinHttpRequestOption_EnableCertificateRevocationCheck, "18", , 在 SSL 协商期间启用服务器证书吊销检查。当服务器提供证书时，将执行检查以确定证书是否已被其颁发者吊销。如果证书确实被吊销了，或者吊销检查因为无法下载证书吊销列表（CRL）而失败，则请求失败；无法抑制此类撤销错误。
.常量 WinHttpRequestOption_RejectUserpwd, "19", , 拒绝的URL输入包含用户名，密码，或两者。
.常量 IPicture_get_Handle, "3", , 检索此图片对象中管理的图片的句柄到指定位置。
.常量 IPicture_get_hPal, "4", , 检索图片对象当前使用的调色板的副本。
.常量 IPicture_get_Type, "5", , 检索图片对象中包含的图片的当前类型。
.常量 IPicture_get_Width, "6", , 检索图片对象中图片的当前宽度。
.常量 IPicture_get_Height, "7", , 检索图片对象中图片的当前高度。
.常量 IPicture_Render, "8", , 渲染（绘制）由源图片的偏移量 (xSrc,ySrc) 和要复制的尺寸 (cxSrc,xySrc) 定义的图片的指定部分。
.常量 IPicture_set_hPal, "9", , 将 GDI 调色板分配给图片对象中包含的图片。
.常量 IPicture_get_CurDC, "10", , 检索当前设备上下文的句柄。该属性仅对位图图片有效。
.常量 IPicture_SelectPicture, "11", , 将位图图片选择到给定的设备上下文中，并返回先前选择图片的设备上下文以及图片的 GDI 句柄。此方法与 IPicture_get_CurDC 结合使用。
.常量 IPicture_get_KeepOriginalFormat, "12", , 检索图片的 KeepOriginalFormat 属性的当前值。
.常量 IPicture_put_KeepOriginalFormat, "13", , 设置图片的 KeepOriginalFormat 属性的值。
.常量 IPicture_PictureChanged, "14", , 通知图片对象其图片资源已更改。此方法仅使用 DISPID_PICT_HANDLE 为任何连接的接收器调用 IPropertyNotifySink::OnChanged。
.常量 IPicture_SaveAsFile, "15", , 将图片的数据保存到流中，其格式与将其保存到文件中的格式相同。位图使用 BMP 文件格式，元文件使用 WMF 格式，图标使用 ICO 格式。
.常量 IPicture_get_Attributes, "16", , 检索图片的当前位属性集。
.常量 VK_OEM_1, "186", , ;:
.常量 VK_OEM_PLUS, "187", , +
.常量 VK_OEM_COMMA, "188", , ,
.常量 VK_OEM_MINUS, "189", , -
.常量 VK_OEM_PERIOD, "190", , .
.常量 VK_OEM_2, "191", , /?
.常量 VK_OEM_3, "192", , `~
.常量 HCBT_MOVESIZE, "0", , 一个窗口即将被移动或调整大小。
.常量 HCBT_MINMAX, "1", , 一个窗口即将被最小化或最大化。
.常量 HCBT_QS, "2", , 系统已从系统消息队列中检索到WM_QUEUESYNC消息。
.常量 HCBT_CREATEWND, "3", , 即将创建一个窗口。系统在向窗口发送WM_CREATE或WM_NCCREATE消息之前调用钩子过程。如果钩子过程返回一个非零值，则系统销毁窗口；CreateWindow函数返回NULL，但WM_DESTROY消息不会发送到窗口。如果钩子过程返回零，则正常创建窗口。
.常量 HCBT_DESTROYWND, "4", , 一扇窗户即将被摧毁。
.常量 HCBT_ACTIVATE, "5", , 系统即将激活一个窗口。
.常量 HCBT_CLICKSKIPPED, "6", , 系统已从系统消息队列中删除了一条鼠标消息。收到此挂钩代码后，CBT 应用程序必须安装WH_JOURNALPLAYBACK挂钩程序以响应鼠标消息。
.常量 HCBT_KEYSKIPPED, "7", , 系统已从系统消息队列中删除了一条键盘消息。收到此挂钩代码后，CBT 应用程序必须安装WH_JOURNALPLAYBACK挂钩程序以响应键盘消息。
.常量 HCBT_SYSCOMMAND, "8", , 即将执行系统命令。这允许 CBT 应用程序通过热键来防止任务切换。
.常量 HCBT_SETFOCUS, "9", , 一个窗口即将获得键盘焦点。
.常量 OAIF_ALLOW_REGISTRATION, "1", , 启用“始终使用此程序”复选框。如果没有通过，它将被禁用。
.常量 OAIF_REGISTER_EXT, "2", , 在用户点击OK按钮后进行注册。
.常量 OAIF_EXEC, "4", , 注册后执行文件。
.常量 OAIF_FORCE_REGISTRATION, "8", , 强制选中始终使用此程序复选框。
.常量 OFN_OVERWRITEPROMPT, "2", , 如果所选文件已存在，则使“另存为”对话框生成一个消息框。用户必须确认是否覆盖文件。
.常量 OFN_HIDEREADONLY, "4", , 隐藏只读复选框。
.常量 OFN_ENABLEHOOK, "32", , 启用在lpfnHook成员中指定的钩子函数。
.常量 OFN_PATHMUSTEXIST, "2048", , 用户只能键入有效的路径和文件名。如果使用此标志并且用户在“文件名”输入字段中键入了无效的路径和文件名，则对话框功能会在消息框中显示警告。
.常量 OFN_FILEMUSTEXIST, "4096", , 用户只能在文件名输入字段中键入现有文件的名称。如果指定了此标志并且用户输入了无效名称，则对话框过程会在消息框中显示警告。
.常量 OFN_EXPLORER, "524288", , 指示对“打开”或“另存为”对话框所做的任何自定义都使用资源管理器样式的自定义方法。
.常量 OFN_ENABLESIZING, "8388608", , 允许使用鼠标或键盘调整资源管理器样式对话框的大小。
.常量 CDN_INITDONE, "-601", , 当系统完成对话框中的控件排列后，由资源管理器样式的打开或另存为对话框发送。系统移动标准控件，为子对话框的控件腾出空间。
.常量 ISpVoice_SetOutput, "13", , 设置当前输出对象。该对象可以是流、音频设备或输出音频设备的对象令牌。
.常量 ISpVoice_Speak, "20", , 说出文本字符串或文件的内容。
.常量 ISpStreamFormat_GetFormat, "14", , 传回流的缓存格式。
.常量 ISpVoice_GetOutputStream, "15", , 检索指向当前输出流的指针。
.常量 ISpStream_BindToFile, "17", , 将输入流绑定到它所标识的文件。
.常量 SPFM_CREATE_ALWAYS, "3", , 创建文件，即使文件已经存在并删除前一个文件。该标志表示文件将以读写模式打开。
.常量 SPF_DEFAULT, "0", , 指定应使用默认设置。
.常量 IFileDialogCustomize_EnableOpenDropDown, "3", , 在对话框中的“打开”或“保存”按钮上启用下拉列表。
.常量 IFileDialogCustomize_AddMenu, "4", , 向对话框添加一个菜单。
.常量 IFileDialogCustomize_AddPushButton, "5", , 向对话框中添加一个按钮。
.常量 IFileDialogCustomize_AddComboBox, "6", , 向对话框中添加一个组合框。
.常量 IFileDialogCustomize_AddRadioButtonList, "7", , 将选项按钮（也称为单选按钮）组添加到对话框。
.常量 IFileDialogCustomize_AddCheckButton, "8", , 向对话框中添加一个复选按钮（复选框）。
.常量 IFileDialogCustomize_AddEditBox, "9", , 向对话框添加一个编辑框控件。
.常量 IFileDialogCustomize_AddSeparator, "10", , 向对话框添加分隔符，允许控件的可视分隔。
.常量 IFileDialogCustomize_AddText, "11", , 将文本内容添加到对话框。
.常量 IFileDialogCustomize_SetControlLabel, "12", , 设置与控件关联的文本，例如按钮文本或编辑框标签。
.常量 IFileDialogCustomize_GetControlState, "13", , 获取给定控件的当前可见性和启用状态。
.常量 IFileDialogCustomize_SetControlState, "14", , 设置给定控件的当前可见性和启用状态。
.常量 IFileDialogCustomize_GetEditBoxText, "15", , 获取编辑框控件中的当前文本。
.常量 IFileDialogCustomize_SetEditBoxText, "16", , 设置对话框中的编辑框控件中的文本。
.常量 IFileDialogCustomize_GetCheckButtonState, "17", , 获取对话框中复选按钮（复选框）的当前状态。
.常量 IFileDialogCustomize_SetCheckButtonState, "18", , 设置对话框中复选按钮（复选框）的状态。
.常量 IFileDialogCustomize_AddControlItem, "19", , 将项添加到对话框中的容器控件。
.常量 IFileDialogCustomize_RemoveControlItem, "20", , 从对话框中的容器控件中删除项。
.常量 IFileDialogCustomize_RemoveAllControlItems, "21", , 未实现。
.常量 IFileDialogCustomize_GetControlItemState, "22", , 获取在对话框中找到的容器控件中项的当前状态。
.常量 IFileDialogCustomize_SetControlItemState, "23", , 在对话框中找到的容器控件中设置项的当前状态。
.常量 IFileDialogCustomize_GetSelectedControlItem, "24", , 从对话框中的指定容器控件中获取特定项。
.常量 IFileDialogCustomize_SetSelectedControlItem, "25", , 设置选项按钮组或对话框中的组合框中特定项的选定状态。
.常量 IFileDialogCustomize_StartVisualGroup, "26", , 在对话框中声明一个视觉组。对任何“add”方法的后续调用会将这些元素添加到该组中。
.常量 IFileDialogCustomize_EndVisualGroup, "27", , 停止向对话框中的可视组添加元素。
.常量 IFileDialogCustomize_MakeProminent, "28", , 在对话框中放置一个控件，以便与其他添加的控件相比它更加突出。
.常量 IFileDialogCustomize_SetControlItemText, "29", , 设置控件项的文本。例如，伴随单选按钮或菜单项的文本。
.常量 ISWbemDateTime_put_Value, "8", , 完整的 CIM日期时间值。
.常量 ISWbemDateTime_GetFileTime, "45", , 将表示为BSTR的FILETIME日期和时间转换为 WMI DATETIME格式。
.常量 SB_HORZ, "0", 公开, 显示或隐藏窗口的标准水平滚动条。
.常量 SB_VERT, "1", 公开, 显示或隐藏窗口的标准垂直滚动条。
.常量 SB_CTL, "2", 公开, 显示或隐藏滚动条控件。hwnd参数必须是滚动条控件的句柄 。
.常量 SB_BOTH, "3", 公开, 显示或隐藏窗口的标准水平和垂直滚动条。
.常量 CREDUIWIN_GENERIC, "1", , 调用方请求凭据提供程序以纯文本形式返回用户名和密码。此值不能与 SECURE_PROMPT结合使用。
.常量 ERROR_LOGON_FAILURE, "1326", , 提供的凭证是无效的。
.常量 CTRL_C_EVENT, "0", 公开, 从键盘输入或 GenerateConsoleCtrlEvent 函数生成的信号接收到 + 信号。CTRL + C
.常量 CTRL_BREAK_EVENT, "1", 公开, 从键盘输入或 GenerateConsoleCtrlEvent 生成的信号接收到 + 信号。CTRL + BREAK
.常量 CTRL_CLOSE_EVENT, "2", 公开, 当用户关闭控制台时，系统会向附加到控制台的所有进程发送信号（通过单击控制台窗口窗口菜单上的“关闭”，或单击任务管理器中的“结束任务”按钮命令）。
.常量 CTRL_LOGOFF_EVENT, "5", 公开, 用户注销时系统发送到所有控制台进程的信号。此信号不指示哪个用户正在注销，因此无法做出任何假设。
.常量 CTRL_SHUTDOWN_EVENT, "6", 公开, 系统关闭时系统发送的信号。当系统发送此信号时，交互式应用程序不存在，因此在这种情况下只能接收服务。服务还具有自己的关闭事件通知机制。
.常量 DLL_PROCESS_ATTACH, "1", 公开, 由于启动进程或调用 LoadLibrary，DLL 正在加载到当前进程的虚拟地址空间中。
.常量 DLL_THREAD_ATTACH, "2", 公开, 当前进程正在创建新线程。
.常量 DLL_THREAD_DETACH, "3", 公开, 线程正在完全退出。
.常量 DLL_PROCESS_DETACH, "0", 公开, DLL 正在从调用进程的虚拟地址空间中卸载。
.常量 SCS_32BIT_BINARY, "0", 公开, 基于 32 位 Windows 的应用程序
.常量 SCS_DOS_BINARY, "1", 公开, 基于 MS-DOS 的应用程序
.常量 SCS_WOW_BINARY, "2", 公开, 基于 16 位 Windows 的应用程序
.常量 SCS_PIF_BINARY, "3", 公开, 执行基于 MS-DOS 的应用程序的 PIF 文件
.常量 SCS_POSIX_BINARY, "4", 公开, 基于 POSIX 的应用程序
.常量 SCS_OS216_BINARY, "5", 公开, 基于 16 位 OS/2 的应用程序
.常量 SCS_64BIT_BINARY, "6", 公开, 基于 64 位 Windows 的应用程序
.常量 LOGON32_LOGON_INTERACTIVE, "2", , 此登录类型适用于将以交互方式使用计算机的用户
.常量 LOGON32_LOGON_NETWORK, "3", , 此登录类型适用于高性能服务器对纯文本密码进行身份验证
.常量 LOGON32_PROVIDER_DEFAULT, "0", , 对系统使用标准登录提供程序
.常量 VOLUME_NAME_DOS, "0", , 返回带驱动器号的路径
.常量 VOLUME_NAME_GUID, "1", , 返回具有卷 GUID 路径而不是驱动器名称的路径
.常量 VOLUME_NAME_NT, "2", , 返回 NT 设备对象路径
.常量 VOLUME_NAME_NONE, "4", , 返回没有驱动器信息的路径



.版本 2

.图片 动态调用代码
.图片 _7zdll
.图片 AXP_空
.图片 HP_Socket4C_dll
.图片 COM调用
.图片 X64_Start, , 进入 64 位汇编环境，必须与 X64_End 在同一子程序中成对使用
.图片 X64_End, , 退出 64 位汇编环境
.图片 X64_SaveFs, , 调用 64 函数时执行于 X64_Start 之前，不是太具通用性，因为保存了 fs 到局部变量1，同时对齐栈顶
.图片 X64_RestoreFs, , 调用 64 函数时执行于 X64_End 之后，从局部变量1 回复 fs 段，也回复了 ss 段
.图片 X86_Init
.图片 X64_Init
.图片 CLSID_FileSaveDialog, , 通过添加特定于保存对话框的方法来扩展IFileDialog接口。
.图片 IID_IFileSaveDialog
.图片 CLSID_FileOpenDialog, , 通过添加特定于打开的对话框的方法来扩展IFileDialog接口。
.图片 IID_IFileOpenDialog
.图片 IID_IFileDialogCustomize, , 公开允许应用程序将控件添加到公共文件对话框的方法。
.图片 CLSID_QueryAssociations, , 通过定义文件类并将其与应用程序关联来创建文件关联时，可以在注册表中存储各种相关信息。
.图片 IID_IQueryAssociations
.图片 CLSID_WbemLocator, , 获取指向特定主机上Windows管理的初始命名空间指针。
.图片 IID_IWbemLocator
.图片 CLSID_ShellLink, , 允许创建、修改和解析Shell链接。
.图片 IID_IShellLinkW
.图片 IID_IPersistFile
.图片 IID_IShellFolder2, , 由所有 Shell 命名空间文件夹对象公开，其方法用于管理文件夹。
.图片 CLSID_MMDeviceEnumerator, , 接口提供用于枚举多媒体设备资源的方法。
.图片 IID_IMMDeviceEnumerator
.图片 CLSID_IAudioSessionManager
.图片 IID_IPropertyStore, , 此接口公开用于枚举和操作属性值的方法。
.图片 CLSID_Shell
.图片 IID_IShellDispatch
.图片 CLSID_DestinationList
.图片 IID_ICustomDestinationList, , 公开允许应用程序提供自定义跳转列表（包括目标和任务）以在任务栏中显示的方法。
.图片 IID_IObjectArray, , 公开使客户端能够访问支持IUnknown的对象集合中的项目的方法。
.图片 CLSID_EnumerableObjectCollection
.图片 IID_IObjectCollection, , 通过提供使客户端能够在集合中添加和删除支持IUnknown 的对象的方法来扩展IObjectArray接口。
.图片 CLSID_WinHttpRequest
.图片 IID_IWinHttpRequest, , IWinHttpRequest接口为Microsoft Windows HTTP 服务 (WinHTTP)提供所有非事件方法。
.图片 IID_IPicture, , 管理图片对象及其属性。图片对象为位图、图标和元文件提供了与语言无关的抽象。与标准字体对象一样，系统提供图片对象的标准实现。
.图片 CLSID_SWbemDateTime
.图片 IID_ISWbemDateTime, , SWbemDateTime对象是一个帮助对象，用于解析和设置通用信息模型 (CIM)日期时间值。
.图片 IID_IAccessible, , 公开使客户端应用程序可以访问用户界面元素及其子元素的方法和属性。
.图片 FMTID_AudioSummaryInformation, 公开, {64440490-4C8B-11D1-8B70-080036B11A03}
.图片 FMTID_Volume, 公开, {9B174B35-40FF-11D2-A27E-00C04FC30871}
.图片 FMTID_SummaryInformation, 公开, {F29F85E0-4FF9-1068-AB91-08002B27B3D9}
.图片 FMTID_DocumentSummaryInformation, 公开, {D5CDD502-2E9C-101B-9397-08002B2CF9AE}
.图片 FMTID_ShellDetails, 公开, {28636AA6-953D-11D2-B5D6-00C04FD918D0}
.图片 PSGUID_MEDIAFILESUMMARYINFORMATION, 公开, {64440492-4C8B-11D1-8B70-080036B11A03}    媒体文件摘要信息。
.图片 FMTID_Storage, 公开, {B725F130-47EF-101A-A5F1-02608C9EEBAC}
.图片 FMTID_ImageProperties, 公开, {14B81DA1-0135-4D31-96D9-6CBFC9671A99}
.图片 PSFMTID_VERSION, 公开, {0CEF7D53-FA64-11D1-A203-0000F81FEDEE}
.图片 FMTID_Misc, 公开, {9B174B34-40FF-11D2-A27E-00C04FC30871}
.图片 FMTID_Query, 公开, {49691C90-7E17-101A-A91C-08002B2ECDA9}
.图片 FMTID_IntSite, 公开, {000214A1-0000-0000-C000-000000000046}
.图片 FMTID_DRM, 公开, {AEAC19E4-89AE-4508-B9B7-BB867ABEE2ED}
.图片 PSGUID_IMAGESUMMARYINFORMATION, 公开, {6444048F-4C8B-11D1-8B70-080036B11A03}
.图片 PSGUID_LINK, 公开, {B9B4B3FC-2B51-4A42-B5D8-324146AFCF25}
.图片 FMTID_MUSIC, 公开, {56A3372E-CE9C-11D2-9F0E-006097C686F6}
.图片 FMTID_WebView, 公开, {F2275480-F782-4291-BD94-F13693513AEC}
.图片 FMTID_VideoSummaryInformation, 公开, {64440491-4C8B-11D1-8B70-080036B11A03}
.图片 System_AppUserModel, 公开, {9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3}
.图片 CLSID_SpVoice, , ISpVoice 接口使应用程序能够执行语音合成操作。
.图片 IID_ISpVoice
.图片 CLSID_SpStream
.图片 IID_ISpStream
.图片 _libmysql
